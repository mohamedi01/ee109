Visiting Block Block(x39) [List() => false, List() => false]
  Visiting Block Block(Const(())) [List() => true, List() => false]
  Retiming block Block(Const(())):
    x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
    x15 = RegRead(x3)
    x16 = RegRead(x4)
    x17 = LUTRead(x14,List(x15, x16),Set())
    x18 = RegRead(x1)
    x19 = FixAdd(x17,x18)
    x20 = RegWrite(x2,x19,Set())
  Result: 
    ()
    x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
    x15 = RegRead(x3)
    x16 = RegRead(x4)
    x17 = LUTRead(x14,List(x15, x16),Set())
    x18 = RegRead(x1)
    x20 = RegWrite(x2,x19,Set())
  Working on pipeLatencies of result Vector(Const(()), x14, x15, x16, x17, x18, x20), schedule Vector(x14, x15, x16, x17, x18, x19, x20)
  Memories with both reads and writes in this scope: Set()
  Done finding cycles: Vector(), Map()
  ----------------------------------
  Computing pipeLatencies for scope:
    x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
    x15 = RegRead(x3)
    x16 = RegRead(x4)
    x17 = LUTRead(x14,List(x15, x16),Set())
    x18 = RegRead(x1)
    x19 = FixAdd(x17,x18)
    x20 = RegWrite(x2,x19,Set())
  Computing fullDFS: Const(())
  Computing fullDFS: x14
  cur: x14, inReduce: false, latency: 0.0
  [0.0 = max(0) + 0.0] x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
  Computing fullDFS: x15
  cur: x15, inReduce: false, latency: 0.0
  [0.0 = max(0) + 0.0] x15 = RegRead(x3)
  Computing fullDFS: x16
  cur: x16, inReduce: false, latency: 0.0
  [0.0 = max(0) + 0.0] x16 = RegRead(x4)
  Computing fullDFS: x17
  [1.0 = max(0.0, 0.0, 0.0) + 1.0] x17 = LUTRead(x14,List(x15, x16),Set())
  Computing fullDFS: x18
  cur: x18, inReduce: false, latency: 0.0
  [0.0 = max(0) + 0.0] x18 = RegRead(x1)
  Computing fullDFS: x20
  Computing fullDFS: x19
  [2.0 = max(1.0, 0.0) + 1.0] x19 = FixAdd(x17,x18)
  [3.0 = max(2.0) + 1.0] x20 = RegWrite(x2,x19,Set())
  Cycles: Map()
    Schedule after pipeLatencies calculation:
    [0.0] x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
    [0.0] x15 = RegRead(x3)
    [0.0] x16 = RegRead(x4)
    [0.0] x18 = RegRead(x1)
    [1.0] x17 = LUTRead(x14,List(x15, x16),Set())
    [2.0] x19 = FixAdd(x17,x18)
    [3.0] x20 = RegWrite(x2,x19,Set())
  [0.0] ()
  [0.0] x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]])
  [0.0] x18 = RegRead(x1)
  [0.0] x16 = RegRead(x4)
  [0.0] x15 = RegRead(x3)
  [1.0] x17 = LUTRead(x14,List(x15, x16),Set())
  [2.0] x19 = FixAdd(x17,x18)
  [3.0] x20 = RegWrite(x2,x19,Set())
  
  
  Sym Delays:
    [0.0 = 0.0 - 0.0]: () [cycle = false]
    [0.0 = 0.0 - 0.0]: x14 = LUTNew(List(Const(3), Const(3)),ArrayBuffer(Const(1), Const(2), Const(3), Const(4), Const(5), Const(6), Const(7), Const(8), Const(9)),LUT2[Fix[TRUE,_32,_0]]) [cycle = false]
    [0.0 = 1.0 - 1.0]: x17 = LUTRead(x14,List(x15, x16),Set()) [cycle = false]
    [0.0 = 0.0 - 0.0]: x18 = RegRead(x1) [cycle = false]
    [0.0 = 0.0 - 0.0]: x16 = RegRead(x4) [cycle = false]
    [0.0 = 0.0 - 0.0]: x15 = RegRead(x3) [cycle = false]
    [1.0 = 2.0 - 1.0]: x19 = FixAdd(x17,x18) [cycle = false]
    [2.0 = 3.0 - 1.0]: x20 = RegWrite(x2,x19,Set()) [cycle = false]
  Visiting Block Block((b23) => x24) [List() => false, List() => false]
