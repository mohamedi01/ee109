  Advancing blk
     From: Host
     To: Host
    x160 = DRAMHostNew(List(Const(16)),Const(0)) [Host]
    Updating x160 since there are no subst rules for it
    x119 = AccelScope(Block(Const(()))) [x119 (block: -1)]
    Updating x119 since there are no subst rules for it
    Advancing blk
       From: x119 (block: -1)
       To: x119 (block: 0)
    node: (x119,x119 (block: -1)), block: (x119,x119 (block: 0))
      x161 = SRAMNew(List(Const(16)),SRAM1[Fix[TRUE,_32,_0]]) [x119 (block: 0)]
      Updating x161 since there are no subst rules for it
      x162 = CounterNew(Const(-5),Const(5),Const(1),Const(1)) [x186 (block: -1)]
      Updating x162 since there are no subst rules for it
      x163 = CounterChainNew(List(x162)) [x186 (block: -1)]
      Updating x163 since there are no subst rules for it
      x164 = CounterNew(Const(0),Const(16),Const(1),Const(1)) [x185 (block: -1)]
      Updating x164 since there are no subst rules for it
      x165 = CounterChainNew(Vector(x164)) [x185 (block: -1)]
      Updating x165 since there are no subst rules for it
      x186 = UnrolledReduce(Set(),x163,Block((x161) => x185),List(List(b166)),List(List(b168)),None) [x186 (block: -1)]
      Updating x186 since there are no subst rules for it
      Advancing blk
         From: x186 (block: -1)
         To: x186 (block: 0)
      node: (x186,x186 (block: -1)), block: (x186,x186 (block: 0))
        x170 = SRAMNew(List(Const(16)),SRAM1[Fix[TRUE,_32,_0]]) [x186 (block: 0)]
        Updating x170 since there are no subst rules for it
        x171 = CounterNew(Const(0),Const(16),Const(1),Const(1)) [x176 (block: -1)]
        Updating x171 since there are no subst rules for it
        x172 = CounterChainNew(List(x171)) [x176 (block: -1)]
        Updating x172 since there are no subst rules for it
        x176 = UnrolledForeach(Set(b168),x172,Block(Const(())),List(List(b173)),List(List(b174)),None) [x176 (block: -1)]
        Updating x176 since there are no subst rules for it
        Advancing blk
           From: x176 (block: -1)
           To: x176 (block: 0)
        node: (x176,x176 (block: -1)), block: (x176,x176 (block: 0))
          x175 = SRAMBankedWrite(x170,Vector(Const(1)),Vector(List(Const(0))),Vector(b173),Vector(Set(b174, b168))) [x176 (block: 0)]
          Updating x175 since there are no subst rules for it
        x185 = UnrolledForeach(Set(),x165,Block(Const(())),Vector(List(b167)),Vector(List(b169)),None) [x185 (block: -1)]
        Updating x185 since there are no subst rules for it
        Advancing blk
           From: x185 (block: -1)
           To: x185 (block: 0)
        node: (x185,x185 (block: -1)), block: (x185,x185 (block: 0))
          x177 = SRAMBankedRead(x170,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) [x185 (block: 0)]
          Updating x177 since there are no subst rules for it
          
          Transforming node that is primitive, is inHw, and is transient
          x178 = VecApply(x177,0) [stateless]
           - users: Set(User(x183,x185 (block: 0)))
           - ctrl:  x185 (block: 0)
          x178 = VecApply(x177,0) [x185 (block: 0)]
          Updating x178 since there are no subst rules for it
          x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) [x185 (block: 0)]
          Updating x179 since there are no subst rules for it
          
          Transforming node that is primitive, is inHw, and is transient
          x180 = VecApply(x179,0) [stateless]
           - users: Set(User(x183,x185 (block: 0)))
           - ctrl:  x185 (block: 0)
          x180 = VecApply(x179,0) [x185 (block: 0)]
          Updating x180 since there are no subst rules for it
          x183 = FixAdd(x178,x180) [x185 (block: 0)]
          Updating x183 since there are no subst rules for it
          x184 = SRAMBankedWrite(x161,Vector(x183),Vector(List(Const(0))),Vector(b167),Vector(Set(b169))) [x185 (block: 0)]
          Updating x184 since there are no subst rules for it
      x208 = UnitPipe(Set(),Block(Const(())),None) [x208 (block: -1)]
      Updating x208 since there are no subst rules for it
      Advancing blk
         From: x208 (block: -1)
         To: x208 (block: 0)
      node: (x208,x208 (block: -1)), block: (x208,x208 (block: 0))
        x187 = StreamOutNew(BurstCmdBus) [x208 (block: 0)]
        Updating x187 since there are no subst rules for it
        x188 = StreamOutNew(BurstFullDataBus()) [x208 (block: 0)]
        Updating x188 since there are no subst rules for it
        x189 = StreamInNew(BurstAckBus) [x208 (block: 0)]
        Updating x189 since there are no subst rules for it
        x194 = UnitPipe(Set(),Block(Const(())),None) [x194 (block: -1)]
        Updating x194 since there are no subst rules for it
        Advancing blk
           From: x194 (block: -1)
           To: x194 (block: 0)
        node: (x194,x194 (block: -1)), block: (x194,x194 (block: 0))
          x190 = DRAMAddress(x160) [x194 (block: 0)]
          Updating x190 since there are no subst rules for it
          
          Transforming node that is primitive, is inHw, and is transient
          x191 = SimpleStruct(ArrayBuffer((offset,x190), (size,Const(64)), (isLoad,Const(false)))) [stateless]
           - users: Set(User(x193,x194 (block: 0)))
           - ctrl:  x194 (block: 0)
          x191 = SimpleStruct(ArrayBuffer((offset,x190), (size,Const(64)), (isLoad,Const(false)))) [x194 (block: 0)]
          Updating x191 since there are no subst rules for it
          x192 = DRAMIsAlloc(x160) [x194 (block: 0)]
          Updating x192 since there are no subst rules for it
          x193 = StreamOutBankedWrite(x187,ArrayBuffer(x191),ArrayBuffer(Set(x192))) [x194 (block: 0)]
          Updating x193 since there are no subst rules for it
        x195 = CounterNew(Const(0),Const(16),Const(1),Const(1)) [x203 (block: -1)]
        Updating x195 since there are no subst rules for it
        x196 = CounterChainNew(List(x195)) [x203 (block: -1)]
        Updating x196 since there are no subst rules for it
        x203 = UnrolledForeach(Set(),x196,Block(Const(())),List(List(b197)),List(List(b198)),None) [x203 (block: -1)]
        Updating x203 since there are no subst rules for it
        Advancing blk
           From: x203 (block: -1)
           To: x203 (block: 0)
        node: (x203,x203 (block: -1)), block: (x203,x203 (block: 0))
          x199 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b197),Vector(Set(b198)),Vec[Fix[TRUE,_32,_0]]) [x203 (block: 0)]
          Updating x199 since there are no subst rules for it
          
          Transforming node that is primitive, is inHw, and is transient
          x200 = VecApply(x199,0) [stateless]
           - users: Set(User(x201,x203 (block: 0)))
           - ctrl:  x203 (block: 0)
          x200 = VecApply(x199,0) [x203 (block: 0)]
          Updating x200 since there are no subst rules for it
          
          Transforming node that is primitive, is inHw, and is transient
          x201 = SimpleStruct(ArrayBuffer((_1,x200), (_2,Const(true)))) [stateless]
           - users: Set(User(x202,x203 (block: 0)))
           - ctrl:  x203 (block: 0)
          x201 = SimpleStruct(ArrayBuffer((_1,x200), (_2,Const(true)))) [x203 (block: 0)]
          Updating x201 since there are no subst rules for it
          x202 = StreamOutBankedWrite(x188,ArrayBuffer(x201),ArrayBuffer(Set(b198))) [x203 (block: 0)]
          Updating x202 since there are no subst rules for it
        x204 = FringeDenseStore(x160,x187,x188,x189) [x208 (block: 0)]
        Updating x204 since there are no subst rules for it
        x207 = UnitPipe(Set(),Block(Const(())),None) [x207 (block: -1)]
        Updating x207 since there are no subst rules for it
        Advancing blk
           From: x207 (block: -1)
           To: x207 (block: 0)
        node: (x207,x207 (block: -1)), block: (x207,x207 (block: 0))
          x205 = StreamInBankedRead(x189,ArrayBuffer(Set())) [x207 (block: 0)]
          Updating x205 since there are no subst rules for it
    x209 = ArrayNew(Const(16)) [Host]
    Updating x209 since there are no subst rules for it
    x210 = GetMem(x160,x209) [Host]
    Updating x210 since there are no subst rules for it
    x211 = MapIndices(Const(16),Block((b26) => Const(10))) [Host]
    Updating x211 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
    x212 = TextConcat(List(Const("expected: "), Const("\n"))) [Host]
    Updating x212 since there are no subst rules for it
    x213 = PrintIf(Set(),x212) [Host]
    Updating x213 since there are no subst rules for it
    x214 = ArrayLength(x211) [Host]
    Updating x214 since there are no subst rules for it
    x219 = SeriesForeach(Const(0),x214,Const(1),Block((b31) => Const(()))) [Host]
    Updating x219 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x215 = ArrayApply(x211,b31) [Host]
      Updating x215 since there are no subst rules for it
      x216 = FixToText(x215,None) [Host]
      Updating x216 since there are no subst rules for it
      x217 = TextConcat(List(x216, Const(" "))) [Host]
      Updating x217 since there are no subst rules for it
      x218 = PrintIf(Set(),x217) [Host]
      Updating x218 since there are no subst rules for it
    x220 = PrintIf(Set(),Const("\n")) [Host]
    Updating x220 since there are no subst rules for it
    x221 = TextConcat(List(Const("result:   "), Const("\n"))) [Host]
    Updating x221 since there are no subst rules for it
    x222 = PrintIf(Set(),x221) [Host]
    Updating x222 since there are no subst rules for it
    x223 = ArrayLength(x209) [Host]
    Updating x223 since there are no subst rules for it
    x228 = SeriesForeach(Const(0),x223,Const(1),Block((b41) => Const(()))) [Host]
    Updating x228 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x224 = ArrayApply(x209,b41) [Host]
      Updating x224 since there are no subst rules for it
      x225 = FixToText(x224,None) [Host]
      Updating x225 since there are no subst rules for it
      x226 = TextConcat(List(x225, Const(" "))) [Host]
      Updating x226 since there are no subst rules for it
      x227 = PrintIf(Set(),x226) [Host]
      Updating x227 since there are no subst rules for it
    x229 = PrintIf(Set(),Const("\n")) [Host]
    Updating x229 since there are no subst rules for it
    x233 = ArrayZip(x211,x209,Block((x211,b48) => x230),Block((x209,b48) => x231),Block((x230,x231) => x232)) [Host]
    Updating x233 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x230 = ArrayApply(x211,b48) [Host]
      Updating x230 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x231 = ArrayApply(x209,b48) [Host]
      Updating x231 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x232 = FixEql(x230,x231) [Host]
      Updating x232 since there are no subst rules for it
    x236 = ArrayReduce(x233,Block((x233,b53) => x234),Block((b54,b55) => x235)) [Host]
    Updating x236 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x234 = ArrayApply(x233,b53) [Host]
      Updating x234 since there are no subst rules for it
    Advancing blk
       From: Host
       To: Host
      x235 = And(b54,b55) [Host]
      Updating x235 since there are no subst rules for it
    x237 = BitToText(x236) [Host]
    Updating x237 since there are no subst rules for it
    x238 = TextConcat(List(Const("PASS: "), x237)) [Host]
    Updating x238 since there are no subst rules for it
    x239 = TextConcat(List(x238, Const(" (Lab2Part2SimpleMemFold)"))) [Host]
    Updating x239 since there are no subst rules for it
    x240 = TextConcat(List(x239, Const("\n"))) [Host]
    Updating x240 since there are no subst rules for it
    x241 = PrintIf(Set(),x240) [Host]
    Updating x241 since there are no subst rules for it
    x242 = AssertIf(Set(),x236,Some(Const("Lab2Part1.scala:54:11: Assertion failure"))) [Host]
    Updating x242 since there are no subst rules for it
