  x119 = AccelScope(Block(Const(())))
    x186 = UnrolledReduce(Set(),x163,Block((x161) => Const(())),List(List(b166)),List(List(b168)),None)
      x176 = UnrolledForeach(Set(b168),x172,Block(Const(())),List(List(b173)),List(List(b174)),None)
      Working on pipeLatencies of result Vector(Const(()), x175), schedule Vector(x175)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x175
      cur: x175, inReduce: false, latency: 1.0
      Cycles: Map()
      cycles are Vector()
         stm: x175, None
       - Latency:  1.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x185 = UnrolledForeach(Set(),x165,Block(Const(())),Vector(List(b167)),Vector(List(b169)),None)
      Working on pipeLatencies of result Vector(Const(()), x177, x179, x184), schedule Vector(x177, x178, x179, x180, x183, x243, x244, x184)
      Memories with both reads and writes in this scope: Set(x161)
      NonConflictSets(x179, x184): Set()
      NonConflictSets(x179, x184): Set()
      Found Cycle: x179, x184
      Exclusions: Set() Set() 
      Done finding cycles: Vector(AccumTriple(x161,x179,x184)), Map(x184 -> List(AccumTriple(x161,x179,x184)), x180 -> List(AccumTriple(x161,x179,x184)), x183 -> List(AccumTriple(x161,x179,x184)), x179 -> List(AccumTriple(x161,x179,x184)))
      Computing fullDFS: Const(())
      Computing fullDFS: x177
      cur: x177, inReduce: false, latency: 2.0
      Computing fullDFS: x179
      cur: x179, inReduce: true, latency: 2.0
      Known Cycles: List(AccumTriple(x161,x179,x184))
      Computing fullDFS: x184
      Computing fullDFS: x183
      Computing fullDFS: x178
      Computing fullDFS: x180
      Computing fullDFS: x243
      cur: x243, inReduce: false, latency: 0.0
      Computing fullDFS: x244
      cur: x244, inReduce: false, latency: 0.0
      Cycle #0: write: x184, cycle: x179, x179, x180, x183, x184
      Cycles: Map(x184 -> Vector(x179, x179, x180, x183, x184), x180 -> Vector(x179, x180), x183 -> Vector(x179, x180, x183), x179 -> List(x179))
      pseudo cycles for x161:
      Access: x179 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
      First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
      Pushing x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) by 0.0 to 2.0 due to muxing.
      Access: x184 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
      First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
      Pushing x184 = SRAMBankedWrite(x161,Vector(x183),Vector(List(Const(0))),Vector(x244),Vector(Set(x243))) by 0.0 to 4.0 due to muxing.
      cycles are Vector(AAACycle(Vector(x179),x161,1.0), AAACycle(Vector(x184),x161,1.0), WARCycle(x179,x184,x161,Vector(x179, x179, x180, x183, x184),4.0,spatial.node.AccumMarker$Unknown$@20b9ff72,-1))
         stm: x177, None
         stm: x178, None
         stm: x179, Some(0)
         stm: x180, None
         stm: x183, None
         stm: x243, None
         stm: x244, None
         stm: x184, None
       - Latency:  4.0
       - Interval: 4.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer(0))
     - Interval: 1.0
    x208 = UnitPipe(Set(),Block(Const(())),None)
      x194 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x190, x192, x193), schedule Vector(x190, x191, x192, x193)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x190
      cur: x190, inReduce: false, latency: 0.0
      Computing fullDFS: x192
      cur: x192, inReduce: false, latency: 0.0
      Computing fullDFS: x193
      Computing fullDFS: x191
      Cycles: Map()
      cycles are Vector()
         stm: x190, None
         stm: x191, None
         stm: x192, None
         stm: x193, None
       - Latency:  0.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x203 = UnrolledForeach(Set(),x196,Block(Const(())),List(List(b197)),List(List(b198)),None)
      Working on pipeLatencies of result Vector(Const(()), x199, x202), schedule Vector(x199, x200, x201, x245, x202)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x199
      cur: x199, inReduce: false, latency: 2.0
      Computing fullDFS: x202
      Computing fullDFS: x201
      Computing fullDFS: x200
      Computing fullDFS: x245
      cur: x245, inReduce: false, latency: 0.0
      Cycles: Map()
      cycles are Vector()
         stm: x199, None
         stm: x200, None
         stm: x201, None
         stm: x245, None
         stm: x202, None
       - Latency:  2.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x207 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x205), schedule Vector(x205)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x205
      cur: x205, inReduce: false, latency: 1.0
      Cycles: Map()
      cycles are Vector()
         stm: x205, None
       - Latency:  1.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
     - Interval: 1.0
   - Interval: 1.0
