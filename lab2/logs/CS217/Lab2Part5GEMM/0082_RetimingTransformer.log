  Transforming Block Block(Const(())) [List() => false, List() => false]
    Transforming Block Block((b16) => x891) [List() => false, List() => false]
    Transforming Block Block((b24) => x894) [List() => false, List() => false]
    Transforming Block Block((b31) => Const(0)) [List() => false, List() => false]
    Transforming Block Block(Const(())) [List() => false, List() => false]
      Transforming Block Block(Const(())) [List() => false, List() => false]
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x917 = RegRead(x880) (0.0)
          x918 = FixSub(x917,b913) (0.0)
          x919 = FixMin(Const(16),x918) (1.0)
          x920 = RegWrite(x916,x919,Set()) (1.0)
        Working on pipeLatencies of result Vector(Const(()), x917, x920), schedule Vector(x917, x918, x919, x920)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x917
        cur: x917, inReduce: false, latency: 0.0
        Computing fullDFS: x920
        Computing fullDFS: x919
        Computing fullDFS: x918
        Cycles: Map()
        computing delay lines for Vector(x917, x918, x919, x920) Map(x917 -> 0.0, x918 -> 1.0, x919 -> 1.0, x920 -> 2.0) Map() List()
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x917 = RegRead(x880)
        [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x918 = FixSub(x917,b913)
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x917 = RegRead(x880)
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b913
        [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x919 = FixMin(Const(16),x918)
        ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] 16
        ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x918 = FixSub(x917,b913)
        [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x920 = RegWrite(x916,x919,Set())
        ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x919 = FixMin(Const(16),x918)
          Creating value delay on Const(16) for reader x919 with delay 1: 
        Transforming Block Block(Const(())) [List() => false, List() => false]
          Transforming Block Block(Const(())) [List() => true, List() => false]
          Retiming block Block(Const(())):
            x928 = RegRead(x878) (0.0)
            x929 = FixSub(x928,b924) (0.0)
            x930 = FixMin(Const(16),x929) (1.0)
            x931 = RegWrite(x927,x930,Set()) (1.0)
          Working on pipeLatencies of result Vector(Const(()), x928, x931), schedule Vector(x928, x929, x930, x931)
          Memories with both reads and writes in this scope: Set()
          Done finding cycles: Vector(), Map()
          Computing fullDFS: Const(())
          Computing fullDFS: x928
          cur: x928, inReduce: false, latency: 0.0
          Computing fullDFS: x931
          Computing fullDFS: x930
          Computing fullDFS: x929
          Cycles: Map()
          computing delay lines for Vector(x928, x929, x930, x931) Map(x930 -> 1.0, x917 -> 0.0, x920 -> 2.0, x919 -> 1.0, x931 -> 2.0, x929 -> 1.0, x918 -> 1.0, x928 -> 0.0) Map() List()
          [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x928 = RegRead(x878)
          [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x929 = FixSub(x928,b924)
          ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x928 = RegRead(x878)
          ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b924
          [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x930 = FixMin(Const(16),x929)
          ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] 16
          ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x929 = FixSub(x928,b924)
          [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x931 = RegWrite(x927,x930,Set())
          ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x930 = FixMin(Const(16),x929)
            Creating value delay on Const(16) for reader x930 with delay 1: 
          Transforming Block Block(Const(())) [List() => false, List() => false]
            Transforming Block Block(Const(())) [List() => true, List() => false]
            Retiming block Block(Const(())):
              x942 = FixAdd(b924,b940) (0.0)
              x943 = RegRead(x880) (0.0)
              x1322 = FixFMA(x942,x943,b913) (1.0)
              x946 = FixDivSRA(x1322,Const(4)) (7.0)
              x947 = FixSLA(x946,Const(4)) (7.2)
              x1323 = FixSLA(x946,Const(6)) (7.2)
              x949 = FixSub(x1322,x947) (7.4)
              x950 = RegRead(x916) (0.0)
              x951 = FixAdd(x949,x950) (8.4)
              x952 = FixAdd(x951,Const(15)) (9.4)
              x953 = FixDivSRA(x952,Const(4)) (10.4)
              x954 = FixSLA(x953,Const(4)) (10.6)
              x1324 = FixSLA(x953,Const(6)) (10.6)
              x956 = FixToFix(x1323,TRUE,_64,_0) (7.4)
              x957 = DRAMAddress(x900) (0.0)
              x958 = FixAdd(x956,x957) (7.4)
              x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true)))) (10.8)
              x960 = DRAMIsAlloc(x900) (0.0)
              x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941))) (10.8)
              x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951))) (10.8)
              x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941))) (10.8)
            Working on pipeLatencies of result Vector(Const(()), x957, x943, x961, x963, x950, x960), schedule Vector(x942, x943, x1322, x946, x947, x1323, x949, x950, x951, x952, x953, x954, x1324, x956, x957, x958, x959, x960, x961, x962, x963)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            Computing fullDFS: Const(())
            Computing fullDFS: x957
            cur: x957, inReduce: false, latency: 0.0
            Computing fullDFS: x943
            cur: x943, inReduce: false, latency: 0.0
            Computing fullDFS: x961
            Computing fullDFS: x959
            Computing fullDFS: x1324
            Computing fullDFS: x953
            Computing fullDFS: x952
            Computing fullDFS: x951
            Computing fullDFS: x949
            Computing fullDFS: x1322
            Computing fullDFS: x942
            cur: x942, inReduce: false, latency: 1.0
            Computing fullDFS: x947
            Computing fullDFS: x946
            Computing fullDFS: x950
            cur: x950, inReduce: false, latency: 0.0
            Computing fullDFS: x958
            Computing fullDFS: x956
            Computing fullDFS: x1323
            Computing fullDFS: x960
            cur: x960, inReduce: false, latency: 0.0
            Computing fullDFS: x963
            Computing fullDFS: x962
            Computing fullDFS: x954
            Cycles: Map()
            computing delay lines for Vector(x942, x943, x1322, x946, x947, x1323, x949, x950, x951, x952, x953, x954, x1324, x956, x957, x958, x959, x960, x961, x962, x963) Map(x1322 -> 7.0, x962 -> 10.8, x930 -> 1.0, x1323 -> 7.4, x917 -> 0.0, x949 -> 8.4, x956 -> 7.4, x920 -> 2.0, x942 -> 1.0, x957 -> 0.0, x952 -> 10.4, x1324 -> 10.799999999999999, x953 -> 10.6, x958 -> 9.4, x919 -> 1.0, x947 -> 7.4, x943 -> 0.0, x959 -> 10.8, x954 -> 10.799999999999999, x951 -> 9.4, x931 -> 2.0, x961 -> 10.8, x963 -> 11.8, x946 -> 7.2, x929 -> 1.0, x950 -> 0.0, x918 -> 1.0, x960 -> 0.0, x928 -> 0.0) Map() List()
            [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x942 = FixAdd(b924,b940)
            ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b924
            ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b940
            [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x943 = RegRead(x880)
            [Arrive = Dly - Lat: 1.0 = 7.0 - 6.0] x1322 = FixFMA(x942,x943,b913)
            ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x942 = FixAdd(b924,b940)
            ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] x943 = RegRead(x880)
            ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] b913
            [Arrive = Dly - Lat: 7.0 = 7.2 - 0.2] x946 = FixDivSRA(x1322,Const(4))
            ..[0.0 (-> 0) = 7.0 - (7.0 - 0.0) (-> 7 - 7)] x1322 = FixFMA(x942,x943,b913)
            ..[7.0 (-> 7) = 7.0 - (0.0 - 0.0) (-> 7 - 0)] 4
            [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x947 = FixSLA(x946,Const(4))
            ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x946 = FixDivSRA(x1322,Const(4))
            ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 4
            [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1323 = FixSLA(x946,Const(6))
            ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x946 = FixDivSRA(x1322,Const(4))
            ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 6
            [Arrive = Dly - Lat: 7.4 = 8.4 - 1.0] x949 = FixSub(x1322,x947)
            ..[0.40000000000000036 (-> 0) = 7.4 - (7.0 - 0.0) (-> 7 - 7)] x1322 = FixFMA(x942,x943,b913)
            ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x947 = FixSLA(x946,Const(4))
            [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x950 = RegRead(x916)
            [Arrive = Dly - Lat: 8.4 = 9.4 - 1.0] x951 = FixAdd(x949,x950)
            ..[0.0 (-> 0) = 8.4 - (8.4 - 0.0) (-> 8 - 8)] x949 = FixSub(x1322,x947)
            ..[8.4 (-> 8) = 8.4 - (0.0 - 0.0) (-> 8 - 0)] x950 = RegRead(x916)
            [Arrive = Dly - Lat: 9.4 = 10.4 - 1.0] x952 = FixAdd(x951,Const(15))
            ..[0.0 (-> 0) = 9.4 - (9.4 - 0.0) (-> 9 - 9)] x951 = FixAdd(x949,x950)
            ..[9.4 (-> 9) = 9.4 - (0.0 - 0.0) (-> 9 - 0)] 15
            [Arrive = Dly - Lat: 10.4 = 10.6 - 0.2] x953 = FixDivSRA(x952,Const(4))
            ..[0.0 (-> 0) = 10.4 - (10.4 - 0.0) (-> 10 - 10)] x952 = FixAdd(x951,Const(15))
            ..[10.4 (-> 10) = 10.4 - (0.0 - 0.0) (-> 10 - 0)] 4
            [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x954 = FixSLA(x953,Const(4))
            ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x953 = FixDivSRA(x952,Const(4))
            ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 4
            [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1324 = FixSLA(x953,Const(6))
            ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x953 = FixDivSRA(x952,Const(4))
            ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 6
            [Arrive = Dly - Lat: 7.4 = 7.4 - 0.0] x956 = FixToFix(x1323,TRUE,_64,_0)
            ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1323 = FixSLA(x946,Const(6))
            [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x957 = DRAMAddress(x900)
            [Arrive = Dly - Lat: 7.4 = 9.4 - 2.0] x958 = FixAdd(x956,x957)
            ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x956 = FixToFix(x1323,TRUE,_64,_0)
            ..[7.4 (-> 7) = 7.4 - (0.0 - 0.0) (-> 7 - 0)] x957 = DRAMAddress(x900)
            [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
            ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x958 = FixAdd(x956,x957)
            ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1324 = FixSLA(x953,Const(6))
            ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
            [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x960 = DRAMIsAlloc(x900)
            [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
            ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
            ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] x960 = DRAMIsAlloc(x900)
            ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b941
            [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
            ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x954 = FixSLA(x953,Const(4))
            ..[2.4000000000000004 (-> 2) = 10.8 - (8.4 - 0.0) (-> 10 - 8)] x949 = FixSub(x1322,x947)
            ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x951 = FixAdd(x949,x950)
            [Arrive = Dly - Lat: 10.8 = 11.8 - 1.0] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
            ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
            ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
            ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b941
              Creating value delay on b941 for reader x961 with delay 10: 
              Creating value delay on b941 for reader x963 with delay 10: 
              Creating value delay on b913 for reader x1322 with delay 1: 
              Creating value delay on x949 for reader x962 with delay 2: 
              Creating value delay on Const(6) for reader x1323 with delay 7: 
              Creating value delay on Const(6) for reader x1324 with delay 10: 
              Creating value delay on x957 for reader x958 with delay 7: 
              Creating value delay on Const(15) for reader x952 with delay 9: 
              Creating value delay on Const(4) for reader x946 with delay 7: 
              Creating value delay on Const(4) for reader x947 with delay 7: 
              Creating value delay on Const(4) for reader x953 with delay 10: 
              Creating value delay on Const(4) for reader x954 with delay 10: 
              Creating value delay on x958 for reader x959 with delay 1: 
              Creating value delay on x943 for reader x1322 with delay 1: 
              Creating value delay on x951 for reader x962 with delay 1: 
              Creating value delay on Const(true) for reader x959 with delay 10: 
              Creating value delay on Const(true) for reader x963 with delay 10: 
              Creating value delay on x950 for reader x951 with delay 8: 
              Creating value delay on x960 for reader x961 with delay 10: 
            Transforming Block Block(Const(())) [List() => false, List() => false]
              Transforming Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) (0.0)
                x974 = VecApply(x973,0) (0.0)
                x975 = FieldApply(x974,start) (0.0)
                x976 = RegWrite(x970,x975,Set()) (0.0)
                x977 = FieldApply(x974,end) (0.0)
                x978 = RegWrite(x971,x977,Set()) (0.0)
                x979 = FieldApply(x974,size) (0.0)
                x980 = RegWrite(x972,x979,Set()) (0.0)
              Working on pipeLatencies of result Vector(Const(()), x973, x980, x978, x976), schedule Vector(x973, x974, x975, x976, x977, x978, x979, x980)
              Memories with both reads and writes in this scope: Set()
              Done finding cycles: Vector(), Map()
              Computing fullDFS: Const(())
              Computing fullDFS: x973
              cur: x973, inReduce: false, latency: 0.0
              Computing fullDFS: x980
              Computing fullDFS: x979
              Computing fullDFS: x974
              Computing fullDFS: x978
              Computing fullDFS: x977
              Computing fullDFS: x976
              Computing fullDFS: x975
              Cycles: Map()
              computing delay lines for Vector(x973, x974, x975, x976, x977, x978, x979, x980) Map(x1322 -> 7.0, x962 -> 10.8, x977 -> 0.0, x930 -> 1.0, x973 -> 0.0, x1323 -> 7.4, x917 -> 0.0, x949 -> 8.4, x956 -> 7.4, x920 -> 2.0, x942 -> 1.0, x957 -> 0.0, x952 -> 10.4, x974 -> 0.0, x980 -> 1.0, x1324 -> 10.799999999999999, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x943 -> 0.0, x959 -> 10.8, x954 -> 10.799999999999999, x951 -> 9.4, x978 -> 1.0, x931 -> 2.0, x976 -> 1.0, x961 -> 10.8, x963 -> 11.8, x946 -> 7.2, x929 -> 1.0, x950 -> 0.0, x918 -> 1.0, x960 -> 0.0, x928 -> 0.0) Map() List()
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] true
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x974 = VecApply(x973,0)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x975 = FieldApply(x974,start)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x974 = VecApply(x973,0)
              [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x976 = RegWrite(x970,x975,Set())
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x975 = FieldApply(x974,start)
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x977 = FieldApply(x974,end)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x974 = VecApply(x973,0)
              [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x978 = RegWrite(x971,x977,Set())
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x977 = FieldApply(x974,end)
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x979 = FieldApply(x974,size)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x974 = VecApply(x973,0)
              [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x980 = RegWrite(x972,x979,Set())
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x979 = FieldApply(x974,size)
              Transforming Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x987 = RegRead(x970) (0.0)
                x988 = FixLeq(x987,b985) (0.0)
                x989 = RegRead(x971) (0.0)
                x990 = FixLst(b985,x989) (0.0)
                x991 = And(x988,x990) (0.4)
                x992 = FixSub(b985,x987) (0.0)
                x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969))) (0.0)
                x994 = VecApply(x993,0) (1.0)
                x996 = FixSLA(b968,Const(4)) (0.0)
                x997 = FixAdd(x996,x992) (1.0)
                x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969))) (2.0)
              Working on pipeLatencies of result Vector(Const(()), x998, x989, x993, x987), schedule Vector(x987, x988, x989, x990, x991, x992, x993, x994, x996, x997, x998)
              Memories with both reads and writes in this scope: Set()
              Done finding cycles: Vector(), Map()
              Computing fullDFS: Const(())
              Computing fullDFS: x998
              Computing fullDFS: x991
              Computing fullDFS: x988
              Computing fullDFS: x987
              cur: x987, inReduce: false, latency: 0.0
              Computing fullDFS: x990
              Computing fullDFS: x989
              cur: x989, inReduce: false, latency: 0.0
              Computing fullDFS: x994
              Computing fullDFS: x993
              cur: x993, inReduce: false, latency: 1.0
              Computing fullDFS: x997
              Computing fullDFS: x992
              Computing fullDFS: x996
              cur: x996, inReduce: false, latency: 0.2
              Cycles: Map()
              computing delay lines for Vector(x987, x988, x989, x990, x991, x992, x993, x994, x996, x997, x998) Map(x1322 -> 7.0, x962 -> 10.8, x977 -> 0.0, x994 -> 1.0, x930 -> 1.0, x973 -> 0.0, x1323 -> 7.4, x917 -> 0.0, x949 -> 8.4, x956 -> 7.4, x998 -> 3.0, x988 -> 0.4, x920 -> 2.0, x942 -> 1.0, x957 -> 0.0, x952 -> 10.4, x974 -> 0.0, x980 -> 1.0, x989 -> 0.0, x1324 -> 10.799999999999999, x997 -> 2.0, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x990 -> 0.4, x996 -> 0.2, x943 -> 0.0, x959 -> 10.8, x954 -> 10.799999999999999, x993 -> 1.0, x951 -> 9.4, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x961 -> 10.8, x963 -> 11.8, x946 -> 7.2, x929 -> 1.0, x950 -> 0.0, x918 -> 1.0, x960 -> 0.0, x928 -> 0.0, x987 -> 0.0, x992 -> 1.0) Map() List()
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x987 = RegRead(x970)
              [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x988 = FixLeq(x987,b985)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x987 = RegRead(x970)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b985
              [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x989 = RegRead(x971)
              [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x990 = FixLst(b985,x989)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b985
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x989 = RegRead(x971)
              [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x991 = And(x988,x990)
              ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x988 = FixLeq(x987,b985)
              ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x990 = FixLst(b985,x989)
              [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x992 = FixSub(b985,x987)
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b985
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x987 = RegRead(x970)
              [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b986
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b969
              [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x994 = VecApply(x993,0)
              ..[1.0 (-> 1) = 1.0 - (1.0 - 1.0) (-> 1 - 0)] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x996 = FixSLA(b968,Const(4))
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b968
              ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
              [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x997 = FixAdd(x996,x992)
              ..[0.8 (-> 1) = 1.0 - (0.2 - 0.0) (-> 1 - 0)] x996 = FixSLA(b968,Const(4))
              ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x992 = FixSub(b985,x987)
              [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
              ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x994 = VecApply(x993,0)
              ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b969
              ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x997 = FixAdd(x996,x992)
              ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
              ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b986
              ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x991 = And(x988,x990)
                Creating value delay on x994 for reader x998 with delay 1: 
                Creating value delay on b969 for reader x998 with delay 2: 
                Creating value delay on Const(0) for reader x998 with delay 2: 
                Creating value delay on x996 for reader x997 with delay 1: 
                Creating value delay on b986 for reader x998 with delay 2: 
                Creating value delay on x993 for reader x994 with delay 1: 
                Creating value delay on x991 for reader x998 with delay 2: 
          Transforming Block Block(Const(())) [List() => false, List() => false]
            Transforming Block Block(Const(())) [List() => true, List() => false]
            Retiming block Block(Const(())):
              x1011 = RegRead(x879) (0.0)
              x1012 = FixSub(x1011,b1004) (0.0)
              x1013 = FixMin(Const(16),x1012) (1.0)
              x1014 = RegWrite(x1010,x1013,Set()) (1.0)
            Working on pipeLatencies of result Vector(Const(()), x1011, x1014), schedule Vector(x1011, x1012, x1013, x1014)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            Computing fullDFS: Const(())
            Computing fullDFS: x1011
            cur: x1011, inReduce: false, latency: 0.0
            Computing fullDFS: x1014
            Computing fullDFS: x1013
            Computing fullDFS: x1012
            Cycles: Map()
            computing delay lines for Vector(x1011, x1012, x1013, x1014) Map(x1322 -> 7.0, x962 -> 10.8, x977 -> 0.0, x994 -> 1.0, x930 -> 1.0, x973 -> 0.0, x1323 -> 7.4, x917 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x956 -> 7.4, x998 -> 3.0, x988 -> 0.4, x920 -> 2.0, x942 -> 1.0, x957 -> 0.0, x952 -> 10.4, x974 -> 0.0, x1012 -> 1.0, x980 -> 1.0, x989 -> 0.0, x1324 -> 10.799999999999999, x997 -> 2.0, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x943 -> 0.0, x959 -> 10.8, x954 -> 10.799999999999999, x993 -> 1.0, x951 -> 9.4, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x961 -> 10.8, x963 -> 11.8, x946 -> 7.2, x929 -> 1.0, x950 -> 0.0, x918 -> 1.0, x960 -> 0.0, x928 -> 0.0, x987 -> 0.0, x992 -> 1.0, x1014 -> 2.0) Map() List()
            [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1011 = RegRead(x879)
            [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1012 = FixSub(x1011,b1004)
            ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1011 = RegRead(x879)
            ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1004
            [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x1013 = FixMin(Const(16),x1012)
            ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] 16
            ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1012 = FixSub(x1011,b1004)
            [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x1014 = RegWrite(x1010,x1013,Set())
            ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1013 = FixMin(Const(16),x1012)
              Creating value delay on Const(16) for reader x1013 with delay 1: 
            Transforming Block Block(Const(())) [List() => false, List() => false]
              Transforming Block Block(Const(())) [List() => false, List() => false]
                Transforming Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1026 = FixAdd(b913,b1024) (0.0)
                  x1027 = RegRead(x879) (0.0)
                  x1325 = FixFMA(x1026,x1027,b1004) (1.0)
                  x1030 = FixDivSRA(x1325,Const(4)) (7.0)
                  x1031 = FixSLA(x1030,Const(4)) (7.2)
                  x1326 = FixSLA(x1030,Const(6)) (7.2)
                  x1033 = FixSub(x1325,x1031) (7.4)
                  x1034 = RegRead(x1010) (0.0)
                  x1035 = FixAdd(x1033,x1034) (8.4)
                  x1036 = FixAdd(x1035,Const(15)) (9.4)
                  x1037 = FixDivSRA(x1036,Const(4)) (10.4)
                  x1038 = FixSLA(x1037,Const(4)) (10.6)
                  x1327 = FixSLA(x1037,Const(6)) (10.6)
                  x1040 = FixToFix(x1326,TRUE,_64,_0) (7.4)
                  x1041 = DRAMAddress(x903) (0.0)
                  x1042 = FixAdd(x1040,x1041) (7.4)
                  x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true)))) (10.8)
                  x1044 = DRAMIsAlloc(x903) (0.0)
                  x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025))) (10.8)
                  x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035))) (10.8)
                  x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025))) (10.8)
                Working on pipeLatencies of result Vector(Const(()), x1041, x1047, x1027, x1044, x1034, x1045), schedule Vector(x1026, x1027, x1325, x1030, x1031, x1326, x1033, x1034, x1035, x1036, x1037, x1038, x1327, x1040, x1041, x1042, x1043, x1044, x1045, x1046, x1047)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                Computing fullDFS: Const(())
                Computing fullDFS: x1041
                cur: x1041, inReduce: false, latency: 0.0
                Computing fullDFS: x1047
                Computing fullDFS: x1046
                Computing fullDFS: x1033
                Computing fullDFS: x1325
                Computing fullDFS: x1026
                cur: x1026, inReduce: false, latency: 1.0
                Computing fullDFS: x1027
                cur: x1027, inReduce: false, latency: 0.0
                Computing fullDFS: x1031
                Computing fullDFS: x1030
                Computing fullDFS: x1035
                Computing fullDFS: x1034
                cur: x1034, inReduce: false, latency: 0.0
                Computing fullDFS: x1038
                Computing fullDFS: x1037
                Computing fullDFS: x1036
                Computing fullDFS: x1044
                cur: x1044, inReduce: false, latency: 0.0
                Computing fullDFS: x1045
                Computing fullDFS: x1043
                Computing fullDFS: x1327
                Computing fullDFS: x1042
                Computing fullDFS: x1040
                Computing fullDFS: x1326
                Cycles: Map()
                computing delay lines for Vector(x1026, x1027, x1325, x1030, x1031, x1326, x1033, x1034, x1035, x1036, x1037, x1038, x1327, x1040, x1041, x1042, x1043, x1044, x1045, x1046, x1047) Map(x1322 -> 7.0, x1036 -> 10.4, x1031 -> 7.4, x962 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1041 -> 0.0, x1327 -> 10.799999999999999, x930 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1323 -> 7.4, x917 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x1040 -> 7.4, x956 -> 7.4, x998 -> 3.0, x988 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x980 -> 1.0, x989 -> 0.0, x1324 -> 10.799999999999999, x997 -> 2.0, x1035 -> 9.4, x1026 -> 1.0, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1043 -> 10.8, x1325 -> 7.0, x943 -> 0.0, x959 -> 10.8, x1044 -> 0.0, x1034 -> 0.0, x954 -> 10.799999999999999, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x946 -> 7.2, x1030 -> 7.2, x929 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x987 -> 0.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1026 = FixAdd(b913,b1024)
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b913
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1024
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1027 = RegRead(x879)
                [Arrive = Dly - Lat: 1.0 = 7.0 - 6.0] x1325 = FixFMA(x1026,x1027,b1004)
                ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1026 = FixAdd(b913,b1024)
                ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] x1027 = RegRead(x879)
                ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] b1004
                [Arrive = Dly - Lat: 7.0 = 7.2 - 0.2] x1030 = FixDivSRA(x1325,Const(4))
                ..[0.0 (-> 0) = 7.0 - (7.0 - 0.0) (-> 7 - 7)] x1325 = FixFMA(x1026,x1027,b1004)
                ..[7.0 (-> 7) = 7.0 - (0.0 - 0.0) (-> 7 - 0)] 4
                [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1031 = FixSLA(x1030,Const(4))
                ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1030 = FixDivSRA(x1325,Const(4))
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 4
                [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1326 = FixSLA(x1030,Const(6))
                ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1030 = FixDivSRA(x1325,Const(4))
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 6
                [Arrive = Dly - Lat: 7.4 = 8.4 - 1.0] x1033 = FixSub(x1325,x1031)
                ..[0.40000000000000036 (-> 0) = 7.4 - (7.0 - 0.0) (-> 7 - 7)] x1325 = FixFMA(x1026,x1027,b1004)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1031 = FixSLA(x1030,Const(4))
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1034 = RegRead(x1010)
                [Arrive = Dly - Lat: 8.4 = 9.4 - 1.0] x1035 = FixAdd(x1033,x1034)
                ..[0.0 (-> 0) = 8.4 - (8.4 - 0.0) (-> 8 - 8)] x1033 = FixSub(x1325,x1031)
                ..[8.4 (-> 8) = 8.4 - (0.0 - 0.0) (-> 8 - 0)] x1034 = RegRead(x1010)
                [Arrive = Dly - Lat: 9.4 = 10.4 - 1.0] x1036 = FixAdd(x1035,Const(15))
                ..[0.0 (-> 0) = 9.4 - (9.4 - 0.0) (-> 9 - 9)] x1035 = FixAdd(x1033,x1034)
                ..[9.4 (-> 9) = 9.4 - (0.0 - 0.0) (-> 9 - 0)] 15
                [Arrive = Dly - Lat: 10.4 = 10.6 - 0.2] x1037 = FixDivSRA(x1036,Const(4))
                ..[0.0 (-> 0) = 10.4 - (10.4 - 0.0) (-> 10 - 10)] x1036 = FixAdd(x1035,Const(15))
                ..[10.4 (-> 10) = 10.4 - (0.0 - 0.0) (-> 10 - 0)] 4
                [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1038 = FixSLA(x1037,Const(4))
                ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1037 = FixDivSRA(x1036,Const(4))
                ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 4
                [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1327 = FixSLA(x1037,Const(6))
                ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1037 = FixDivSRA(x1036,Const(4))
                ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 6
                [Arrive = Dly - Lat: 7.4 = 7.4 - 0.0] x1040 = FixToFix(x1326,TRUE,_64,_0)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1326 = FixSLA(x1030,Const(6))
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1041 = DRAMAddress(x903)
                [Arrive = Dly - Lat: 7.4 = 9.4 - 2.0] x1042 = FixAdd(x1040,x1041)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1040 = FixToFix(x1326,TRUE,_64,_0)
                ..[7.4 (-> 7) = 7.4 - (0.0 - 0.0) (-> 7 - 0)] x1041 = DRAMAddress(x903)
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
                ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x1042 = FixAdd(x1040,x1041)
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1327 = FixSLA(x1037,Const(6))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1044 = DRAMIsAlloc(x903)
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] x1044 = DRAMIsAlloc(x903)
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b1025
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1038 = FixSLA(x1037,Const(4))
                ..[2.4000000000000004 (-> 2) = 10.8 - (8.4 - 0.0) (-> 10 - 8)] x1033 = FixSub(x1325,x1031)
                ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x1035 = FixAdd(x1033,x1034)
                [Arrive = Dly - Lat: 10.8 = 11.8 - 1.0] x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b1025
                  Creating value delay on x1041 for reader x1042 with delay 7: 
                  Creating value delay on Const(6) for reader x1326 with delay 7: 
                  Creating value delay on Const(6) for reader x1327 with delay 10: 
                  Creating value delay on x1042 for reader x1043 with delay 1: 
                  Creating value delay on Const(15) for reader x1036 with delay 9: 
                  Creating value delay on x1027 for reader x1325 with delay 1: 
                  Creating value delay on Const(4) for reader x1030 with delay 7: 
                  Creating value delay on Const(4) for reader x1031 with delay 7: 
                  Creating value delay on Const(4) for reader x1037 with delay 10: 
                  Creating value delay on Const(4) for reader x1038 with delay 10: 
                  Creating value delay on x1035 for reader x1046 with delay 1: 
                  Creating value delay on x1044 for reader x1045 with delay 10: 
                  Creating value delay on x1034 for reader x1035 with delay 8: 
                  Creating value delay on b1025 for reader x1045 with delay 10: 
                  Creating value delay on b1025 for reader x1047 with delay 10: 
                  Creating value delay on Const(true) for reader x1043 with delay 10: 
                  Creating value delay on Const(true) for reader x1047 with delay 10: 
                  Creating value delay on x1033 for reader x1046 with delay 2: 
                  Creating value delay on b1004 for reader x1325 with delay 1: 
                Transforming Block Block(Const(())) [List() => false, List() => false]
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) (0.0)
                    x1058 = VecApply(x1057,0) (0.0)
                    x1059 = FieldApply(x1058,start) (0.0)
                    x1060 = RegWrite(x1054,x1059,Set()) (0.0)
                    x1061 = FieldApply(x1058,end) (0.0)
                    x1062 = RegWrite(x1055,x1061,Set()) (0.0)
                    x1063 = FieldApply(x1058,size) (0.0)
                    x1064 = RegWrite(x1056,x1063,Set()) (0.0)
                  Working on pipeLatencies of result Vector(Const(()), x1057, x1064, x1060, x1062), schedule Vector(x1057, x1058, x1059, x1060, x1061, x1062, x1063, x1064)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1057
                  cur: x1057, inReduce: false, latency: 0.0
                  Computing fullDFS: x1064
                  Computing fullDFS: x1063
                  Computing fullDFS: x1058
                  Computing fullDFS: x1060
                  Computing fullDFS: x1059
                  Computing fullDFS: x1062
                  Computing fullDFS: x1061
                  Cycles: Map()
                  computing delay lines for Vector(x1057, x1058, x1059, x1060, x1061, x1062, x1063, x1064) Map(x1322 -> 7.0, x1036 -> 10.4, x1031 -> 7.4, x962 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1041 -> 0.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x1040 -> 7.4, x956 -> 7.4, x998 -> 3.0, x988 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1064 -> 1.0, x980 -> 1.0, x989 -> 0.0, x1324 -> 10.799999999999999, x997 -> 2.0, x1060 -> 1.0, x1035 -> 9.4, x1026 -> 1.0, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x1058 -> 0.0, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1043 -> 10.8, x1325 -> 7.0, x943 -> 0.0, x1061 -> 0.0, x959 -> 10.8, x1044 -> 0.0, x1034 -> 0.0, x954 -> 10.799999999999999, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1030 -> 7.2, x929 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x987 -> 0.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] true
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1058 = VecApply(x1057,0)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1059 = FieldApply(x1058,start)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1058 = VecApply(x1057,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1060 = RegWrite(x1054,x1059,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1059 = FieldApply(x1058,start)
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1061 = FieldApply(x1058,end)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1058 = VecApply(x1057,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1062 = RegWrite(x1055,x1061,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1061 = FieldApply(x1058,end)
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1063 = FieldApply(x1058,size)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1058 = VecApply(x1057,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1064 = RegWrite(x1056,x1063,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1063 = FieldApply(x1058,size)
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1071 = RegRead(x1054) (0.0)
                    x1072 = FixLeq(x1071,b1069) (0.0)
                    x1073 = RegRead(x1055) (0.0)
                    x1074 = FixLst(b1069,x1073) (0.0)
                    x1075 = And(x1072,x1074) (0.4)
                    x1076 = FixSub(b1069,x1071) (0.0)
                    x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053))) (0.0)
                    x1078 = VecApply(x1077,0) (1.0)
                    x1080 = FixSLA(b1052,Const(4)) (0.0)
                    x1081 = FixAdd(x1080,x1076) (1.0)
                    x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053))) (2.0)
                  Working on pipeLatencies of result Vector(Const(()), x1073, x1082, x1071, x1077), schedule Vector(x1071, x1072, x1073, x1074, x1075, x1076, x1077, x1078, x1080, x1081, x1082)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1073
                  cur: x1073, inReduce: false, latency: 0.0
                  Computing fullDFS: x1082
                  Computing fullDFS: x1075
                  Computing fullDFS: x1072
                  Computing fullDFS: x1071
                  cur: x1071, inReduce: false, latency: 0.0
                  Computing fullDFS: x1074
                  Computing fullDFS: x1078
                  Computing fullDFS: x1077
                  cur: x1077, inReduce: false, latency: 1.0
                  Computing fullDFS: x1081
                  Computing fullDFS: x1076
                  Computing fullDFS: x1080
                  cur: x1080, inReduce: false, latency: 0.2
                  Cycles: Map()
                  computing delay lines for Vector(x1071, x1072, x1073, x1074, x1075, x1076, x1077, x1078, x1080, x1081, x1082) Map(x1322 -> 7.0, x1036 -> 10.4, x1031 -> 7.4, x962 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1073 -> 0.0, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x1040 -> 7.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1074 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1064 -> 1.0, x980 -> 1.0, x989 -> 0.0, x1082 -> 3.0, x1075 -> 0.6000000000000001, x1324 -> 10.799999999999999, x997 -> 2.0, x1060 -> 1.0, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x975 -> 0.0, x958 -> 9.4, x1058 -> 0.0, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1043 -> 10.8, x1080 -> 0.2, x1325 -> 7.0, x943 -> 0.0, x1061 -> 0.0, x959 -> 10.8, x1044 -> 0.0, x1076 -> 1.0, x1034 -> 0.0, x1081 -> 2.0, x954 -> 10.799999999999999, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x987 -> 0.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1071 = RegRead(x1054)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1072 = FixLeq(x1071,b1069)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1071 = RegRead(x1054)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1069
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1073 = RegRead(x1055)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1074 = FixLst(b1069,x1073)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1069
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1073 = RegRead(x1055)
                  [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x1075 = And(x1072,x1074)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1072 = FixLeq(x1071,b1069)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1074 = FixLst(b1069,x1073)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1076 = FixSub(b1069,x1071)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1069
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1071 = RegRead(x1054)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1070
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1053
                  [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x1078 = VecApply(x1077,0)
                  ..[1.0 (-> 1) = 1.0 - (1.0 - 1.0) (-> 1 - 0)] x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x1080 = FixSLA(b1052,Const(4))
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1052
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
                  [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x1081 = FixAdd(x1080,x1076)
                  ..[0.8 (-> 1) = 1.0 - (0.2 - 0.0) (-> 1 - 0)] x1080 = FixSLA(b1052,Const(4))
                  ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1076 = FixSub(b1069,x1071)
                  [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                  ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x1078 = VecApply(x1077,0)
                  ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x1075 = And(x1072,x1074)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
                  ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x1081 = FixAdd(x1080,x1076)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1070
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1053
                    Creating value delay on x1078 for reader x1082 with delay 1: 
                    Creating value delay on x1075 for reader x1082 with delay 2: 
                    Creating value delay on Const(0) for reader x1082 with delay 2: 
                    Creating value delay on x1080 for reader x1081 with delay 1: 
                    Creating value delay on b1070 for reader x1082 with delay 2: 
                    Creating value delay on b1053 for reader x1082 with delay 2: 
                    Creating value delay on x1077 for reader x1078 with delay 1: 
              Transforming Block Block(Const(())) [List() => false, List() => false]
                Transforming Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1093 = FixAdd(b924,b1091) (0.0)
                  x1094 = RegRead(x879) (0.0)
                  x1328 = FixFMA(x1093,x1094,b1004) (1.0)
                  x1097 = FixDivSRA(x1328,Const(4)) (7.0)
                  x1098 = FixSLA(x1097,Const(4)) (7.2)
                  x1329 = FixSLA(x1097,Const(6)) (7.2)
                  x1100 = FixSub(x1328,x1098) (7.4)
                  x1101 = RegRead(x1010) (0.0)
                  x1102 = FixAdd(x1100,x1101) (8.4)
                  x1103 = FixAdd(x1102,Const(15)) (9.4)
                  x1104 = FixDivSRA(x1103,Const(4)) (10.4)
                  x1105 = FixSLA(x1104,Const(4)) (10.6)
                  x1330 = FixSLA(x1104,Const(6)) (10.6)
                  x1107 = FixToFix(x1329,TRUE,_64,_0) (7.4)
                  x1108 = DRAMAddress(x906) (0.0)
                  x1109 = FixAdd(x1107,x1108) (7.4)
                  x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true)))) (10.8)
                  x1111 = DRAMIsAlloc(x906) (0.0)
                  x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092))) (10.8)
                  x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102))) (10.8)
                  x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092))) (10.8)
                Working on pipeLatencies of result Vector(Const(()), x1111, x1114, x1112, x1094, x1108, x1101), schedule Vector(x1093, x1094, x1328, x1097, x1098, x1329, x1100, x1101, x1102, x1103, x1104, x1105, x1330, x1107, x1108, x1109, x1110, x1111, x1112, x1113, x1114)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                Computing fullDFS: Const(())
                Computing fullDFS: x1111
                cur: x1111, inReduce: false, latency: 0.0
                Computing fullDFS: x1114
                Computing fullDFS: x1113
                Computing fullDFS: x1100
                Computing fullDFS: x1328
                Computing fullDFS: x1093
                cur: x1093, inReduce: false, latency: 1.0
                Computing fullDFS: x1094
                cur: x1094, inReduce: false, latency: 0.0
                Computing fullDFS: x1098
                Computing fullDFS: x1097
                Computing fullDFS: x1102
                Computing fullDFS: x1101
                cur: x1101, inReduce: false, latency: 0.0
                Computing fullDFS: x1105
                Computing fullDFS: x1104
                Computing fullDFS: x1103
                Computing fullDFS: x1112
                Computing fullDFS: x1110
                Computing fullDFS: x1330
                Computing fullDFS: x1109
                Computing fullDFS: x1107
                Computing fullDFS: x1329
                Computing fullDFS: x1108
                cur: x1108, inReduce: false, latency: 0.0
                Cycles: Map()
                computing delay lines for Vector(x1093, x1094, x1328, x1097, x1098, x1329, x1100, x1101, x1102, x1103, x1104, x1105, x1330, x1107, x1108, x1109, x1110, x1111, x1112, x1113, x1114) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1031 -> 7.4, x962 -> 10.8, x1110 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1073 -> 0.0, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x1100 -> 8.4, x1040 -> 7.4, x1109 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1075 -> 0.6000000000000001, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1060 -> 1.0, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1103 -> 10.4, x975 -> 0.0, x958 -> 9.4, x1058 -> 0.0, x1107 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1043 -> 10.8, x1080 -> 0.2, x1325 -> 7.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x959 -> 10.8, x1044 -> 0.0, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1081 -> 2.0, x954 -> 10.799999999999999, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x1094 -> 0.0, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x987 -> 0.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1093 = FixAdd(b924,b1091)
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b924
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1091
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1094 = RegRead(x879)
                [Arrive = Dly - Lat: 1.0 = 7.0 - 6.0] x1328 = FixFMA(x1093,x1094,b1004)
                ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1093 = FixAdd(b924,b1091)
                ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] x1094 = RegRead(x879)
                ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] b1004
                [Arrive = Dly - Lat: 7.0 = 7.2 - 0.2] x1097 = FixDivSRA(x1328,Const(4))
                ..[0.0 (-> 0) = 7.0 - (7.0 - 0.0) (-> 7 - 7)] x1328 = FixFMA(x1093,x1094,b1004)
                ..[7.0 (-> 7) = 7.0 - (0.0 - 0.0) (-> 7 - 0)] 4
                [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1098 = FixSLA(x1097,Const(4))
                ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1097 = FixDivSRA(x1328,Const(4))
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 4
                [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1329 = FixSLA(x1097,Const(6))
                ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1097 = FixDivSRA(x1328,Const(4))
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 6
                [Arrive = Dly - Lat: 7.4 = 8.4 - 1.0] x1100 = FixSub(x1328,x1098)
                ..[0.40000000000000036 (-> 0) = 7.4 - (7.0 - 0.0) (-> 7 - 7)] x1328 = FixFMA(x1093,x1094,b1004)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1098 = FixSLA(x1097,Const(4))
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1101 = RegRead(x1010)
                [Arrive = Dly - Lat: 8.4 = 9.4 - 1.0] x1102 = FixAdd(x1100,x1101)
                ..[0.0 (-> 0) = 8.4 - (8.4 - 0.0) (-> 8 - 8)] x1100 = FixSub(x1328,x1098)
                ..[8.4 (-> 8) = 8.4 - (0.0 - 0.0) (-> 8 - 0)] x1101 = RegRead(x1010)
                [Arrive = Dly - Lat: 9.4 = 10.4 - 1.0] x1103 = FixAdd(x1102,Const(15))
                ..[0.0 (-> 0) = 9.4 - (9.4 - 0.0) (-> 9 - 9)] x1102 = FixAdd(x1100,x1101)
                ..[9.4 (-> 9) = 9.4 - (0.0 - 0.0) (-> 9 - 0)] 15
                [Arrive = Dly - Lat: 10.4 = 10.6 - 0.2] x1104 = FixDivSRA(x1103,Const(4))
                ..[0.0 (-> 0) = 10.4 - (10.4 - 0.0) (-> 10 - 10)] x1103 = FixAdd(x1102,Const(15))
                ..[10.4 (-> 10) = 10.4 - (0.0 - 0.0) (-> 10 - 0)] 4
                [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1105 = FixSLA(x1104,Const(4))
                ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1104 = FixDivSRA(x1103,Const(4))
                ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 4
                [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1330 = FixSLA(x1104,Const(6))
                ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1104 = FixDivSRA(x1103,Const(4))
                ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 6
                [Arrive = Dly - Lat: 7.4 = 7.4 - 0.0] x1107 = FixToFix(x1329,TRUE,_64,_0)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1329 = FixSLA(x1097,Const(6))
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1108 = DRAMAddress(x906)
                [Arrive = Dly - Lat: 7.4 = 9.4 - 2.0] x1109 = FixAdd(x1107,x1108)
                ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1107 = FixToFix(x1329,TRUE,_64,_0)
                ..[7.4 (-> 7) = 7.4 - (0.0 - 0.0) (-> 7 - 0)] x1108 = DRAMAddress(x906)
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
                ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x1109 = FixAdd(x1107,x1108)
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1330 = FixSLA(x1104,Const(6))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
                [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1111 = DRAMIsAlloc(x906)
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] x1111 = DRAMIsAlloc(x906)
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b1092
                [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1105 = FixSLA(x1104,Const(4))
                ..[2.4000000000000004 (-> 2) = 10.8 - (8.4 - 0.0) (-> 10 - 8)] x1100 = FixSub(x1328,x1098)
                ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x1102 = FixAdd(x1100,x1101)
                [Arrive = Dly - Lat: 10.8 = 11.8 - 1.0] x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
                ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] true
                ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] b1092
                  Creating value delay on Const(6) for reader x1329 with delay 7: 
                  Creating value delay on Const(6) for reader x1330 with delay 10: 
                  Creating value delay on x1100 for reader x1113 with delay 2: 
                  Creating value delay on x1109 for reader x1110 with delay 1: 
                  Creating value delay on Const(15) for reader x1103 with delay 9: 
                  Creating value delay on x1111 for reader x1112 with delay 10: 
                  Creating value delay on Const(4) for reader x1097 with delay 7: 
                  Creating value delay on Const(4) for reader x1098 with delay 7: 
                  Creating value delay on Const(4) for reader x1104 with delay 10: 
                  Creating value delay on Const(4) for reader x1105 with delay 10: 
                  Creating value delay on b1092 for reader x1112 with delay 10: 
                  Creating value delay on b1092 for reader x1114 with delay 10: 
                  Creating value delay on x1102 for reader x1113 with delay 1: 
                  Creating value delay on x1094 for reader x1328 with delay 1: 
                  Creating value delay on x1108 for reader x1109 with delay 7: 
                  Creating value delay on x1101 for reader x1102 with delay 8: 
                  Creating value delay on Const(true) for reader x1110 with delay 10: 
                  Creating value delay on Const(true) for reader x1114 with delay 10: 
                  Creating value delay on b1004 for reader x1328 with delay 1: 
                Transforming Block Block(Const(())) [List() => false, List() => false]
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) (0.0)
                    x1125 = VecApply(x1124,0) (0.0)
                    x1126 = FieldApply(x1125,start) (0.0)
                    x1127 = RegWrite(x1121,x1126,Set()) (0.0)
                    x1128 = FieldApply(x1125,end) (0.0)
                    x1129 = RegWrite(x1122,x1128,Set()) (0.0)
                    x1130 = FieldApply(x1125,size) (0.0)
                    x1131 = RegWrite(x1123,x1130,Set()) (0.0)
                  Working on pipeLatencies of result Vector(Const(()), x1127, x1131, x1124, x1129), schedule Vector(x1124, x1125, x1126, x1127, x1128, x1129, x1130, x1131)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1127
                  Computing fullDFS: x1126
                  Computing fullDFS: x1125
                  Computing fullDFS: x1124
                  cur: x1124, inReduce: false, latency: 0.0
                  Computing fullDFS: x1131
                  Computing fullDFS: x1130
                  Computing fullDFS: x1129
                  Computing fullDFS: x1128
                  Cycles: Map()
                  computing delay lines for Vector(x1124, x1125, x1126, x1127, x1128, x1129, x1130, x1131) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1031 -> 7.4, x962 -> 10.8, x1110 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1073 -> 0.0, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1013 -> 1.0, x1100 -> 8.4, x1040 -> 7.4, x1109 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1075 -> 0.6000000000000001, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1131 -> 1.0, x1060 -> 1.0, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1103 -> 10.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1058 -> 0.0, x1107 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1043 -> 10.8, x1080 -> 0.2, x1325 -> 7.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x959 -> 10.8, x1044 -> 0.0, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1081 -> 2.0, x954 -> 10.799999999999999, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x1130 -> 0.0, x1094 -> 0.0, x978 -> 1.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] true
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1125 = VecApply(x1124,0)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1126 = FieldApply(x1125,start)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1125 = VecApply(x1124,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1127 = RegWrite(x1121,x1126,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1126 = FieldApply(x1125,start)
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1128 = FieldApply(x1125,end)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1125 = VecApply(x1124,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1129 = RegWrite(x1122,x1128,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1128 = FieldApply(x1125,end)
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1130 = FieldApply(x1125,size)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1125 = VecApply(x1124,0)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1131 = RegWrite(x1123,x1130,Set())
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1130 = FieldApply(x1125,size)
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1138 = RegRead(x1121) (0.0)
                    x1139 = FixLeq(x1138,b1136) (0.0)
                    x1140 = RegRead(x1122) (0.0)
                    x1141 = FixLst(b1136,x1140) (0.0)
                    x1142 = And(x1139,x1141) (0.4)
                    x1143 = FixSub(b1136,x1138) (0.0)
                    x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120))) (0.0)
                    x1145 = VecApply(x1144,0) (1.0)
                    x1147 = FixSLA(b1119,Const(4)) (0.0)
                    x1148 = FixAdd(x1147,x1143) (1.0)
                    x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120))) (2.0)
                    x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120))) (2.0)
                  Working on pipeLatencies of result Vector(Const(()), x1138, x1150, x1144, x1149, x1140), schedule Vector(x1138, x1139, x1140, x1141, x1142, x1143, x1144, x1145, x1147, x1148, x1149, x1150)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1138
                  cur: x1138, inReduce: false, latency: 0.0
                  Computing fullDFS: x1150
                  Computing fullDFS: x1142
                  Computing fullDFS: x1139
                  Computing fullDFS: x1141
                  Computing fullDFS: x1140
                  cur: x1140, inReduce: false, latency: 0.0
                  Computing fullDFS: x1145
                  Computing fullDFS: x1144
                  cur: x1144, inReduce: false, latency: 1.0
                  Computing fullDFS: x1148
                  Computing fullDFS: x1143
                  Computing fullDFS: x1147
                  cur: x1147, inReduce: false, latency: 0.2
                  Computing fullDFS: x1149
                  Cycles: Map()
                  computing delay lines for Vector(x1138, x1139, x1140, x1141, x1142, x1143, x1144, x1145, x1147, x1148, x1149, x1150) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1031 -> 7.4, x962 -> 10.8, x1110 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1073 -> 0.0, x1142 -> 0.6000000000000001, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1147 -> 0.2, x1013 -> 1.0, x1100 -> 8.4, x1040 -> 7.4, x1109 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1143 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x1138 -> 0.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1075 -> 0.6000000000000001, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1150 -> 3.0, x1131 -> 1.0, x1060 -> 1.0, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1103 -> 10.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1139 -> 0.4, x1058 -> 0.0, x1107 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1144 -> 1.0, x1043 -> 10.8, x1080 -> 0.2, x1325 -> 7.0, x1149 -> 3.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x959 -> 10.8, x1044 -> 0.0, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1081 -> 2.0, x1145 -> 1.0, x954 -> 10.799999999999999, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x1130 -> 0.0, x1141 -> 0.4, x1094 -> 0.0, x978 -> 1.0, x1140 -> 0.0, x991 -> 0.6000000000000001, x931 -> 2.0, x976 -> 1.0, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x1148 -> 2.0, x918 -> 1.0, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1037 -> 10.6, x1014 -> 2.0) Map() List()
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1138 = RegRead(x1121)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1139 = FixLeq(x1138,b1136)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1138 = RegRead(x1121)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1136
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1140 = RegRead(x1122)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1141 = FixLst(b1136,x1140)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1136
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1140 = RegRead(x1122)
                  [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x1142 = And(x1139,x1141)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1139 = FixLeq(x1138,b1136)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1141 = FixLst(b1136,x1140)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1143 = FixSub(b1136,x1138)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1136
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1138 = RegRead(x1121)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1137
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1120
                  [Arrive = Dly - Lat: 1.0 = 1.0 - 0.0] x1145 = VecApply(x1144,0)
                  ..[1.0 (-> 1) = 1.0 - (1.0 - 1.0) (-> 1 - 0)] x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x1147 = FixSLA(b1119,Const(4))
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1119
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
                  [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x1148 = FixAdd(x1147,x1143)
                  ..[0.8 (-> 1) = 1.0 - (0.2 - 0.0) (-> 1 - 0)] x1147 = FixSLA(b1119,Const(4))
                  ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1143 = FixSub(b1136,x1138)
                  [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x1142 = And(x1139,x1141)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1137
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
                  ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x1145 = VecApply(x1144,0)
                  ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x1148 = FixAdd(x1147,x1143)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1120
                  [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x1142 = And(x1139,x1141)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1137
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
                  ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x1145 = VecApply(x1144,0)
                  ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x1148 = FixAdd(x1147,x1143)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1120
                    Creating value delay on x1142 for reader x1149 with delay 2: 
                    Creating value delay on x1142 for reader x1150 with delay 2: 
                    Creating value delay on b1137 for reader x1149 with delay 2: 
                    Creating value delay on b1137 for reader x1150 with delay 2: 
                    Creating value delay on x1147 for reader x1148 with delay 1: 
                    Creating value delay on Const(0) for reader x1149 with delay 2: 
                    Creating value delay on Const(0) for reader x1150 with delay 2: 
                    Creating value delay on x1144 for reader x1145 with delay 1: 
                    Creating value delay on x1145 for reader x1149 with delay 1: 
                    Creating value delay on x1145 for reader x1150 with delay 1: 
                    Creating value delay on b1120 for reader x1149 with delay 2: 
                    Creating value delay on b1120 for reader x1150 with delay 2: 
            Transforming Block Block(Const(())) [List() => false, List() => false]
              Transforming Block Block(Const(())) [List() => false, List() => false]
                Transforming Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1169 = FixSLA(b1156,Const(4)) (0.0)
                  x1170 = FixAdd(x1169,b1161) (0.2)
                  x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) (7.2)
                  x1172 = VecApply(x1171,0) (9.2)
                  x1174 = FixAdd(x1169,b1166) (0.2)
                  x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) (1.2)
                  x1176 = VecApply(x1175,0) (3.2)
                  x1178 = FixSLA(b1166,Const(4)) (0.0)
                  x1179 = FixAdd(x1178,b1161) (0.2)
                  x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) (1.2)
                  x1181 = VecApply(x1180,0) (3.2)
                  x1182 = FixMul(x1176,x1181) (3.2)
                  x1183 = FixAdd(x1172,x1182) (9.2)
                  x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) (10.2)
                  x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) (10.2)
                Working on pipeLatencies of result Vector(Const(()), x1185, x1175, x1171, x1180, x1184), schedule Vector(x1169, x1170, x1171, x1172, x1174, x1175, x1176, x1178, x1179, x1180, x1181, x1182, x1183, x1184, x1185)
                Memories with both reads and writes in this scope: Set(x1017)
                NonConflictSets(x1171, x1185): Set()
                NonConflictSets(x1171, x1185): Set()
                Found Cycle: x1171, x1185
                Exclusions: Set() Set() 
                Done finding cycles: Vector(AccumTriple(x1017,x1171,x1185)), Map(x1171 -> List(AccumTriple(x1017,x1171,x1185)), x1183 -> List(AccumTriple(x1017,x1171,x1185)), x1185 -> List(AccumTriple(x1017,x1171,x1185)), x1172 -> List(AccumTriple(x1017,x1171,x1185)))
                Computing fullDFS: Const(())
                Computing fullDFS: x1185
                Computing fullDFS: x1170
                Computing fullDFS: x1169
                cur: x1169, inReduce: false, latency: 0.2
                Computing fullDFS: x1171
                Computing fullDFS: x1183
                Computing fullDFS: x1172
                Computing fullDFS: x1182
                Computing fullDFS: x1176
                Computing fullDFS: x1175
                Computing fullDFS: x1174
                Computing fullDFS: x1181
                Computing fullDFS: x1180
                Computing fullDFS: x1179
                Computing fullDFS: x1178
                cur: x1178, inReduce: false, latency: 0.2
                Computing fullDFS: x1184
                Cycle #0: write: x1185, cycle: x1171, x1171, x1172, x1183, x1185
                Cycles: Map(x1171 -> List(x1171), x1183 -> Vector(x1171, x1172, x1183), x1185 -> Vector(x1171, x1171, x1172, x1183, x1185), x1172 -> Vector(x1171, x1172), x1184 -> Vector(x1171, x1172, x1183, x1184))
                pseudo cycles for x1017:
                Access: x1171 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
                First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
                Pushing x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.2 due to muxing.
                Access: x1185 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
                First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
                Pushing x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) by 0.0 to 11.2 due to muxing.
                computing delay lines for Vector(x1169, x1170, x1171, x1172, x1174, x1175, x1176, x1178, x1179, x1180, x1181, x1182, x1183, x1184, x1185) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1031 -> 7.4, x962 -> 10.8, x1179 -> 1.2, x1110 -> 10.8, x977 -> 0.0, x994 -> 1.0, x1073 -> 0.0, x1142 -> 0.6000000000000001, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1147 -> 0.2, x1013 -> 1.0, x1100 -> 8.4, x1040 -> 7.4, x1109 -> 9.4, x1183 -> 10.2, x1169 -> 0.2, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x920 -> 2.0, x942 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1174 -> 1.2, x1178 -> 0.2, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1143 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x1138 -> 0.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1182 -> 9.2, x1075 -> 0.6000000000000001, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1150 -> 3.0, x1131 -> 1.0, x1060 -> 1.0, x1170 -> 1.2, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1185 -> 11.2, x1103 -> 10.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1139 -> 0.4, x1058 -> 0.0, x1107 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1144 -> 1.0, x1043 -> 10.8, x1175 -> 3.2, x1080 -> 0.2, x1325 -> 7.0, x1149 -> 3.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x1171 -> 9.2, x959 -> 10.8, x1044 -> 0.0, x1176 -> 3.2, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1081 -> 2.0, x1145 -> 1.0, x1181 -> 3.2, x954 -> 10.799999999999999, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x1130 -> 0.0, x1141 -> 0.4, x1094 -> 0.0, x978 -> 1.0, x1140 -> 0.0, x991 -> 0.6000000000000001, x1180 -> 3.2, x931 -> 2.0, x976 -> 1.0, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x1148 -> 2.0, x918 -> 1.0, x1172 -> 9.2, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1184 -> 11.2, x1037 -> 10.6, x1014 -> 2.0) Map() List(x1171, x1185, x1171, x1171, x1172, x1183, x1185)
                [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x1169 = FixSLA(b1156,Const(4))
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1156
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
                [Arrive = Dly - Lat: 0.2 = 1.2 - 1.0] x1170 = FixAdd(x1169,b1161)
                ..[0.0 (-> 0) = 0.2 - (0.2 - 0.0) (-> 0 - 0)] x1169 = FixSLA(b1156,Const(4))
                ..[0.2 (-> 0) = 0.2 - (0.0 - 0.0) (-> 0 - 0)] b1161
                [Arrive = Dly - Lat: 7.2 = 9.2 - 2.0] x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b1005
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b925
                ..[6.0 (-> 6) = 7.2 - (1.2 - 0.0) (-> 7 - 1)] x1170 = FixAdd(x1169,b1161)
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b1167
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 0
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b1162
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b1157
                ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] b914
                [Arrive = Dly - Lat: 9.2 = 9.2 - 0.0] x1172 = VecApply(x1171,0)
                ..[0.0 (-> 0) = 9.2 - (9.2 - 0.0) (-> 9 - 9)] x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [Arrive = Dly - Lat: 0.2 = 1.2 - 1.0] x1174 = FixAdd(x1169,b1166)
                ..[0.0 (-> 0) = 0.2 - (0.2 - 0.0) (-> 0 - 0)] x1169 = FixSLA(b1156,Const(4))
                ..[0.2 (-> 0) = 0.2 - (0.0 - 0.0) (-> 0 - 0)] b1166
                [Arrive = Dly - Lat: 1.2 = 3.2 - 2.0] x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1005
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b925
                ..[0.0 (-> 0) = 1.2 - (1.2 - 0.0) (-> 1 - 1)] x1174 = FixAdd(x1169,b1166)
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1167
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] 0
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1162
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1157
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b914
                [Arrive = Dly - Lat: 3.2 = 3.2 - 0.0] x1176 = VecApply(x1175,0)
                ..[0.0 (-> 0) = 3.2 - (3.2 - 0.0) (-> 3 - 3)] x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x1178 = FixSLA(b1166,Const(4))
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1166
                ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
                [Arrive = Dly - Lat: 0.2 = 1.2 - 1.0] x1179 = FixAdd(x1178,b1161)
                ..[0.0 (-> 0) = 0.2 - (0.2 - 0.0) (-> 0 - 0)] x1178 = FixSLA(b1166,Const(4))
                ..[0.2 (-> 0) = 0.2 - (0.0 - 0.0) (-> 0 - 0)] b1161
                [Arrive = Dly - Lat: 1.2 = 3.2 - 2.0] x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                ..[0.0 (-> 0) = 1.2 - (1.2 - 0.0) (-> 1 - 1)] x1179 = FixAdd(x1178,b1161)
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1005
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b925
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1167
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] 0
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1162
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b1157
                ..[1.2 (-> 1) = 1.2 - (0.0 - 0.0) (-> 1 - 0)] b914
                [Arrive = Dly - Lat: 3.2 = 3.2 - 0.0] x1181 = VecApply(x1180,0)
                ..[0.0 (-> 0) = 3.2 - (3.2 - 0.0) (-> 3 - 3)] x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [Arrive = Dly - Lat: 3.2 = 9.2 - 6.0] x1182 = FixMul(x1176,x1181)
                ..[0.0 (-> 0) = 3.2 - (3.2 - 0.0) (-> 3 - 3)] x1176 = VecApply(x1175,0)
                ..[0.0 (-> 0) = 3.2 - (3.2 - 0.0) (-> 3 - 3)] x1181 = VecApply(x1180,0)
                [Arrive = Dly - Lat: 9.2 = 10.2 - 1.0] x1183 = FixAdd(x1172,x1182)
                ..[0.0 (-> 0) = 9.2 - (9.2 - 0.0) (-> 9 - 9)] x1172 = VecApply(x1171,0)
                ..[0.0 (-> 0) = 9.2 - (9.2 - 0.0) (-> 9 - 9)] x1182 = FixMul(x1176,x1181)
                [Arrive = Dly - Lat: 10.2 = 11.2 - 1.0] x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1005
                ..[0.0 (-> 0) = 10.2 - (10.2 - 0.0) (-> 10 - 10)] x1183 = FixAdd(x1172,x1182)
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b925
                ..[9.0 (-> 9) = 10.2 - (1.2 - 0.0) (-> 10 - 1)] x1170 = FixAdd(x1169,b1161)
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1167
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] 0
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1162
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1157
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b914
                [Arrive = Dly - Lat: 10.2 = 11.2 - 1.0] x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1005
                ..[0.0 (-> 0) = 10.2 - (10.2 - 0.0) (-> 10 - 10)] x1183 = FixAdd(x1172,x1182)
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b925
                ..[9.0 (-> 9) = 10.2 - (1.2 - 0.0) (-> 10 - 1)] x1170 = FixAdd(x1169,b1161)
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1167
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] 0
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1162
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b1157
                ..[10.2 (-> 10) = 10.2 - (0.0 - 0.0) (-> 10 - 0)] b914
                  Creating value delay on b1005 for reader x1175 with delay 1: 
                  Creating value delay on b1005 for reader x1180 with delay 1: 
                  Creating value delay on b1005 for reader x1171 with delay 7: 
                  Creating value delay on b1005 for reader x1184 with delay 10: 
                  Creating value delay on b1005 for reader x1185 with delay 10: 
                  Creating value delay on b925 for reader x1175 with delay 1: 
                  Creating value delay on b925 for reader x1180 with delay 1: 
                  Creating value delay on b925 for reader x1171 with delay 7: 
                  Creating value delay on b925 for reader x1184 with delay 10: 
                  Creating value delay on b925 for reader x1185 with delay 10: 
                  Creating value delay on x1170 for reader x1171 with delay 6: 
                  Creating value delay on x1170 for reader x1184 with delay 9: 
                  Creating value delay on x1170 for reader x1185 with delay 9: 
                  Creating value delay on b1167 for reader x1175 with delay 1: 
                  Creating value delay on b1167 for reader x1180 with delay 1: 
                  Creating value delay on b1167 for reader x1171 with delay 7: 
                  Creating value delay on b1167 for reader x1184 with delay 10: 
                  Creating value delay on b1167 for reader x1185 with delay 10: 
                  Creating value delay on Const(0) for reader x1175 with delay 1: 
                  Creating value delay on Const(0) for reader x1180 with delay 1: 
                  Creating value delay on Const(0) for reader x1171 with delay 7: 
                  Creating value delay on Const(0) for reader x1184 with delay 10: 
                  Creating value delay on Const(0) for reader x1185 with delay 10: 
                  Creating value delay on b1162 for reader x1175 with delay 1: 
                  Creating value delay on b1162 for reader x1180 with delay 1: 
                  Creating value delay on b1162 for reader x1171 with delay 7: 
                  Creating value delay on b1162 for reader x1184 with delay 10: 
                  Creating value delay on b1162 for reader x1185 with delay 10: 
                  Creating value delay on b1157 for reader x1175 with delay 1: 
                  Creating value delay on b1157 for reader x1180 with delay 1: 
                  Creating value delay on b1157 for reader x1171 with delay 7: 
                  Creating value delay on b1157 for reader x1184 with delay 10: 
                  Creating value delay on b1157 for reader x1185 with delay 10: 
                  Creating value delay on b914 for reader x1175 with delay 1: 
                  Creating value delay on b914 for reader x1180 with delay 1: 
                  Creating value delay on b914 for reader x1171 with delay 7: 
                  Creating value delay on b914 for reader x1184 with delay 10: 
                  Creating value delay on b914 for reader x1185 with delay 10: 
            Transforming Block Block(Const(())) [List() => false, List() => false]
              Transforming Block Block(Const(())) [List() => false, List() => false]
                Transforming Block Block(Const(())) [List() => false, List() => false]
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1199 = FixAdd(b924,b1194) (0.0)
                    x1200 = RegRead(x879) (0.0)
                    x1331 = FixFMA(x1199,x1200,b1004) (1.0)
                    x1203 = FixDivSRA(x1331,Const(4)) (7.0)
                    x1204 = FixSLA(x1203,Const(4)) (7.2)
                    x1332 = FixSLA(x1203,Const(6)) (7.2)
                    x1206 = FixSub(x1331,x1204) (7.4)
                    x1207 = RegRead(x1010) (0.0)
                    x1208 = FixAdd(x1206,x1207) (8.4)
                    x1209 = FixAdd(x1208,Const(15)) (9.4)
                    x1210 = FixDivSRA(x1209,Const(4)) (10.4)
                    x1211 = FixSLA(x1210,Const(4)) (10.6)
                    x1333 = FixSLA(x1210,Const(6)) (10.6)
                    x1213 = FixToFix(x1332,TRUE,_64,_0) (7.4)
                    x1214 = DRAMAddress(x906) (0.0)
                    x1215 = FixAdd(x1213,x1214) (7.4)
                    x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false)))) (10.8)
                    x1217 = DRAMIsAlloc(x906) (0.0)
                    x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217))) (10.8)
                    x1219 = RegWrite(x1196,x1206,Set()) (8.4)
                    x1220 = RegWrite(x1197,x1208,Set()) (9.4)
                    x1221 = RegWrite(x1198,x1211,Set()) (10.8)
                  Working on pipeLatencies of result Vector(Const(()), x1200, x1217, x1214, x1207, x1219, x1218, x1220, x1221), schedule Vector(x1199, x1200, x1331, x1203, x1204, x1332, x1206, x1207, x1208, x1209, x1210, x1211, x1333, x1213, x1214, x1215, x1216, x1217, x1218, x1219, x1220, x1221)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1200
                  cur: x1200, inReduce: false, latency: 0.0
                  Computing fullDFS: x1217
                  cur: x1217, inReduce: false, latency: 0.0
                  Computing fullDFS: x1214
                  cur: x1214, inReduce: false, latency: 0.0
                  Computing fullDFS: x1207
                  cur: x1207, inReduce: false, latency: 0.0
                  Computing fullDFS: x1219
                  Computing fullDFS: x1206
                  Computing fullDFS: x1331
                  Computing fullDFS: x1199
                  cur: x1199, inReduce: false, latency: 1.0
                  Computing fullDFS: x1204
                  Computing fullDFS: x1203
                  Computing fullDFS: x1218
                  Computing fullDFS: x1216
                  Computing fullDFS: x1333
                  Computing fullDFS: x1210
                  Computing fullDFS: x1209
                  Computing fullDFS: x1208
                  Computing fullDFS: x1215
                  Computing fullDFS: x1213
                  Computing fullDFS: x1332
                  Computing fullDFS: x1220
                  Computing fullDFS: x1221
                  Computing fullDFS: x1211
                  Cycles: Map()
                  computing delay lines for Vector(x1199, x1200, x1331, x1203, x1204, x1332, x1206, x1207, x1208, x1209, x1210, x1211, x1333, x1213, x1214, x1215, x1216, x1217, x1218, x1219, x1220, x1221) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1031 -> 7.4, x962 -> 10.8, x1179 -> 1.2, x1110 -> 10.8, x1200 -> 0.0, x977 -> 0.0, x1211 -> 10.799999999999999, x994 -> 1.0, x1073 -> 0.0, x1142 -> 0.6000000000000001, x1041 -> 0.0, x1078 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1147 -> 0.2, x1013 -> 1.0, x1100 -> 8.4, x1040 -> 7.4, x1109 -> 9.4, x1183 -> 10.2, x1169 -> 0.2, x1215 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x1206 -> 8.4, x920 -> 2.0, x942 -> 1.0, x1199 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1174 -> 1.2, x1217 -> 0.0, x1178 -> 0.2, x1210 -> 10.6, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1143 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x1138 -> 0.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1182 -> 9.2, x1075 -> 0.6000000000000001, x1214 -> 0.0, x1207 -> 0.0, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1150 -> 3.0, x1131 -> 1.0, x1060 -> 1.0, x1333 -> 10.799999999999999, x1170 -> 1.2, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1185 -> 11.2, x1103 -> 10.4, x1219 -> 9.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1139 -> 0.4, x1058 -> 0.0, x1107 -> 7.4, x1332 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1209 -> 10.4, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1144 -> 1.0, x1043 -> 10.8, x1175 -> 3.2, x1080 -> 0.2, x1325 -> 7.0, x1149 -> 3.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x1171 -> 9.2, x959 -> 10.8, x1213 -> 7.4, x1044 -> 0.0, x1176 -> 3.2, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1203 -> 7.2, x1208 -> 9.4, x1081 -> 2.0, x1145 -> 1.0, x1181 -> 3.2, x954 -> 10.799999999999999, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x951 -> 9.4, x1130 -> 0.0, x1218 -> 10.8, x1220 -> 10.4, x1141 -> 0.4, x1221 -> 11.8, x1094 -> 0.0, x978 -> 1.0, x1140 -> 0.0, x991 -> 0.6000000000000001, x1180 -> 3.2, x931 -> 2.0, x976 -> 1.0, x1216 -> 10.8, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x1148 -> 2.0, x918 -> 1.0, x1172 -> 9.2, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1331 -> 7.0, x1184 -> 11.2, x1037 -> 10.6, x1204 -> 7.4, x1014 -> 2.0) Map() List(x1171, x1185, x1171, x1171, x1172, x1183, x1185)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1199 = FixAdd(b924,b1194)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b924
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1194
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1200 = RegRead(x879)
                  [Arrive = Dly - Lat: 1.0 = 7.0 - 6.0] x1331 = FixFMA(x1199,x1200,b1004)
                  ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1199 = FixAdd(b924,b1194)
                  ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] x1200 = RegRead(x879)
                  ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] b1004
                  [Arrive = Dly - Lat: 7.0 = 7.2 - 0.2] x1203 = FixDivSRA(x1331,Const(4))
                  ..[0.0 (-> 0) = 7.0 - (7.0 - 0.0) (-> 7 - 7)] x1331 = FixFMA(x1199,x1200,b1004)
                  ..[7.0 (-> 7) = 7.0 - (0.0 - 0.0) (-> 7 - 0)] 4
                  [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1204 = FixSLA(x1203,Const(4))
                  ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1203 = FixDivSRA(x1331,Const(4))
                  ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 4
                  [Arrive = Dly - Lat: 7.2 = 7.4 - 0.2] x1332 = FixSLA(x1203,Const(6))
                  ..[0.0 (-> 0) = 7.2 - (7.2 - 0.0) (-> 7 - 7)] x1203 = FixDivSRA(x1331,Const(4))
                  ..[7.2 (-> 7) = 7.2 - (0.0 - 0.0) (-> 7 - 0)] 6
                  [Arrive = Dly - Lat: 7.4 = 8.4 - 1.0] x1206 = FixSub(x1331,x1204)
                  ..[0.40000000000000036 (-> 0) = 7.4 - (7.0 - 0.0) (-> 7 - 7)] x1331 = FixFMA(x1199,x1200,b1004)
                  ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1204 = FixSLA(x1203,Const(4))
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1207 = RegRead(x1010)
                  [Arrive = Dly - Lat: 8.4 = 9.4 - 1.0] x1208 = FixAdd(x1206,x1207)
                  ..[0.0 (-> 0) = 8.4 - (8.4 - 0.0) (-> 8 - 8)] x1206 = FixSub(x1331,x1204)
                  ..[8.4 (-> 8) = 8.4 - (0.0 - 0.0) (-> 8 - 0)] x1207 = RegRead(x1010)
                  [Arrive = Dly - Lat: 9.4 = 10.4 - 1.0] x1209 = FixAdd(x1208,Const(15))
                  ..[0.0 (-> 0) = 9.4 - (9.4 - 0.0) (-> 9 - 9)] x1208 = FixAdd(x1206,x1207)
                  ..[9.4 (-> 9) = 9.4 - (0.0 - 0.0) (-> 9 - 0)] 15
                  [Arrive = Dly - Lat: 10.4 = 10.6 - 0.2] x1210 = FixDivSRA(x1209,Const(4))
                  ..[0.0 (-> 0) = 10.4 - (10.4 - 0.0) (-> 10 - 10)] x1209 = FixAdd(x1208,Const(15))
                  ..[10.4 (-> 10) = 10.4 - (0.0 - 0.0) (-> 10 - 0)] 4
                  [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1211 = FixSLA(x1210,Const(4))
                  ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1210 = FixDivSRA(x1209,Const(4))
                  ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 4
                  [Arrive = Dly - Lat: 10.6 = 10.799999999999999 - 0.2] x1333 = FixSLA(x1210,Const(6))
                  ..[0.0 (-> 0) = 10.6 - (10.6 - 0.0) (-> 10 - 10)] x1210 = FixDivSRA(x1209,Const(4))
                  ..[10.6 (-> 10) = 10.6 - (0.0 - 0.0) (-> 10 - 0)] 6
                  [Arrive = Dly - Lat: 7.4 = 7.4 - 0.0] x1213 = FixToFix(x1332,TRUE,_64,_0)
                  ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1332 = FixSLA(x1203,Const(6))
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1214 = DRAMAddress(x906)
                  [Arrive = Dly - Lat: 7.4 = 9.4 - 2.0] x1215 = FixAdd(x1213,x1214)
                  ..[0.0 (-> 0) = 7.4 - (7.4 - 0.0) (-> 7 - 7)] x1213 = FixToFix(x1332,TRUE,_64,_0)
                  ..[7.4 (-> 7) = 7.4 - (0.0 - 0.0) (-> 7 - 0)] x1214 = DRAMAddress(x906)
                  [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                  ..[1.4000000000000004 (-> 1) = 10.8 - (9.4 - 0.0) (-> 10 - 9)] x1215 = FixAdd(x1213,x1214)
                  ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1333 = FixSLA(x1210,Const(6))
                  ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] false
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1217 = DRAMIsAlloc(x906)
                  [Arrive = Dly - Lat: 10.8 = 10.8 - 0.0] x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                  ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                  ..[10.8 (-> 10) = 10.8 - (0.0 - 0.0) (-> 10 - 0)] x1217 = DRAMIsAlloc(x906)
                  [Arrive = Dly - Lat: 8.4 = 9.4 - 1.0] x1219 = RegWrite(x1196,x1206,Set())
                  ..[0.0 (-> 0) = 8.4 - (8.4 - 0.0) (-> 8 - 8)] x1206 = FixSub(x1331,x1204)
                  [Arrive = Dly - Lat: 9.4 = 10.4 - 1.0] x1220 = RegWrite(x1197,x1208,Set())
                  ..[0.0 (-> 0) = 9.4 - (9.4 - 0.0) (-> 9 - 9)] x1208 = FixAdd(x1206,x1207)
                  [Arrive = Dly - Lat: 10.8 = 11.8 - 1.0] x1221 = RegWrite(x1198,x1211,Set())
                  ..[0.0 (-> 0) = 10.8 - (10.8 - 0.0) (-> 10 - 10)] x1211 = FixSLA(x1210,Const(4))
                    Creating value delay on x1200 for reader x1331 with delay 1: 
                    Creating value delay on Const(6) for reader x1332 with delay 7: 
                    Creating value delay on Const(6) for reader x1333 with delay 10: 
                    Creating value delay on x1215 for reader x1216 with delay 1: 
                    Creating value delay on x1217 for reader x1218 with delay 10: 
                    Creating value delay on Const(15) for reader x1209 with delay 9: 
                    Creating value delay on Const(4) for reader x1203 with delay 7: 
                    Creating value delay on Const(4) for reader x1204 with delay 7: 
                    Creating value delay on Const(4) for reader x1210 with delay 10: 
                    Creating value delay on Const(4) for reader x1211 with delay 10: 
                    Creating value delay on x1214 for reader x1215 with delay 7: 
                    Creating value delay on x1207 for reader x1208 with delay 8: 
                    Creating value delay on Const(false) for reader x1216 with delay 10: 
                    Creating value delay on b1004 for reader x1331 with delay 1: 
                  Transforming Block Block(Const(())) [List() => true, List() => false]
                  Retiming block Block(Const(())):
                    x1228 = RegRead(x1196) (0.0)
                    x1229 = FixLeq(x1228,b1226) (0.0)
                    x1230 = RegRead(x1197) (0.0)
                    x1231 = FixLst(b1226,x1230) (0.0)
                    x1232 = And(x1229,x1231) (0.4)
                    x1233 = FixSub(b1226,x1228) (0.0)
                    x1235 = FixSLA(b1194,Const(4)) (0.0)
                    x1236 = FixAdd(x1235,x1233) (1.0)
                    x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]]) (2.0)
                    x1238 = VecApply(x1237,0) (4.0)
                    x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232))) (4.0)
                    x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227))) (4.0)
                  Working on pipeLatencies of result Vector(x1237, Const(()), x1228, x1230, x1240), schedule Vector(x1228, x1229, x1230, x1231, x1232, x1233, x1235, x1236, x1237, x1238, x1239, x1240)
                  Memories with both reads and writes in this scope: Set()
                  Done finding cycles: Vector(), Map()
                  Computing fullDFS: x1237
                  Computing fullDFS: x1232
                  Computing fullDFS: x1229
                  Computing fullDFS: x1228
                  cur: x1228, inReduce: false, latency: 0.0
                  Computing fullDFS: x1231
                  Computing fullDFS: x1230
                  cur: x1230, inReduce: false, latency: 0.0
                  Computing fullDFS: x1236
                  Computing fullDFS: x1233
                  Computing fullDFS: x1235
                  cur: x1235, inReduce: false, latency: 0.2
                  Computing fullDFS: Const(())
                  Computing fullDFS: x1240
                  Computing fullDFS: x1239
                  Computing fullDFS: x1238
                  Cycles: Map()
                  computing delay lines for Vector(x1228, x1229, x1230, x1231, x1232, x1233, x1235, x1236, x1237, x1238, x1239, x1240) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1237 -> 4.0, x1031 -> 7.4, x962 -> 10.8, x1179 -> 1.2, x1110 -> 10.8, x1200 -> 0.0, x977 -> 0.0, x1211 -> 10.799999999999999, x994 -> 1.0, x1073 -> 0.0, x1142 -> 0.6000000000000001, x1041 -> 0.0, x1078 -> 1.0, x1233 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1228 -> 0.0, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1147 -> 0.2, x1013 -> 1.0, x1100 -> 8.4, x1232 -> 0.6000000000000001, x1040 -> 7.4, x1109 -> 9.4, x1183 -> 10.2, x1169 -> 0.2, x1215 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x1206 -> 8.4, x920 -> 2.0, x942 -> 1.0, x1199 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1174 -> 1.2, x1217 -> 0.0, x1238 -> 4.0, x1178 -> 0.2, x1210 -> 10.6, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1143 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x1138 -> 0.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1182 -> 9.2, x1075 -> 0.6000000000000001, x1214 -> 0.0, x1207 -> 0.0, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1150 -> 3.0, x1231 -> 0.4, x1131 -> 1.0, x1060 -> 1.0, x1333 -> 10.799999999999999, x1170 -> 1.2, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1185 -> 11.2, x1103 -> 10.4, x1219 -> 9.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1139 -> 0.4, x1058 -> 0.0, x1107 -> 7.4, x1239 -> 4.0, x1332 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1209 -> 10.4, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1144 -> 1.0, x1043 -> 10.8, x1175 -> 3.2, x1080 -> 0.2, x1325 -> 7.0, x1149 -> 3.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x1171 -> 9.2, x959 -> 10.8, x1213 -> 7.4, x1044 -> 0.0, x1176 -> 3.2, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1203 -> 7.2, x1208 -> 9.4, x1081 -> 2.0, x1145 -> 1.0, x1181 -> 3.2, x954 -> 10.799999999999999, x1230 -> 0.0, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x1235 -> 0.2, x951 -> 9.4, x1130 -> 0.0, x1218 -> 10.8, x1220 -> 10.4, x1141 -> 0.4, x1221 -> 11.8, x1094 -> 0.0, x978 -> 1.0, x1140 -> 0.0, x1240 -> 4.0, x991 -> 0.6000000000000001, x1180 -> 3.2, x931 -> 2.0, x976 -> 1.0, x1216 -> 10.8, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x1229 -> 0.4, x1148 -> 2.0, x918 -> 1.0, x1172 -> 9.2, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x1236 -> 2.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1331 -> 7.0, x1184 -> 11.2, x1037 -> 10.6, x1204 -> 7.4, x1014 -> 2.0) Map() List(x1171, x1185, x1171, x1171, x1172, x1183, x1185)
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1228 = RegRead(x1196)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1229 = FixLeq(x1228,b1226)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1228 = RegRead(x1196)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1226
                  [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x1230 = RegRead(x1197)
                  [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x1231 = FixLst(b1226,x1230)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1226
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1230 = RegRead(x1197)
                  [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x1232 = And(x1229,x1231)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1229 = FixLeq(x1228,b1226)
                  ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x1231 = FixLst(b1226,x1230)
                  [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1233 = FixSub(b1226,x1228)
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1226
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x1228 = RegRead(x1196)
                  [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x1235 = FixSLA(b1194,Const(4))
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b1194
                  ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 4
                  [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x1236 = FixAdd(x1235,x1233)
                  ..[0.8 (-> 1) = 1.0 - (0.2 - 0.0) (-> 1 - 0)] x1235 = FixSLA(b1194,Const(4))
                  ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x1233 = FixSub(b1226,x1228)
                  [Arrive = Dly - Lat: 2.0 = 4.0 - 2.0] x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x1232 = And(x1229,x1231)
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b1227
                  ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
                  ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x1236 = FixAdd(x1235,x1233)
                  [Arrive = Dly - Lat: 4.0 = 4.0 - 0.0] x1238 = VecApply(x1237,0)
                  ..[0.0 (-> 0) = 4.0 - (4.0 - 0.0) (-> 4 - 4)] x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  [Arrive = Dly - Lat: 4.0 = 4.0 - 0.0] x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                  ..[0.0 (-> 0) = 4.0 - (4.0 - 0.0) (-> 4 - 4)] x1238 = VecApply(x1237,0)
                  ..[3.6 (-> 4) = 4.0 - (0.6 - 0.2) (-> 4 - 0)] x1232 = And(x1229,x1231)
                  [Arrive = Dly - Lat: 4.0 = 4.0 - 0.0] x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                  ..[0.0 (-> 0) = 4.0 - (4.0 - 0.0) (-> 4 - 4)] x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                  ..[4.0 (-> 4) = 4.0 - (0.0 - 0.0) (-> 4 - 0)] b1227
                    Creating value delay on b1227 for reader x1237 with delay 2: 
                    Creating value delay on b1227 for reader x1240 with delay 4: 
                    Creating value delay on x1232 for reader x1237 with delay 2: 
                    Creating value delay on x1232 for reader x1239 with delay 4: 
                    Creating value delay on Const(0) for reader x1237 with delay 2: 
                    Creating value delay on x1235 for reader x1236 with delay 1: 
                Transforming Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set())) (0.0)
                Working on pipeLatencies of result Vector(Const(()), x1244), schedule Vector(x1244)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                Computing fullDFS: Const(())
                Computing fullDFS: x1244
                cur: x1244, inReduce: false, latency: 1.0
                Cycles: Map()
                computing delay lines for Vector(x1244) Map(x1322 -> 7.0, x1036 -> 10.4, x1105 -> 10.799999999999999, x1237 -> 4.0, x1031 -> 7.4, x962 -> 10.8, x1179 -> 1.2, x1110 -> 10.8, x1200 -> 0.0, x977 -> 0.0, x1211 -> 10.799999999999999, x994 -> 1.0, x1073 -> 0.0, x1142 -> 0.6000000000000001, x1041 -> 0.0, x1078 -> 1.0, x1233 -> 1.0, x1327 -> 10.799999999999999, x1063 -> 0.0, x930 -> 1.0, x1127 -> 1.0, x973 -> 0.0, x1046 -> 10.8, x1228 -> 0.0, x1330 -> 10.799999999999999, x1323 -> 7.4, x917 -> 0.0, x1059 -> 0.0, x949 -> 8.4, x1147 -> 0.2, x1013 -> 1.0, x1100 -> 8.4, x1232 -> 0.6000000000000001, x1040 -> 7.4, x1109 -> 9.4, x1183 -> 10.2, x1169 -> 0.2, x1215 -> 9.4, x956 -> 7.4, x1072 -> 0.4, x998 -> 3.0, x988 -> 0.4, x1104 -> 10.6, x1074 -> 0.4, x1206 -> 8.4, x920 -> 2.0, x942 -> 1.0, x1199 -> 1.0, x1047 -> 11.8, x1057 -> 0.0, x957 -> 0.0, x1042 -> 9.4, x952 -> 10.4, x1174 -> 1.2, x1217 -> 0.0, x1238 -> 4.0, x1178 -> 0.2, x1210 -> 10.6, x1027 -> 0.0, x1128 -> 0.0, x974 -> 0.0, x1012 -> 1.0, x1143 -> 1.0, x1328 -> 7.0, x1064 -> 1.0, x1111 -> 0.0, x980 -> 1.0, x1138 -> 0.0, x989 -> 0.0, x1329 -> 7.4, x1082 -> 3.0, x1182 -> 9.2, x1075 -> 0.6000000000000001, x1214 -> 0.0, x1207 -> 0.0, x1324 -> 10.799999999999999, x1114 -> 11.8, x997 -> 2.0, x1150 -> 3.0, x1231 -> 0.4, x1131 -> 1.0, x1060 -> 1.0, x1333 -> 10.799999999999999, x1170 -> 1.2, x1035 -> 9.4, x1071 -> 0.0, x1026 -> 1.0, x953 -> 10.6, x1185 -> 11.2, x1103 -> 10.4, x1219 -> 9.4, x975 -> 0.0, x1125 -> 0.0, x958 -> 9.4, x1124 -> 0.0, x1139 -> 0.4, x1058 -> 0.0, x1107 -> 7.4, x1239 -> 4.0, x1332 -> 7.4, x919 -> 1.0, x947 -> 7.4, x979 -> 0.0, x1209 -> 10.4, x1011 -> 0.0, x990 -> 0.4, x996 -> 0.2, x1144 -> 1.0, x1043 -> 10.8, x1175 -> 3.2, x1080 -> 0.2, x1325 -> 7.0, x1149 -> 3.0, x943 -> 0.0, x1061 -> 0.0, x1112 -> 10.8, x1171 -> 9.2, x959 -> 10.8, x1213 -> 7.4, x1044 -> 0.0, x1176 -> 3.2, x1113 -> 10.8, x1102 -> 9.4, x1076 -> 1.0, x1034 -> 0.0, x1203 -> 7.2, x1208 -> 9.4, x1081 -> 2.0, x1145 -> 1.0, x1181 -> 3.2, x954 -> 10.799999999999999, x1230 -> 0.0, x1098 -> 7.4, x993 -> 1.0, x1038 -> 10.799999999999999, x1235 -> 0.2, x951 -> 9.4, x1130 -> 0.0, x1218 -> 10.8, x1220 -> 10.4, x1141 -> 0.4, x1221 -> 11.8, x1094 -> 0.0, x978 -> 1.0, x1140 -> 0.0, x1240 -> 4.0, x991 -> 0.6000000000000001, x1180 -> 3.2, x931 -> 2.0, x976 -> 1.0, x1216 -> 10.8, x1126 -> 0.0, x1108 -> 0.0, x1326 -> 7.4, x961 -> 10.8, x963 -> 11.8, x1062 -> 1.0, x946 -> 7.2, x1101 -> 0.0, x1244 -> 1.0, x1030 -> 7.2, x929 -> 1.0, x1077 -> 1.0, x1045 -> 10.8, x950 -> 0.0, x1097 -> 7.2, x1229 -> 0.4, x1148 -> 2.0, x918 -> 1.0, x1172 -> 9.2, x1033 -> 8.4, x960 -> 0.0, x928 -> 0.0, x1093 -> 1.0, x1236 -> 2.0, x987 -> 0.0, x1129 -> 1.0, x992 -> 1.0, x1331 -> 7.0, x1184 -> 11.2, x1037 -> 10.6, x1204 -> 7.4, x1014 -> 2.0) Map() List(x1171, x1185, x1171, x1171, x1172, x1183, x1185)
                [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
    Transforming Block Block((b111) => x1269) [List() => false, List() => false]
      Transforming Block Block((b116) => x1265) [List() => false, List() => false]
      Transforming Block Block((x1266,b125) => x1267) [List() => false, List() => false]
      Transforming Block Block((b126,b127) => x1268) [List() => false, List() => false]
    Transforming Block Block((b135) => Const(())) [List() => false, List() => false]
      Transforming Block Block((b136) => Const(())) [List() => false, List() => false]
    Transforming Block Block((b148) => Const(())) [List() => false, List() => false]
      Transforming Block Block((b149) => Const(())) [List() => false, List() => false]
    Transforming Block Block((x1253,b159) => x1293) [List() => false, List() => false]
    Transforming Block Block((x1270,b159) => x1294) [List() => false, List() => false]
    Transforming Block Block((x1293,x1294) => x1295) [List() => false, List() => false]
    Transforming Block Block((x1296,b165) => x1297) [List() => false, List() => false]
    Transforming Block Block((b166,b167) => x1298) [List() => false, List() => false]
