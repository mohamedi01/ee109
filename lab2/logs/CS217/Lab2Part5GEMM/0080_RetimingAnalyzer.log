Visiting Block Block(Const(())) [List() => false, List() => false]
  Visiting Block Block((b16) => x891) [List() => false, List() => false]
  Visiting Block Block((b24) => x894) [List() => false, List() => false]
  Visiting Block Block((b31) => Const(0)) [List() => false, List() => false]
  Visiting Block Block(Const(())) [List() => false, List() => false]
    Visiting Block Block(Const(())) [List() => false, List() => false]
      Visiting Block Block(Const(())) [List() => true, List() => false]
      Retiming block Block(Const(())):
        x917 = RegRead(x880)
        x918 = FixSub(x917,b913)
        x919 = FixMin(Const(16),x918)
        x920 = RegWrite(x916,x919,Set())
      Result: 
        ()
        x917 = RegRead(x880)
        x920 = RegWrite(x916,x919,Set())
      Working on pipeLatencies of result Vector(Const(()), x917, x920), schedule Vector(x917, x918, x919, x920)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      ----------------------------------
      Computing pipeLatencies for scope:
        x917 = RegRead(x880)
        x918 = FixSub(x917,b913)
        x919 = FixMin(Const(16),x918)
        x920 = RegWrite(x916,x919,Set())
      Computing fullDFS: Const(())
      Computing fullDFS: x917
      cur: x917, inReduce: false, latency: 0.0
      [0.0 = max(0) + 0.0] x917 = RegRead(x880)
      Computing fullDFS: x920
      Computing fullDFS: x919
      Computing fullDFS: x918
      [1.0 = max(0.0) + 1.0] x918 = FixSub(x917,b913)
      [1.0 = max(1.0) + 0.0] x919 = FixMin(Const(16),x918)
      [2.0 = max(1.0) + 1.0] x920 = RegWrite(x916,x919,Set())
      Cycles: Map()
        Schedule after pipeLatencies calculation:
        [0.0] x917 = RegRead(x880)
        [1.0] x918 = FixSub(x917,b913)
        [1.0] x919 = FixMin(Const(16),x918)
        [2.0] x920 = RegWrite(x916,x919,Set())
      [0.0] ()
      [0.0] x917 = RegRead(x880)
      [1.0] x919 = FixMin(Const(16),x918)
      [1.0] x918 = FixSub(x917,b913)
      [2.0] x920 = RegWrite(x916,x919,Set())
      
      
      Sym Delays:
        [0.0 = 0.0 - 0.0]: () [cycle = false]
        [0.0 = 0.0 - 0.0]: x917 = RegRead(x880) [cycle = false]
        [0.0 = 1.0 - 1.0]: x918 = FixSub(x917,b913) [cycle = false]
        [1.0 = 2.0 - 1.0]: x920 = RegWrite(x916,x919,Set()) [cycle = false]
        [1.0 = 1.0 - 0.0]: x919 = FixMin(Const(16),x918) [cycle = false]
      Visiting Block Block(Const(())) [List() => false, List() => false]
        Visiting Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x928 = RegRead(x878)
          x929 = FixSub(x928,b924)
          x930 = FixMin(Const(16),x929)
          x931 = RegWrite(x927,x930,Set())
        Result: 
          ()
          x928 = RegRead(x878)
          x931 = RegWrite(x927,x930,Set())
        Working on pipeLatencies of result Vector(Const(()), x928, x931), schedule Vector(x928, x929, x930, x931)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        ----------------------------------
        Computing pipeLatencies for scope:
          x928 = RegRead(x878)
          x929 = FixSub(x928,b924)
          x930 = FixMin(Const(16),x929)
          x931 = RegWrite(x927,x930,Set())
        Computing fullDFS: Const(())
        Computing fullDFS: x928
        cur: x928, inReduce: false, latency: 0.0
        [0.0 = max(0) + 0.0] x928 = RegRead(x878)
        Computing fullDFS: x931
        Computing fullDFS: x930
        Computing fullDFS: x929
        [1.0 = max(0.0) + 1.0] x929 = FixSub(x928,b924)
        [1.0 = max(1.0) + 0.0] x930 = FixMin(Const(16),x929)
        [2.0 = max(1.0) + 1.0] x931 = RegWrite(x927,x930,Set())
        Cycles: Map()
          Schedule after pipeLatencies calculation:
          [0.0] x928 = RegRead(x878)
          [1.0] x929 = FixSub(x928,b924)
          [1.0] x930 = FixMin(Const(16),x929)
          [2.0] x931 = RegWrite(x927,x930,Set())
        [0.0] ()
        [0.0] x928 = RegRead(x878)
        [1.0] x930 = FixMin(Const(16),x929)
        [1.0] x929 = FixSub(x928,b924)
        [2.0] x931 = RegWrite(x927,x930,Set())
        
        
        Sym Delays:
          [0.0 = 0.0 - 0.0]: () [cycle = false]
          [0.0 = 1.0 - 1.0]: x929 = FixSub(x928,b924) [cycle = false]
          [0.0 = 0.0 - 0.0]: x928 = RegRead(x878) [cycle = false]
          [1.0 = 1.0 - 0.0]: x930 = FixMin(Const(16),x929) [cycle = false]
          [1.0 = 2.0 - 1.0]: x931 = RegWrite(x927,x930,Set()) [cycle = false]
        Visiting Block Block(Const(())) [List() => false, List() => false]
          Visiting Block Block(Const(())) [List() => true, List() => false]
          Retiming block Block(Const(())):
            x942 = FixAdd(b924,b940)
            x943 = RegRead(x880)
            x946 = FixDivSRA(x1322,Const(4))
            x947 = FixSLA(x946,Const(4))
            x949 = FixSub(x1322,x947)
            x950 = RegRead(x916)
            x951 = FixAdd(x949,x950)
            x952 = FixAdd(x951,Const(15))
            x953 = FixDivSRA(x952,Const(4))
            x954 = FixSLA(x953,Const(4))
            x956 = FixToFix(x1323,TRUE,_64,_0)
            x957 = DRAMAddress(x900)
            x958 = FixAdd(x956,x957)
            x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
            x960 = DRAMIsAlloc(x900)
            x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
            x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
            x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
            x1322 = FixFMA(x942,x943,b913)
            x1323 = FixSLA(x946,Const(6))
            x1324 = FixSLA(x953,Const(6))
          Result: 
            ()
            x943 = RegRead(x880)
            x950 = RegRead(x916)
            x957 = DRAMAddress(x900)
            x960 = DRAMIsAlloc(x900)
            x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
            x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
          Working on pipeLatencies of result Vector(Const(()), x943, x950, x957, x960, x961, x963), schedule Vector(x942, x943, x946, x947, x949, x950, x951, x952, x953, x954, x956, x957, x958, x959, x960, x961, x962, x963, x1322, x1323, x1324)
          Memories with both reads and writes in this scope: Set()
          Done finding cycles: Vector(), Map()
          ----------------------------------
          Computing pipeLatencies for scope:
            x942 = FixAdd(b924,b940)
            x943 = RegRead(x880)
            x946 = FixDivSRA(x1322,Const(4))
            x947 = FixSLA(x946,Const(4))
            x949 = FixSub(x1322,x947)
            x950 = RegRead(x916)
            x951 = FixAdd(x949,x950)
            x952 = FixAdd(x951,Const(15))
            x953 = FixDivSRA(x952,Const(4))
            x954 = FixSLA(x953,Const(4))
            x956 = FixToFix(x1323,TRUE,_64,_0)
            x957 = DRAMAddress(x900)
            x958 = FixAdd(x956,x957)
            x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
            x960 = DRAMIsAlloc(x900)
            x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
            x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
            x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
            x1322 = FixFMA(x942,x943,b913)
            x1323 = FixSLA(x946,Const(6))
            x1324 = FixSLA(x953,Const(6))
          Computing fullDFS: Const(())
          Computing fullDFS: x943
          cur: x943, inReduce: false, latency: 0.0
          [0.0 = max(0) + 0.0] x943 = RegRead(x880)
          Computing fullDFS: x950
          cur: x950, inReduce: false, latency: 0.0
          [0.0 = max(0) + 0.0] x950 = RegRead(x916)
          Computing fullDFS: x957
          cur: x957, inReduce: false, latency: 0.0
          [0.0 = max(0) + 0.0] x957 = DRAMAddress(x900)
          Computing fullDFS: x960
          cur: x960, inReduce: false, latency: 0.0
          [0.0 = max(0) + 0.0] x960 = DRAMIsAlloc(x900)
          Computing fullDFS: x961
          Computing fullDFS: x959
          Computing fullDFS: x958
          Computing fullDFS: x956
          Computing fullDFS: x1323
          Computing fullDFS: x946
          Computing fullDFS: x1322
          Computing fullDFS: x942
          cur: x942, inReduce: false, latency: 1.0
          [1.0 = max(0) + 1.0] x942 = FixAdd(b924,b940)
          [7.0 = max(1.0, 0.0) + 6.0] x1322 = FixFMA(x942,x943,b913)
          [7.2 = max(7.0) + 0.2] x946 = FixDivSRA(x1322,Const(4))
          [7.4 = max(7.2) + 0.2] x1323 = FixSLA(x946,Const(6))
          [7.4 = max(7.4) + 0.0] x956 = FixToFix(x1323,TRUE,_64,_0)
          [9.4 = max(7.4, 0.0) + 2.0] x958 = FixAdd(x956,x957)
          Computing fullDFS: x1324
          Computing fullDFS: x953
          Computing fullDFS: x952
          Computing fullDFS: x951
          Computing fullDFS: x949
          Computing fullDFS: x947
          [7.4 = max(7.2) + 0.2] x947 = FixSLA(x946,Const(4))
          [8.4 = max(7.4, 7.0) + 1.0] x949 = FixSub(x1322,x947)
          [9.4 = max(8.4, 0.0) + 1.0] x951 = FixAdd(x949,x950)
          [10.4 = max(9.4) + 1.0] x952 = FixAdd(x951,Const(15))
          [10.6 = max(10.4) + 0.2] x953 = FixDivSRA(x952,Const(4))
          [10.799999999999999 = max(10.6) + 0.2] x1324 = FixSLA(x953,Const(6))
          [10.8 = max(9.4, 10.8) + 0.0] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
          [10.8 = max(10.8, 0.0) + 0.0] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
          Computing fullDFS: x963
          Computing fullDFS: x962
          Computing fullDFS: x954
          [10.799999999999999 = max(10.6) + 0.2] x954 = FixSLA(x953,Const(4))
          [10.8 = max(8.4, 9.4, 10.8) + 0.0] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
          [11.8 = max(10.8) + 1.0] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
          Cycles: Map()
            Schedule after pipeLatencies calculation:
            [0.0] x943 = RegRead(x880)
            [0.0] x950 = RegRead(x916)
            [0.0] x957 = DRAMAddress(x900)
            [0.0] x960 = DRAMIsAlloc(x900)
            [1.0] x942 = FixAdd(b924,b940)
            [7.0] x1322 = FixFMA(x942,x943,b913)
            [7.2] x946 = FixDivSRA(x1322,Const(4))
            [7.4] x947 = FixSLA(x946,Const(4))
            [7.4] x956 = FixToFix(x1323,TRUE,_64,_0)
            [7.4] x1323 = FixSLA(x946,Const(6))
            [8.4] x949 = FixSub(x1322,x947)
            [9.4] x951 = FixAdd(x949,x950)
            [9.4] x958 = FixAdd(x956,x957)
            [10.4] x952 = FixAdd(x951,Const(15))
            [10.6] x953 = FixDivSRA(x952,Const(4))
            [10.8] x954 = FixSLA(x953,Const(4))
            [10.8] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
            [10.8] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
            [10.8] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
            [10.8] x1324 = FixSLA(x953,Const(6))
            [11.8] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
          [0.0] ()
          [0.0] x957 = DRAMAddress(x900)
          [0.0] x943 = RegRead(x880)
          [0.0] x950 = RegRead(x916)
          [0.0] x960 = DRAMIsAlloc(x900)
          [1.0] x942 = FixAdd(b924,b940)
          [7.0] x1322 = FixFMA(x942,x943,b913)
          [7.2] x946 = FixDivSRA(x1322,Const(4))
          [7.4] x1323 = FixSLA(x946,Const(6))
          [7.4] x956 = FixToFix(x1323,TRUE,_64,_0)
          [7.4] x947 = FixSLA(x946,Const(4))
          [8.4] x949 = FixSub(x1322,x947)
          [9.4] x958 = FixAdd(x956,x957)
          [9.4] x951 = FixAdd(x949,x950)
          [10.4] x952 = FixAdd(x951,Const(15))
          [10.6] x953 = FixDivSRA(x952,Const(4))
          [10.8] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
          [10.8] x1324 = FixSLA(x953,Const(6))
          [10.8] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true))))
          [10.8] x954 = FixSLA(x953,Const(4))
          [10.8] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
          [11.8] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
          
          
          Sym Delays:
            [0.0 = 0.0 - 0.0]: () [cycle = false]
            [0.0 = 1.0 - 1.0]: x942 = FixAdd(b924,b940) [cycle = false]
            [0.0 = 0.0 - 0.0]: x957 = DRAMAddress(x900) [cycle = false]
            [0.0 = 0.0 - 0.0]: x943 = RegRead(x880) [cycle = false]
            [0.0 = 0.0 - 0.0]: x950 = RegRead(x916) [cycle = false]
            [0.0 = 0.0 - 0.0]: x960 = DRAMIsAlloc(x900) [cycle = false]
            [1.0 = 7.0 - 6.0]: x1322 = FixFMA(x942,x943,b913) [cycle = false]
            [7.0 = 7.2 - 0.2]: x946 = FixDivSRA(x1322,Const(4)) [cycle = false]
            [7.2 = 7.4 - 0.2]: x1323 = FixSLA(x946,Const(6)) [cycle = false]
            [7.2 = 7.4 - 0.2]: x947 = FixSLA(x946,Const(4)) [cycle = false]
            [7.4 = 8.4 - 1.0]: x949 = FixSub(x1322,x947) [cycle = false]
            [7.4 = 7.4 - 0.0]: x956 = FixToFix(x1323,TRUE,_64,_0) [cycle = false]
            [7.4 = 9.4 - 2.0]: x958 = FixAdd(x956,x957) [cycle = false]
            [8.4 = 9.4 - 1.0]: x951 = FixAdd(x949,x950) [cycle = false]
            [9.4 = 10.4 - 1.0]: x952 = FixAdd(x951,Const(15)) [cycle = false]
            [10.4 = 10.6 - 0.2]: x953 = FixDivSRA(x952,Const(4)) [cycle = false]
            [10.6 = 10.8 - 0.2]: x1324 = FixSLA(x953,Const(6)) [cycle = false]
            [10.6 = 10.8 - 0.2]: x954 = FixSLA(x953,Const(4)) [cycle = false]
            [10.8 = 10.8 - 0.0]: x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951))) [cycle = false]
            [10.8 = 10.8 - 0.0]: x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1324), (isLoad,Const(true)))) [cycle = false]
            [10.8 = 10.8 - 0.0]: x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941))) [cycle = false]
            [10.8 = 11.8 - 1.0]: x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941))) [cycle = false]
          Visiting Block Block(Const(())) [List() => false, List() => false]
            Visiting Block Block(Const(())) [List() => true, List() => false]
            Retiming block Block(Const(())):
              x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              x974 = VecApply(x973,0)
              x975 = FieldApply(x974,start)
              x976 = RegWrite(x970,x975,Set())
              x977 = FieldApply(x974,end)
              x978 = RegWrite(x971,x977,Set())
              x979 = FieldApply(x974,size)
              x980 = RegWrite(x972,x979,Set())
            Result: 
              ()
              x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              x976 = RegWrite(x970,x975,Set())
              x978 = RegWrite(x971,x977,Set())
              x980 = RegWrite(x972,x979,Set())
            Working on pipeLatencies of result Vector(Const(()), x973, x976, x978, x980), schedule Vector(x973, x974, x975, x976, x977, x978, x979, x980)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            ----------------------------------
            Computing pipeLatencies for scope:
              x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              x974 = VecApply(x973,0)
              x975 = FieldApply(x974,start)
              x976 = RegWrite(x970,x975,Set())
              x977 = FieldApply(x974,end)
              x978 = RegWrite(x971,x977,Set())
              x979 = FieldApply(x974,size)
              x980 = RegWrite(x972,x979,Set())
            Computing fullDFS: Const(())
            Computing fullDFS: x973
            cur: x973, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
            Computing fullDFS: x976
            Computing fullDFS: x975
            Computing fullDFS: x974
            [0.0 = max(0.0) + 0.0] x974 = VecApply(x973,0)
            [0.0 = max(0.0) + 0.0] x975 = FieldApply(x974,start)
            [1.0 = max(0.0) + 1.0] x976 = RegWrite(x970,x975,Set())
            Computing fullDFS: x978
            Computing fullDFS: x977
            [0.0 = max(0.0) + 0.0] x977 = FieldApply(x974,end)
            [1.0 = max(0.0) + 1.0] x978 = RegWrite(x971,x977,Set())
            Computing fullDFS: x980
            Computing fullDFS: x979
            [0.0 = max(0.0) + 0.0] x979 = FieldApply(x974,size)
            [1.0 = max(0.0) + 1.0] x980 = RegWrite(x972,x979,Set())
            Cycles: Map()
              Schedule after pipeLatencies calculation:
              [0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
              [0.0] x974 = VecApply(x973,0)
              [0.0] x975 = FieldApply(x974,start)
              [0.0] x977 = FieldApply(x974,end)
              [0.0] x979 = FieldApply(x974,size)
              [1.0] x976 = RegWrite(x970,x975,Set())
              [1.0] x978 = RegWrite(x971,x977,Set())
              [1.0] x980 = RegWrite(x972,x979,Set())
            [0.0] ()
            [0.0] x977 = FieldApply(x974,end)
            [0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
            [0.0] x974 = VecApply(x973,0)
            [0.0] x975 = FieldApply(x974,start)
            [0.0] x979 = FieldApply(x974,size)
            [1.0] x980 = RegWrite(x972,x979,Set())
            [1.0] x978 = RegWrite(x971,x977,Set())
            [1.0] x976 = RegWrite(x970,x975,Set())
            
            
            Sym Delays:
              [0.0 = 0.0 - 0.0]: () [cycle = false]
              [0.0 = 0.0 - 0.0]: x977 = FieldApply(x974,end) [cycle = false]
              [0.0 = 0.0 - 0.0]: x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) [cycle = false]
              [0.0 = 0.0 - 0.0]: x974 = VecApply(x973,0) [cycle = false]
              [0.0 = 1.0 - 1.0]: x980 = RegWrite(x972,x979,Set()) [cycle = false]
              [0.0 = 0.0 - 0.0]: x975 = FieldApply(x974,start) [cycle = false]
              [0.0 = 0.0 - 0.0]: x979 = FieldApply(x974,size) [cycle = false]
              [0.0 = 1.0 - 1.0]: x978 = RegWrite(x971,x977,Set()) [cycle = false]
              [0.0 = 1.0 - 1.0]: x976 = RegWrite(x970,x975,Set()) [cycle = false]
            Visiting Block Block(Const(())) [List() => true, List() => false]
            Retiming block Block(Const(())):
              x987 = RegRead(x970)
              x988 = FixLeq(x987,b985)
              x989 = RegRead(x971)
              x990 = FixLst(b985,x989)
              x991 = And(x988,x990)
              x992 = FixSub(b985,x987)
              x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              x994 = VecApply(x993,0)
              x996 = FixSLA(b968,Const(4))
              x997 = FixAdd(x996,x992)
              x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            Result: 
              ()
              x987 = RegRead(x970)
              x989 = RegRead(x971)
              x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            Working on pipeLatencies of result Vector(Const(()), x987, x989, x993, x998), schedule Vector(x987, x988, x989, x990, x991, x992, x993, x994, x996, x997, x998)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            ----------------------------------
            Computing pipeLatencies for scope:
              x987 = RegRead(x970)
              x988 = FixLeq(x987,b985)
              x989 = RegRead(x971)
              x990 = FixLst(b985,x989)
              x991 = And(x988,x990)
              x992 = FixSub(b985,x987)
              x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              x994 = VecApply(x993,0)
              x996 = FixSLA(b968,Const(4))
              x997 = FixAdd(x996,x992)
              x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            Computing fullDFS: Const(())
            Computing fullDFS: x987
            cur: x987, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x987 = RegRead(x970)
            Computing fullDFS: x989
            cur: x989, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x989 = RegRead(x971)
            Computing fullDFS: x993
            cur: x993, inReduce: false, latency: 1.0
            [1.0 = max(0) + 1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
            Computing fullDFS: x998
            Computing fullDFS: x991
            Computing fullDFS: x988
            [0.4 = max(0.0) + 0.4] x988 = FixLeq(x987,b985)
            Computing fullDFS: x990
            [0.4 = max(0.0) + 0.4] x990 = FixLst(b985,x989)
            [0.6000000000000001 = max(0.4, 0.4) + 0.2] x991 = And(x988,x990)
            Computing fullDFS: x994
            [1.0 = max(1.0) + 0.0] x994 = VecApply(x993,0)
            Computing fullDFS: x997
            Computing fullDFS: x992
            [1.0 = max(0.0) + 1.0] x992 = FixSub(b985,x987)
            Computing fullDFS: x996
            cur: x996, inReduce: false, latency: 0.2
            [0.2 = max(0) + 0.2] x996 = FixSLA(b968,Const(4))
            [2.0 = max(1.0, 0.2) + 1.0] x997 = FixAdd(x996,x992)
            [3.0 = max(0.6, 1.0, 2.0) + 1.0] x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            Cycles: Map()
              Schedule after pipeLatencies calculation:
              [0.0] x987 = RegRead(x970)
              [0.0] x989 = RegRead(x971)
              [0.2] x996 = FixSLA(b968,Const(4))
              [0.4] x988 = FixLeq(x987,b985)
              [0.4] x990 = FixLst(b985,x989)
              [0.6] x991 = And(x988,x990)
              [1.0] x992 = FixSub(b985,x987)
              [1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
              [1.0] x994 = VecApply(x993,0)
              [2.0] x997 = FixAdd(x996,x992)
              [3.0] x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            [0.0] ()
            [0.0] x989 = RegRead(x971)
            [0.0] x987 = RegRead(x970)
            [0.2] x996 = FixSLA(b968,Const(4))
            [0.4] x988 = FixLeq(x987,b985)
            [0.4] x990 = FixLst(b985,x989)
            [0.6] x991 = And(x988,x990)
            [1.0] x994 = VecApply(x993,0)
            [1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
            [1.0] x992 = FixSub(b985,x987)
            [2.0] x997 = FixAdd(x996,x992)
            [3.0] x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969)))
            
            
            Sym Delays:
              [0.0 = 0.0 - 0.0]: () [cycle = false]
              [0.0 = 0.4 - 0.4]: x988 = FixLeq(x987,b985) [cycle = false]
              [0.0 = 0.0 - 0.0]: x989 = RegRead(x971) [cycle = false]
              [0.0 = 0.4 - 0.4]: x990 = FixLst(b985,x989) [cycle = false]
              [0.0 = 0.2 - 0.2]: x996 = FixSLA(b968,Const(4)) [cycle = false]
              [0.0 = 1.0 - 1.0]: x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969))) [cycle = false]
              [0.0 = 0.0 - 0.0]: x987 = RegRead(x970) [cycle = false]
              [0.0 = 1.0 - 1.0]: x992 = FixSub(b985,x987) [cycle = false]
              [0.4 = 0.6 - 0.2]: x991 = And(x988,x990) [cycle = false]
              [1.0 = 1.0 - 0.0]: x994 = VecApply(x993,0) [cycle = false]
              [1.0 = 2.0 - 1.0]: x997 = FixAdd(x996,x992) [cycle = false]
              [2.0 = 3.0 - 1.0]: x998 = SRAMBankedWrite(x934,Vector(x994),Vector(List(Const(0))),Vector(x997),Vector(Set(x991, b986, b969))) [cycle = false]
        Visiting Block Block(Const(())) [List() => false, List() => false]
          Visiting Block Block(Const(())) [List() => true, List() => false]
          Retiming block Block(Const(())):
            x1011 = RegRead(x879)
            x1012 = FixSub(x1011,b1004)
            x1013 = FixMin(Const(16),x1012)
            x1014 = RegWrite(x1010,x1013,Set())
          Result: 
            ()
            x1011 = RegRead(x879)
            x1014 = RegWrite(x1010,x1013,Set())
          Working on pipeLatencies of result Vector(Const(()), x1011, x1014), schedule Vector(x1011, x1012, x1013, x1014)
          Memories with both reads and writes in this scope: Set()
          Done finding cycles: Vector(), Map()
          ----------------------------------
          Computing pipeLatencies for scope:
            x1011 = RegRead(x879)
            x1012 = FixSub(x1011,b1004)
            x1013 = FixMin(Const(16),x1012)
            x1014 = RegWrite(x1010,x1013,Set())
          Computing fullDFS: Const(())
          Computing fullDFS: x1011
          cur: x1011, inReduce: false, latency: 0.0
          [0.0 = max(0) + 0.0] x1011 = RegRead(x879)
          Computing fullDFS: x1014
          Computing fullDFS: x1013
          Computing fullDFS: x1012
          [1.0 = max(0.0) + 1.0] x1012 = FixSub(x1011,b1004)
          [1.0 = max(1.0) + 0.0] x1013 = FixMin(Const(16),x1012)
          [2.0 = max(1.0) + 1.0] x1014 = RegWrite(x1010,x1013,Set())
          Cycles: Map()
            Schedule after pipeLatencies calculation:
            [0.0] x1011 = RegRead(x879)
            [1.0] x1012 = FixSub(x1011,b1004)
            [1.0] x1013 = FixMin(Const(16),x1012)
            [2.0] x1014 = RegWrite(x1010,x1013,Set())
          [0.0] ()
          [0.0] x1011 = RegRead(x879)
          [1.0] x1013 = FixMin(Const(16),x1012)
          [1.0] x1012 = FixSub(x1011,b1004)
          [2.0] x1014 = RegWrite(x1010,x1013,Set())
          
          
          Sym Delays:
            [0.0 = 0.0 - 0.0]: () [cycle = false]
            [0.0 = 1.0 - 1.0]: x1012 = FixSub(x1011,b1004) [cycle = false]
            [0.0 = 0.0 - 0.0]: x1011 = RegRead(x879) [cycle = false]
            [1.0 = 1.0 - 0.0]: x1013 = FixMin(Const(16),x1012) [cycle = false]
            [1.0 = 2.0 - 1.0]: x1014 = RegWrite(x1010,x1013,Set()) [cycle = false]
          Visiting Block Block(Const(())) [List() => false, List() => false]
            Visiting Block Block(Const(())) [List() => false, List() => false]
              Visiting Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x1026 = FixAdd(b913,b1024)
                x1027 = RegRead(x879)
                x1030 = FixDivSRA(x1325,Const(4))
                x1031 = FixSLA(x1030,Const(4))
                x1033 = FixSub(x1325,x1031)
                x1034 = RegRead(x1010)
                x1035 = FixAdd(x1033,x1034)
                x1036 = FixAdd(x1035,Const(15))
                x1037 = FixDivSRA(x1036,Const(4))
                x1038 = FixSLA(x1037,Const(4))
                x1040 = FixToFix(x1326,TRUE,_64,_0)
                x1041 = DRAMAddress(x903)
                x1042 = FixAdd(x1040,x1041)
                x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
                x1044 = DRAMIsAlloc(x903)
                x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
                x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
                x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
                x1325 = FixFMA(x1026,x1027,b1004)
                x1326 = FixSLA(x1030,Const(6))
                x1327 = FixSLA(x1037,Const(6))
              Result: 
                ()
                x1027 = RegRead(x879)
                x1034 = RegRead(x1010)
                x1041 = DRAMAddress(x903)
                x1044 = DRAMIsAlloc(x903)
                x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
                x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
              Working on pipeLatencies of result Vector(Const(()), x1027, x1034, x1041, x1044, x1045, x1047), schedule Vector(x1026, x1027, x1030, x1031, x1033, x1034, x1035, x1036, x1037, x1038, x1040, x1041, x1042, x1043, x1044, x1045, x1046, x1047, x1325, x1326, x1327)
              Memories with both reads and writes in this scope: Set()
              Done finding cycles: Vector(), Map()
              ----------------------------------
              Computing pipeLatencies for scope:
                x1026 = FixAdd(b913,b1024)
                x1027 = RegRead(x879)
                x1030 = FixDivSRA(x1325,Const(4))
                x1031 = FixSLA(x1030,Const(4))
                x1033 = FixSub(x1325,x1031)
                x1034 = RegRead(x1010)
                x1035 = FixAdd(x1033,x1034)
                x1036 = FixAdd(x1035,Const(15))
                x1037 = FixDivSRA(x1036,Const(4))
                x1038 = FixSLA(x1037,Const(4))
                x1040 = FixToFix(x1326,TRUE,_64,_0)
                x1041 = DRAMAddress(x903)
                x1042 = FixAdd(x1040,x1041)
                x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
                x1044 = DRAMIsAlloc(x903)
                x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
                x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
                x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
                x1325 = FixFMA(x1026,x1027,b1004)
                x1326 = FixSLA(x1030,Const(6))
                x1327 = FixSLA(x1037,Const(6))
              Computing fullDFS: Const(())
              Computing fullDFS: x1027
              cur: x1027, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1027 = RegRead(x879)
              Computing fullDFS: x1034
              cur: x1034, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1034 = RegRead(x1010)
              Computing fullDFS: x1041
              cur: x1041, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1041 = DRAMAddress(x903)
              Computing fullDFS: x1044
              cur: x1044, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1044 = DRAMIsAlloc(x903)
              Computing fullDFS: x1045
              Computing fullDFS: x1043
              Computing fullDFS: x1042
              Computing fullDFS: x1040
              Computing fullDFS: x1326
              Computing fullDFS: x1030
              Computing fullDFS: x1325
              Computing fullDFS: x1026
              cur: x1026, inReduce: false, latency: 1.0
              [1.0 = max(0) + 1.0] x1026 = FixAdd(b913,b1024)
              [7.0 = max(1.0, 0.0) + 6.0] x1325 = FixFMA(x1026,x1027,b1004)
              [7.2 = max(7.0) + 0.2] x1030 = FixDivSRA(x1325,Const(4))
              [7.4 = max(7.2) + 0.2] x1326 = FixSLA(x1030,Const(6))
              [7.4 = max(7.4) + 0.0] x1040 = FixToFix(x1326,TRUE,_64,_0)
              [9.4 = max(7.4, 0.0) + 2.0] x1042 = FixAdd(x1040,x1041)
              Computing fullDFS: x1327
              Computing fullDFS: x1037
              Computing fullDFS: x1036
              Computing fullDFS: x1035
              Computing fullDFS: x1033
              Computing fullDFS: x1031
              [7.4 = max(7.2) + 0.2] x1031 = FixSLA(x1030,Const(4))
              [8.4 = max(7.4, 7.0) + 1.0] x1033 = FixSub(x1325,x1031)
              [9.4 = max(8.4, 0.0) + 1.0] x1035 = FixAdd(x1033,x1034)
              [10.4 = max(9.4) + 1.0] x1036 = FixAdd(x1035,Const(15))
              [10.6 = max(10.4) + 0.2] x1037 = FixDivSRA(x1036,Const(4))
              [10.799999999999999 = max(10.6) + 0.2] x1327 = FixSLA(x1037,Const(6))
              [10.8 = max(9.4, 10.8) + 0.0] x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
              [10.8 = max(10.8, 0.0) + 0.0] x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
              Computing fullDFS: x1047
              Computing fullDFS: x1046
              Computing fullDFS: x1038
              [10.799999999999999 = max(10.6) + 0.2] x1038 = FixSLA(x1037,Const(4))
              [10.8 = max(8.4, 9.4, 10.8) + 0.0] x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
              [11.8 = max(10.8) + 1.0] x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
              Cycles: Map()
                Schedule after pipeLatencies calculation:
                [0.0] x1027 = RegRead(x879)
                [0.0] x1034 = RegRead(x1010)
                [0.0] x1041 = DRAMAddress(x903)
                [0.0] x1044 = DRAMIsAlloc(x903)
                [1.0] x1026 = FixAdd(b913,b1024)
                [7.0] x1325 = FixFMA(x1026,x1027,b1004)
                [7.2] x1030 = FixDivSRA(x1325,Const(4))
                [7.4] x1031 = FixSLA(x1030,Const(4))
                [7.4] x1040 = FixToFix(x1326,TRUE,_64,_0)
                [7.4] x1326 = FixSLA(x1030,Const(6))
                [8.4] x1033 = FixSub(x1325,x1031)
                [9.4] x1035 = FixAdd(x1033,x1034)
                [9.4] x1042 = FixAdd(x1040,x1041)
                [10.4] x1036 = FixAdd(x1035,Const(15))
                [10.6] x1037 = FixDivSRA(x1036,Const(4))
                [10.8] x1038 = FixSLA(x1037,Const(4))
                [10.8] x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
                [10.8] x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
                [10.8] x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
                [10.8] x1327 = FixSLA(x1037,Const(6))
                [11.8] x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
              [0.0] ()
              [0.0] x1041 = DRAMAddress(x903)
              [0.0] x1027 = RegRead(x879)
              [0.0] x1044 = DRAMIsAlloc(x903)
              [0.0] x1034 = RegRead(x1010)
              [1.0] x1026 = FixAdd(b913,b1024)
              [7.0] x1325 = FixFMA(x1026,x1027,b1004)
              [7.2] x1030 = FixDivSRA(x1325,Const(4))
              [7.4] x1031 = FixSLA(x1030,Const(4))
              [7.4] x1040 = FixToFix(x1326,TRUE,_64,_0)
              [7.4] x1326 = FixSLA(x1030,Const(6))
              [8.4] x1033 = FixSub(x1325,x1031)
              [9.4] x1042 = FixAdd(x1040,x1041)
              [9.4] x1035 = FixAdd(x1033,x1034)
              [10.4] x1036 = FixAdd(x1035,Const(15))
              [10.6] x1037 = FixDivSRA(x1036,Const(4))
              [10.8] x1327 = FixSLA(x1037,Const(6))
              [10.8] x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035)))
              [10.8] x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true))))
              [10.8] x1038 = FixSLA(x1037,Const(4))
              [10.8] x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025)))
              [11.8] x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025)))
              
              
              Sym Delays:
                [0.0 = 0.0 - 0.0]: () [cycle = false]
                [0.0 = 0.0 - 0.0]: x1041 = DRAMAddress(x903) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1027 = RegRead(x879) [cycle = false]
                [0.0 = 1.0 - 1.0]: x1026 = FixAdd(b913,b1024) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1044 = DRAMIsAlloc(x903) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1034 = RegRead(x1010) [cycle = false]
                [1.0 = 7.0 - 6.0]: x1325 = FixFMA(x1026,x1027,b1004) [cycle = false]
                [7.0 = 7.2 - 0.2]: x1030 = FixDivSRA(x1325,Const(4)) [cycle = false]
                [7.2 = 7.4 - 0.2]: x1031 = FixSLA(x1030,Const(4)) [cycle = false]
                [7.2 = 7.4 - 0.2]: x1326 = FixSLA(x1030,Const(6)) [cycle = false]
                [7.4 = 7.4 - 0.0]: x1040 = FixToFix(x1326,TRUE,_64,_0) [cycle = false]
                [7.4 = 9.4 - 2.0]: x1042 = FixAdd(x1040,x1041) [cycle = false]
                [7.4 = 8.4 - 1.0]: x1033 = FixSub(x1325,x1031) [cycle = false]
                [8.4 = 9.4 - 1.0]: x1035 = FixAdd(x1033,x1034) [cycle = false]
                [9.4 = 10.4 - 1.0]: x1036 = FixAdd(x1035,Const(15)) [cycle = false]
                [10.4 = 10.6 - 0.2]: x1037 = FixDivSRA(x1036,Const(4)) [cycle = false]
                [10.6 = 10.8 - 0.2]: x1327 = FixSLA(x1037,Const(6)) [cycle = false]
                [10.6 = 10.8 - 0.2]: x1038 = FixSLA(x1037,Const(4)) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1046 = SimpleStruct(ArrayBuffer((size,x1038), (start,x1033), (end,x1035))) [cycle = false]
                [10.8 = 11.8 - 1.0]: x1047 = FIFOBankedEnq(x1020,ArrayBuffer(x1046),ArrayBuffer(Set(Const(true), b1025))) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1043 = SimpleStruct(ArrayBuffer((offset,x1042), (size,x1327), (isLoad,Const(true)))) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1045 = StreamOutBankedWrite(x1019,ArrayBuffer(x1043),ArrayBuffer(Set(x1044, b1025))) [cycle = false]
              Visiting Block Block(Const(())) [List() => false, List() => false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1058 = VecApply(x1057,0)
                  x1059 = FieldApply(x1058,start)
                  x1060 = RegWrite(x1054,x1059,Set())
                  x1061 = FieldApply(x1058,end)
                  x1062 = RegWrite(x1055,x1061,Set())
                  x1063 = FieldApply(x1058,size)
                  x1064 = RegWrite(x1056,x1063,Set())
                Result: 
                  ()
                  x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1060 = RegWrite(x1054,x1059,Set())
                  x1062 = RegWrite(x1055,x1061,Set())
                  x1064 = RegWrite(x1056,x1063,Set())
                Working on pipeLatencies of result Vector(Const(()), x1057, x1060, x1062, x1064), schedule Vector(x1057, x1058, x1059, x1060, x1061, x1062, x1063, x1064)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1058 = VecApply(x1057,0)
                  x1059 = FieldApply(x1058,start)
                  x1060 = RegWrite(x1054,x1059,Set())
                  x1061 = FieldApply(x1058,end)
                  x1062 = RegWrite(x1055,x1061,Set())
                  x1063 = FieldApply(x1058,size)
                  x1064 = RegWrite(x1056,x1063,Set())
                Computing fullDFS: Const(())
                Computing fullDFS: x1057
                cur: x1057, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                Computing fullDFS: x1060
                Computing fullDFS: x1059
                Computing fullDFS: x1058
                [0.0 = max(0.0) + 0.0] x1058 = VecApply(x1057,0)
                [0.0 = max(0.0) + 0.0] x1059 = FieldApply(x1058,start)
                [1.0 = max(0.0) + 1.0] x1060 = RegWrite(x1054,x1059,Set())
                Computing fullDFS: x1062
                Computing fullDFS: x1061
                [0.0 = max(0.0) + 0.0] x1061 = FieldApply(x1058,end)
                [1.0 = max(0.0) + 1.0] x1062 = RegWrite(x1055,x1061,Set())
                Computing fullDFS: x1064
                Computing fullDFS: x1063
                [0.0 = max(0.0) + 0.0] x1063 = FieldApply(x1058,size)
                [1.0 = max(0.0) + 1.0] x1064 = RegWrite(x1056,x1063,Set())
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  [0.0] x1058 = VecApply(x1057,0)
                  [0.0] x1059 = FieldApply(x1058,start)
                  [0.0] x1061 = FieldApply(x1058,end)
                  [0.0] x1063 = FieldApply(x1058,size)
                  [1.0] x1060 = RegWrite(x1054,x1059,Set())
                  [1.0] x1062 = RegWrite(x1055,x1061,Set())
                  [1.0] x1064 = RegWrite(x1056,x1063,Set())
                [0.0] ()
                [0.0] x1063 = FieldApply(x1058,size)
                [0.0] x1059 = FieldApply(x1058,start)
                [0.0] x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                [0.0] x1058 = VecApply(x1057,0)
                [0.0] x1061 = FieldApply(x1058,end)
                [1.0] x1064 = RegWrite(x1056,x1063,Set())
                [1.0] x1060 = RegWrite(x1054,x1059,Set())
                [1.0] x1062 = RegWrite(x1055,x1061,Set())
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1063 = FieldApply(x1058,size) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1059 = FieldApply(x1058,start) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1057 = FIFOBankedDeq(x1020,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1064 = RegWrite(x1056,x1063,Set()) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1060 = RegWrite(x1054,x1059,Set()) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1058 = VecApply(x1057,0) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1061 = FieldApply(x1058,end) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1062 = RegWrite(x1055,x1061,Set()) [cycle = false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1071 = RegRead(x1054)
                  x1072 = FixLeq(x1071,b1069)
                  x1073 = RegRead(x1055)
                  x1074 = FixLst(b1069,x1073)
                  x1075 = And(x1072,x1074)
                  x1076 = FixSub(b1069,x1071)
                  x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  x1078 = VecApply(x1077,0)
                  x1080 = FixSLA(b1052,Const(4))
                  x1081 = FixAdd(x1080,x1076)
                  x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                Result: 
                  ()
                  x1071 = RegRead(x1054)
                  x1073 = RegRead(x1055)
                  x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                Working on pipeLatencies of result Vector(Const(()), x1071, x1073, x1077, x1082), schedule Vector(x1071, x1072, x1073, x1074, x1075, x1076, x1077, x1078, x1080, x1081, x1082)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1071 = RegRead(x1054)
                  x1072 = FixLeq(x1071,b1069)
                  x1073 = RegRead(x1055)
                  x1074 = FixLst(b1069,x1073)
                  x1075 = And(x1072,x1074)
                  x1076 = FixSub(b1069,x1071)
                  x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  x1078 = VecApply(x1077,0)
                  x1080 = FixSLA(b1052,Const(4))
                  x1081 = FixAdd(x1080,x1076)
                  x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                Computing fullDFS: Const(())
                Computing fullDFS: x1071
                cur: x1071, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1071 = RegRead(x1054)
                Computing fullDFS: x1073
                cur: x1073, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1073 = RegRead(x1055)
                Computing fullDFS: x1077
                cur: x1077, inReduce: false, latency: 1.0
                [1.0 = max(0) + 1.0] x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                Computing fullDFS: x1082
                Computing fullDFS: x1075
                Computing fullDFS: x1072
                [0.4 = max(0.0) + 0.4] x1072 = FixLeq(x1071,b1069)
                Computing fullDFS: x1074
                [0.4 = max(0.0) + 0.4] x1074 = FixLst(b1069,x1073)
                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1075 = And(x1072,x1074)
                Computing fullDFS: x1078
                [1.0 = max(1.0) + 0.0] x1078 = VecApply(x1077,0)
                Computing fullDFS: x1081
                Computing fullDFS: x1076
                [1.0 = max(0.0) + 1.0] x1076 = FixSub(b1069,x1071)
                Computing fullDFS: x1080
                cur: x1080, inReduce: false, latency: 0.2
                [0.2 = max(0) + 0.2] x1080 = FixSLA(b1052,Const(4))
                [2.0 = max(1.0, 0.2) + 1.0] x1081 = FixAdd(x1080,x1076)
                [3.0 = max(0.6, 1.0, 2.0) + 1.0] x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1071 = RegRead(x1054)
                  [0.0] x1073 = RegRead(x1055)
                  [0.2] x1080 = FixSLA(b1052,Const(4))
                  [0.4] x1072 = FixLeq(x1071,b1069)
                  [0.4] x1074 = FixLst(b1069,x1073)
                  [0.6] x1075 = And(x1072,x1074)
                  [1.0] x1076 = FixSub(b1069,x1071)
                  [1.0] x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                  [1.0] x1078 = VecApply(x1077,0)
                  [2.0] x1081 = FixAdd(x1080,x1076)
                  [3.0] x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                [0.0] ()
                [0.0] x1073 = RegRead(x1055)
                [0.0] x1071 = RegRead(x1054)
                [0.2] x1080 = FixSLA(b1052,Const(4))
                [0.4] x1072 = FixLeq(x1071,b1069)
                [0.4] x1074 = FixLst(b1069,x1073)
                [0.6] x1075 = And(x1072,x1074)
                [1.0] x1078 = VecApply(x1077,0)
                [1.0] x1076 = FixSub(b1069,x1071)
                [1.0] x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053)))
                [2.0] x1081 = FixAdd(x1080,x1076)
                [3.0] x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053)))
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1073 = RegRead(x1055) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1072 = FixLeq(x1071,b1069) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1074 = FixLst(b1069,x1073) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1071 = RegRead(x1054) [cycle = false]
                  [0.0 = 0.2 - 0.2]: x1080 = FixSLA(b1052,Const(4)) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1076 = FixSub(b1069,x1071) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1077 = StreamInBankedRead(x1021,ArrayBuffer(Set(b1070, b1053))) [cycle = false]
                  [0.4 = 0.6 - 0.2]: x1075 = And(x1072,x1074) [cycle = false]
                  [1.0 = 1.0 - 0.0]: x1078 = VecApply(x1077,0) [cycle = false]
                  [1.0 = 2.0 - 1.0]: x1081 = FixAdd(x1080,x1076) [cycle = false]
                  [2.0 = 3.0 - 1.0]: x1082 = SRAMBankedWrite(x1016,Vector(x1078),Vector(List(Const(0))),Vector(x1081),Vector(Set(x1075, b1070, b1053))) [cycle = false]
            Visiting Block Block(Const(())) [List() => false, List() => false]
              Visiting Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x1093 = FixAdd(b924,b1091)
                x1094 = RegRead(x879)
                x1097 = FixDivSRA(x1328,Const(4))
                x1098 = FixSLA(x1097,Const(4))
                x1100 = FixSub(x1328,x1098)
                x1101 = RegRead(x1010)
                x1102 = FixAdd(x1100,x1101)
                x1103 = FixAdd(x1102,Const(15))
                x1104 = FixDivSRA(x1103,Const(4))
                x1105 = FixSLA(x1104,Const(4))
                x1107 = FixToFix(x1329,TRUE,_64,_0)
                x1108 = DRAMAddress(x906)
                x1109 = FixAdd(x1107,x1108)
                x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
                x1111 = DRAMIsAlloc(x906)
                x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
                x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
                x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
                x1328 = FixFMA(x1093,x1094,b1004)
                x1329 = FixSLA(x1097,Const(6))
                x1330 = FixSLA(x1104,Const(6))
              Result: 
                ()
                x1094 = RegRead(x879)
                x1101 = RegRead(x1010)
                x1108 = DRAMAddress(x906)
                x1111 = DRAMIsAlloc(x906)
                x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
                x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
              Working on pipeLatencies of result Vector(Const(()), x1094, x1101, x1108, x1111, x1112, x1114), schedule Vector(x1093, x1094, x1097, x1098, x1100, x1101, x1102, x1103, x1104, x1105, x1107, x1108, x1109, x1110, x1111, x1112, x1113, x1114, x1328, x1329, x1330)
              Memories with both reads and writes in this scope: Set()
              Done finding cycles: Vector(), Map()
              ----------------------------------
              Computing pipeLatencies for scope:
                x1093 = FixAdd(b924,b1091)
                x1094 = RegRead(x879)
                x1097 = FixDivSRA(x1328,Const(4))
                x1098 = FixSLA(x1097,Const(4))
                x1100 = FixSub(x1328,x1098)
                x1101 = RegRead(x1010)
                x1102 = FixAdd(x1100,x1101)
                x1103 = FixAdd(x1102,Const(15))
                x1104 = FixDivSRA(x1103,Const(4))
                x1105 = FixSLA(x1104,Const(4))
                x1107 = FixToFix(x1329,TRUE,_64,_0)
                x1108 = DRAMAddress(x906)
                x1109 = FixAdd(x1107,x1108)
                x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
                x1111 = DRAMIsAlloc(x906)
                x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
                x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
                x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
                x1328 = FixFMA(x1093,x1094,b1004)
                x1329 = FixSLA(x1097,Const(6))
                x1330 = FixSLA(x1104,Const(6))
              Computing fullDFS: Const(())
              Computing fullDFS: x1094
              cur: x1094, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1094 = RegRead(x879)
              Computing fullDFS: x1101
              cur: x1101, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1101 = RegRead(x1010)
              Computing fullDFS: x1108
              cur: x1108, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1108 = DRAMAddress(x906)
              Computing fullDFS: x1111
              cur: x1111, inReduce: false, latency: 0.0
              [0.0 = max(0) + 0.0] x1111 = DRAMIsAlloc(x906)
              Computing fullDFS: x1112
              Computing fullDFS: x1110
              Computing fullDFS: x1109
              Computing fullDFS: x1107
              Computing fullDFS: x1329
              Computing fullDFS: x1097
              Computing fullDFS: x1328
              Computing fullDFS: x1093
              cur: x1093, inReduce: false, latency: 1.0
              [1.0 = max(0) + 1.0] x1093 = FixAdd(b924,b1091)
              [7.0 = max(1.0, 0.0) + 6.0] x1328 = FixFMA(x1093,x1094,b1004)
              [7.2 = max(7.0) + 0.2] x1097 = FixDivSRA(x1328,Const(4))
              [7.4 = max(7.2) + 0.2] x1329 = FixSLA(x1097,Const(6))
              [7.4 = max(7.4) + 0.0] x1107 = FixToFix(x1329,TRUE,_64,_0)
              [9.4 = max(7.4, 0.0) + 2.0] x1109 = FixAdd(x1107,x1108)
              Computing fullDFS: x1330
              Computing fullDFS: x1104
              Computing fullDFS: x1103
              Computing fullDFS: x1102
              Computing fullDFS: x1100
              Computing fullDFS: x1098
              [7.4 = max(7.2) + 0.2] x1098 = FixSLA(x1097,Const(4))
              [8.4 = max(7.4, 7.0) + 1.0] x1100 = FixSub(x1328,x1098)
              [9.4 = max(8.4, 0.0) + 1.0] x1102 = FixAdd(x1100,x1101)
              [10.4 = max(9.4) + 1.0] x1103 = FixAdd(x1102,Const(15))
              [10.6 = max(10.4) + 0.2] x1104 = FixDivSRA(x1103,Const(4))
              [10.799999999999999 = max(10.6) + 0.2] x1330 = FixSLA(x1104,Const(6))
              [10.8 = max(9.4, 10.8) + 0.0] x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
              [10.8 = max(10.8, 0.0) + 0.0] x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
              Computing fullDFS: x1114
              Computing fullDFS: x1113
              Computing fullDFS: x1105
              [10.799999999999999 = max(10.6) + 0.2] x1105 = FixSLA(x1104,Const(4))
              [10.8 = max(8.4, 9.4, 10.8) + 0.0] x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
              [11.8 = max(10.8) + 1.0] x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
              Cycles: Map()
                Schedule after pipeLatencies calculation:
                [0.0] x1094 = RegRead(x879)
                [0.0] x1101 = RegRead(x1010)
                [0.0] x1108 = DRAMAddress(x906)
                [0.0] x1111 = DRAMIsAlloc(x906)
                [1.0] x1093 = FixAdd(b924,b1091)
                [7.0] x1328 = FixFMA(x1093,x1094,b1004)
                [7.2] x1097 = FixDivSRA(x1328,Const(4))
                [7.4] x1098 = FixSLA(x1097,Const(4))
                [7.4] x1107 = FixToFix(x1329,TRUE,_64,_0)
                [7.4] x1329 = FixSLA(x1097,Const(6))
                [8.4] x1100 = FixSub(x1328,x1098)
                [9.4] x1102 = FixAdd(x1100,x1101)
                [9.4] x1109 = FixAdd(x1107,x1108)
                [10.4] x1103 = FixAdd(x1102,Const(15))
                [10.6] x1104 = FixDivSRA(x1103,Const(4))
                [10.8] x1105 = FixSLA(x1104,Const(4))
                [10.8] x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
                [10.8] x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
                [10.8] x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
                [10.8] x1330 = FixSLA(x1104,Const(6))
                [11.8] x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
              [0.0] ()
              [0.0] x1111 = DRAMIsAlloc(x906)
              [0.0] x1094 = RegRead(x879)
              [0.0] x1108 = DRAMAddress(x906)
              [0.0] x1101 = RegRead(x1010)
              [1.0] x1093 = FixAdd(b924,b1091)
              [7.0] x1328 = FixFMA(x1093,x1094,b1004)
              [7.2] x1097 = FixDivSRA(x1328,Const(4))
              [7.4] x1329 = FixSLA(x1097,Const(6))
              [7.4] x1107 = FixToFix(x1329,TRUE,_64,_0)
              [7.4] x1098 = FixSLA(x1097,Const(4))
              [8.4] x1100 = FixSub(x1328,x1098)
              [9.4] x1109 = FixAdd(x1107,x1108)
              [9.4] x1102 = FixAdd(x1100,x1101)
              [10.4] x1103 = FixAdd(x1102,Const(15))
              [10.6] x1104 = FixDivSRA(x1103,Const(4))
              [10.8] x1105 = FixSLA(x1104,Const(4))
              [10.8] x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true))))
              [10.8] x1330 = FixSLA(x1104,Const(6))
              [10.8] x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092)))
              [10.8] x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102)))
              [11.8] x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092)))
              
              
              Sym Delays:
                [0.0 = 0.0 - 0.0]: () [cycle = false]
                [0.0 = 0.0 - 0.0]: x1111 = DRAMIsAlloc(x906) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1094 = RegRead(x879) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1108 = DRAMAddress(x906) [cycle = false]
                [0.0 = 0.0 - 0.0]: x1101 = RegRead(x1010) [cycle = false]
                [0.0 = 1.0 - 1.0]: x1093 = FixAdd(b924,b1091) [cycle = false]
                [1.0 = 7.0 - 6.0]: x1328 = FixFMA(x1093,x1094,b1004) [cycle = false]
                [7.0 = 7.2 - 0.2]: x1097 = FixDivSRA(x1328,Const(4)) [cycle = false]
                [7.2 = 7.4 - 0.2]: x1329 = FixSLA(x1097,Const(6)) [cycle = false]
                [7.2 = 7.4 - 0.2]: x1098 = FixSLA(x1097,Const(4)) [cycle = false]
                [7.4 = 8.4 - 1.0]: x1100 = FixSub(x1328,x1098) [cycle = false]
                [7.4 = 9.4 - 2.0]: x1109 = FixAdd(x1107,x1108) [cycle = false]
                [7.4 = 7.4 - 0.0]: x1107 = FixToFix(x1329,TRUE,_64,_0) [cycle = false]
                [8.4 = 9.4 - 1.0]: x1102 = FixAdd(x1100,x1101) [cycle = false]
                [9.4 = 10.4 - 1.0]: x1103 = FixAdd(x1102,Const(15)) [cycle = false]
                [10.4 = 10.6 - 0.2]: x1104 = FixDivSRA(x1103,Const(4)) [cycle = false]
                [10.6 = 10.8 - 0.2]: x1105 = FixSLA(x1104,Const(4)) [cycle = false]
                [10.6 = 10.8 - 0.2]: x1330 = FixSLA(x1104,Const(6)) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1110 = SimpleStruct(ArrayBuffer((offset,x1109), (size,x1330), (isLoad,Const(true)))) [cycle = false]
                [10.8 = 11.8 - 1.0]: x1114 = FIFOBankedEnq(x1087,ArrayBuffer(x1113),ArrayBuffer(Set(Const(true), b1092))) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1112 = StreamOutBankedWrite(x1086,ArrayBuffer(x1110),ArrayBuffer(Set(x1111, b1092))) [cycle = false]
                [10.8 = 10.8 - 0.0]: x1113 = SimpleStruct(ArrayBuffer((size,x1105), (start,x1100), (end,x1102))) [cycle = false]
              Visiting Block Block(Const(())) [List() => false, List() => false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1125 = VecApply(x1124,0)
                  x1126 = FieldApply(x1125,start)
                  x1127 = RegWrite(x1121,x1126,Set())
                  x1128 = FieldApply(x1125,end)
                  x1129 = RegWrite(x1122,x1128,Set())
                  x1130 = FieldApply(x1125,size)
                  x1131 = RegWrite(x1123,x1130,Set())
                Result: 
                  ()
                  x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1127 = RegWrite(x1121,x1126,Set())
                  x1129 = RegWrite(x1122,x1128,Set())
                  x1131 = RegWrite(x1123,x1130,Set())
                Working on pipeLatencies of result Vector(Const(()), x1124, x1127, x1129, x1131), schedule Vector(x1124, x1125, x1126, x1127, x1128, x1129, x1130, x1131)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x1125 = VecApply(x1124,0)
                  x1126 = FieldApply(x1125,start)
                  x1127 = RegWrite(x1121,x1126,Set())
                  x1128 = FieldApply(x1125,end)
                  x1129 = RegWrite(x1122,x1128,Set())
                  x1130 = FieldApply(x1125,size)
                  x1131 = RegWrite(x1123,x1130,Set())
                Computing fullDFS: Const(())
                Computing fullDFS: x1124
                cur: x1124, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                Computing fullDFS: x1127
                Computing fullDFS: x1126
                Computing fullDFS: x1125
                [0.0 = max(0.0) + 0.0] x1125 = VecApply(x1124,0)
                [0.0 = max(0.0) + 0.0] x1126 = FieldApply(x1125,start)
                [1.0 = max(0.0) + 1.0] x1127 = RegWrite(x1121,x1126,Set())
                Computing fullDFS: x1129
                Computing fullDFS: x1128
                [0.0 = max(0.0) + 0.0] x1128 = FieldApply(x1125,end)
                [1.0 = max(0.0) + 1.0] x1129 = RegWrite(x1122,x1128,Set())
                Computing fullDFS: x1131
                Computing fullDFS: x1130
                [0.0 = max(0.0) + 0.0] x1130 = FieldApply(x1125,size)
                [1.0 = max(0.0) + 1.0] x1131 = RegWrite(x1123,x1130,Set())
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  [0.0] x1125 = VecApply(x1124,0)
                  [0.0] x1126 = FieldApply(x1125,start)
                  [0.0] x1128 = FieldApply(x1125,end)
                  [0.0] x1130 = FieldApply(x1125,size)
                  [1.0] x1127 = RegWrite(x1121,x1126,Set())
                  [1.0] x1129 = RegWrite(x1122,x1128,Set())
                  [1.0] x1131 = RegWrite(x1123,x1130,Set())
                [0.0] ()
                [0.0] x1128 = FieldApply(x1125,end)
                [0.0] x1125 = VecApply(x1124,0)
                [0.0] x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                [0.0] x1130 = FieldApply(x1125,size)
                [0.0] x1126 = FieldApply(x1125,start)
                [1.0] x1127 = RegWrite(x1121,x1126,Set())
                [1.0] x1131 = RegWrite(x1123,x1130,Set())
                [1.0] x1129 = RegWrite(x1122,x1128,Set())
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1127 = RegWrite(x1121,x1126,Set()) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1128 = FieldApply(x1125,end) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1131 = RegWrite(x1123,x1130,Set()) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1125 = VecApply(x1124,0) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1124 = FIFOBankedDeq(x1087,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1130 = FieldApply(x1125,size) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1126 = FieldApply(x1125,start) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1129 = RegWrite(x1122,x1128,Set()) [cycle = false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1138 = RegRead(x1121)
                  x1139 = FixLeq(x1138,b1136)
                  x1140 = RegRead(x1122)
                  x1141 = FixLst(b1136,x1140)
                  x1142 = And(x1139,x1141)
                  x1143 = FixSub(b1136,x1138)
                  x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  x1145 = VecApply(x1144,0)
                  x1147 = FixSLA(b1119,Const(4))
                  x1148 = FixAdd(x1147,x1143)
                  x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                Result: 
                  ()
                  x1138 = RegRead(x1121)
                  x1140 = RegRead(x1122)
                  x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                Working on pipeLatencies of result Vector(Const(()), x1138, x1140, x1144, x1149, x1150), schedule Vector(x1138, x1139, x1140, x1141, x1142, x1143, x1144, x1145, x1147, x1148, x1149, x1150)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1138 = RegRead(x1121)
                  x1139 = FixLeq(x1138,b1136)
                  x1140 = RegRead(x1122)
                  x1141 = FixLst(b1136,x1140)
                  x1142 = And(x1139,x1141)
                  x1143 = FixSub(b1136,x1138)
                  x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  x1145 = VecApply(x1144,0)
                  x1147 = FixSLA(b1119,Const(4))
                  x1148 = FixAdd(x1147,x1143)
                  x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                Computing fullDFS: Const(())
                Computing fullDFS: x1138
                cur: x1138, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1138 = RegRead(x1121)
                Computing fullDFS: x1140
                cur: x1140, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1140 = RegRead(x1122)
                Computing fullDFS: x1144
                cur: x1144, inReduce: false, latency: 1.0
                [1.0 = max(0) + 1.0] x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                Computing fullDFS: x1149
                Computing fullDFS: x1142
                Computing fullDFS: x1139
                [0.4 = max(0.0) + 0.4] x1139 = FixLeq(x1138,b1136)
                Computing fullDFS: x1141
                [0.4 = max(0.0) + 0.4] x1141 = FixLst(b1136,x1140)
                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1142 = And(x1139,x1141)
                Computing fullDFS: x1145
                [1.0 = max(1.0) + 0.0] x1145 = VecApply(x1144,0)
                Computing fullDFS: x1148
                Computing fullDFS: x1143
                [1.0 = max(0.0) + 1.0] x1143 = FixSub(b1136,x1138)
                Computing fullDFS: x1147
                cur: x1147, inReduce: false, latency: 0.2
                [0.2 = max(0) + 0.2] x1147 = FixSLA(b1119,Const(4))
                [2.0 = max(1.0, 0.2) + 1.0] x1148 = FixAdd(x1147,x1143)
                [3.0 = max(0.6, 1.0, 2.0) + 1.0] x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                Computing fullDFS: x1150
                [3.0 = max(0.6, 1.0, 2.0) + 1.0] x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1138 = RegRead(x1121)
                  [0.0] x1140 = RegRead(x1122)
                  [0.2] x1147 = FixSLA(b1119,Const(4))
                  [0.4] x1139 = FixLeq(x1138,b1136)
                  [0.4] x1141 = FixLst(b1136,x1140)
                  [0.6] x1142 = And(x1139,x1141)
                  [1.0] x1143 = FixSub(b1136,x1138)
                  [1.0] x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                  [1.0] x1145 = VecApply(x1144,0)
                  [2.0] x1148 = FixAdd(x1147,x1143)
                  [3.0] x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                  [3.0] x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                [0.0] ()
                [0.0] x1138 = RegRead(x1121)
                [0.0] x1140 = RegRead(x1122)
                [0.2] x1147 = FixSLA(b1119,Const(4))
                [0.4] x1139 = FixLeq(x1138,b1136)
                [0.4] x1141 = FixLst(b1136,x1140)
                [0.6] x1142 = And(x1139,x1141)
                [1.0] x1143 = FixSub(b1136,x1138)
                [1.0] x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120)))
                [1.0] x1145 = VecApply(x1144,0)
                [2.0] x1148 = FixAdd(x1147,x1143)
                [3.0] x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                [3.0] x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120)))
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 0.2 - 0.2]: x1147 = FixSLA(b1119,Const(4)) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1143 = FixSub(b1136,x1138) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1138 = RegRead(x1121) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1139 = FixLeq(x1138,b1136) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1144 = StreamInBankedRead(x1088,ArrayBuffer(Set(b1137, b1120))) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1141 = FixLst(b1136,x1140) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1140 = RegRead(x1122) [cycle = false]
                  [0.4 = 0.6 - 0.2]: x1142 = And(x1139,x1141) [cycle = false]
                  [1.0 = 1.0 - 0.0]: x1145 = VecApply(x1144,0) [cycle = false]
                  [1.0 = 2.0 - 1.0]: x1148 = FixAdd(x1147,x1143) [cycle = false]
                  [2.0 = 3.0 - 1.0]: x1150 = SRAMBankedWrite(x1017,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120))) [cycle = false]
                  [2.0 = 3.0 - 1.0]: x1149 = SRAMBankedWrite(x1018,Vector(x1145),Vector(List(Const(0))),Vector(x1148),Vector(Set(x1142, b1137, b1120))) [cycle = false]
          Visiting Block Block(Const(())) [List() => false, List() => false]
            Visiting Block Block(Const(())) [List() => false, List() => false]
              Visiting Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x1169 = FixSLA(b1156,Const(4))
                x1170 = FixAdd(x1169,b1161)
                x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1172 = VecApply(x1171,0)
                x1174 = FixAdd(x1169,b1166)
                x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1176 = VecApply(x1175,0)
                x1178 = FixSLA(b1166,Const(4))
                x1179 = FixAdd(x1178,b1161)
                x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1181 = VecApply(x1180,0)
                x1182 = FixMul(x1176,x1181)
                x1183 = FixAdd(x1172,x1182)
                x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Result: 
                ()
                x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Working on pipeLatencies of result Vector(Const(()), x1171, x1175, x1180, x1184, x1185), schedule Vector(x1169, x1170, x1171, x1172, x1174, x1175, x1176, x1178, x1179, x1180, x1181, x1182, x1183, x1184, x1185)
              Memories with both reads and writes in this scope: Set(x1017)
              NonConflictSets(x1171, x1185): Set()
              NonConflictSets(x1171, x1185): Set()
              Found Cycle: x1171, x1185
              Exclusions: Set() Set() 
              Found cycle between: 
                x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                  x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                  x1172 = VecApply(x1171,0)
                  x1183 = FixAdd(x1172,x1182)
                  x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Done finding cycles: Vector(AccumTriple(x1017,x1171,x1185)), Map(x1171 -> List(AccumTriple(x1017,x1171,x1185)), x1183 -> List(AccumTriple(x1017,x1171,x1185)), x1185 -> List(AccumTriple(x1017,x1171,x1185)), x1172 -> List(AccumTriple(x1017,x1171,x1185)))
              ----------------------------------
              Computing pipeLatencies for scope:
                x1169 = FixSLA(b1156,Const(4))
                x1170 = FixAdd(x1169,b1161)
                x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1172 = VecApply(x1171,0)
                x1174 = FixAdd(x1169,b1166)
                x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1176 = VecApply(x1175,0)
                x1178 = FixSLA(b1166,Const(4))
                x1179 = FixAdd(x1178,b1161)
                x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                x1181 = VecApply(x1180,0)
                x1182 = FixMul(x1176,x1181)
                x1183 = FixAdd(x1172,x1182)
                x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Computing fullDFS: Const(())
              Computing fullDFS: x1171
              Computing fullDFS: x1170
              Computing fullDFS: x1169
              cur: x1169, inReduce: false, latency: 0.2
              [0.2 = max(0) + 0.2] x1169 = FixSLA(b1156,Const(4))
              [1.2 = max(0.2) + 1.0] x1170 = FixAdd(x1169,b1161)
              [3.2 = max(1.2) + 2.0] x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
              Computing fullDFS: x1175
              Computing fullDFS: x1174
              [1.2 = max(0.2) + 1.0] x1174 = FixAdd(x1169,b1166)
              [3.2 = max(1.2) + 2.0] x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              Computing fullDFS: x1180
              Computing fullDFS: x1179
              Computing fullDFS: x1178
              cur: x1178, inReduce: false, latency: 0.2
              [0.2 = max(0) + 0.2] x1178 = FixSLA(b1166,Const(4))
              [1.2 = max(0.2) + 1.0] x1179 = FixAdd(x1178,b1161)
              [3.2 = max(1.2) + 2.0] x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              Computing fullDFS: x1184
              Computing fullDFS: x1183
              Computing fullDFS: x1172
              cycle deps of x1172: Vector(x1171, x1172)
              [3.2 = max(3.2) + 0.0] x1172 = VecApply(x1171,0)[cycle]
              Computing fullDFS: x1182
              Computing fullDFS: x1176
              [3.2 = max(3.2) + 0.0] x1176 = VecApply(x1175,0)
              Computing fullDFS: x1181
              [3.2 = max(3.2) + 0.0] x1181 = VecApply(x1180,0)
              [9.2 = max(3.2, 3.2) + 6.0] x1182 = FixMul(x1176,x1181)
              cycle deps of x1183: Vector(x1171, x1172, x1183)
              [10.2 = max(3.2, 9.2) + 1.0] x1183 = FixAdd(x1172,x1182)[cycle]
              cycle deps of x1184: Vector(x1171, x1172, x1183, x1184)
              [11.2 = max(1.2, 10.2) + 1.0] x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Computing fullDFS: x1185
              cycle deps of x1185: Vector(x1171, x1171, x1172, x1183, x1185)
              [11.2 = max(1.2, 3.2, 10.2) + 1.0] x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))[cycle]
              Cycle #0: write: x1185, cycle: x1171, x1171, x1172, x1183, x1185
              x1183 = FixAdd(x1172,x1182) [10.2]
                [10.2 = 11.2 - 1.0] x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                [10.2 = 11.2 - 1.0] x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                [10.2]
              x1172 = VecApply(x1171,0) [3.2]
                [9.2 = 10.2 - 1.0] x1183 = FixAdd(x1172,x1182)
                [9.2]
              x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) [3.2]
                [9.2 = 9.2 - 0.0] x1172 = VecApply(x1171,0)
                [9.2]
              x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) [9.2]
                [9.2 = 9.2 - 0.0] x1172 = VecApply(x1171,0)
                [9.2]
              Cycles: Map(x1171 -> List(x1171), x1183 -> Vector(x1171, x1172, x1183), x1185 -> Vector(x1171, x1171, x1172, x1183, x1185), x1172 -> Vector(x1171, x1172), x1184 -> Vector(x1171, x1172, x1183, x1184))
              pseudo cycles for x1017:
              Multiplexed accesses for memory x1017: 
                x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              Access: x1171 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
              First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
              Pushing x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.2 due to muxing.
              Multiplexed accesses for memory x1017: 
                x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              Access: x1185 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
              First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
              Pushing x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) by 0.0 to 11.2 due to muxing.
              Found cycles: 
              AAACycle(Vector(x1171),x1017,1.0)
              AAACycle(Vector(x1185),x1017,1.0)
              WARCycle(x1171,x1185,x1017,Vector(x1171, x1171, x1172, x1183, x1185),4.0,spatial.node.AccumMarker$Unknown$@4a2e4f67,-1)
                Schedule after pipeLatencies calculation:
                [0.2] x1169 = FixSLA(b1156,Const(4))
                [0.2] x1178 = FixSLA(b1166,Const(4))
                [1.2] x1170 = FixAdd(x1169,b1161)
                [1.2] x1174 = FixAdd(x1169,b1166)
                [1.2] x1179 = FixAdd(x1178,b1161)
                [3.2] x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [3.2] x1176 = VecApply(x1175,0)
                [3.2] x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [3.2] x1181 = VecApply(x1180,0)
                [9.2] x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
                [9.2] x1172 = VecApply(x1171,0)
                [9.2] x1182 = FixMul(x1176,x1181)
                [10.2] x1183 = FixAdd(x1172,x1182)
                [11.2] x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
                [11.2] x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              [0.0] ()
              [0.2] x1169 = FixSLA(b1156,Const(4))
              [0.2] x1178 = FixSLA(b1166,Const(4))
              [1.2] x1179 = FixAdd(x1178,b1161)
              [1.2] x1174 = FixAdd(x1169,b1166)
              [1.2] x1170 = FixAdd(x1169,b1161)
              [3.2] x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              [3.2] x1176 = VecApply(x1175,0)
              [3.2] x1181 = VecApply(x1180,0)
              [3.2] x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              [9.2] x1182 = FixMul(x1176,x1181)
              [9.2] x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]])
              [9.2] x1172 = VecApply(x1171,0)
              [10.2] x1183 = FixAdd(x1172,x1182)
              [11.2] x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              [11.2] x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)))
              
              
              Sym Delays:
                [0.0 = 0.0 - 0.0]: () [cycle = false]
                [0.0 = 0.2 - 0.2]: x1169 = FixSLA(b1156,Const(4)) [cycle = false]
                [0.0 = 0.2 - 0.2]: x1178 = FixSLA(b1166,Const(4)) [cycle = false]
                [0.2 = 1.2 - 1.0]: x1179 = FixAdd(x1178,b1161) [cycle = false]
                [0.2 = 1.2 - 1.0]: x1174 = FixAdd(x1169,b1166) [cycle = false]
                [0.2 = 1.2 - 1.0]: x1170 = FixAdd(x1169,b1161) [cycle = false]
                [1.2 = 3.2 - 2.0]: x1175 = SRAMBankedRead(x934,Vector(List(Const(0))),Vector(x1174),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) [cycle = false]
                [1.2 = 3.2 - 2.0]: x1180 = SRAMBankedRead(x1016,Vector(List(Const(0))),Vector(x1179),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) [cycle = false]
                [3.2 = 9.2 - 6.0]: x1182 = FixMul(x1176,x1181) [cycle = false]
                [3.2 = 3.2 - 0.0]: x1176 = VecApply(x1175,0) [cycle = false]
                [3.2 = 3.2 - 0.0]: x1181 = VecApply(x1180,0) [cycle = false]
                [7.2 = 9.2 - 2.0]: x1171 = SRAMBankedRead(x1017,Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914)),Vec[Fix[TRUE,_24,_8]]) [cycle = true]
                [9.2 = 10.2 - 1.0]: x1183 = FixAdd(x1172,x1182) [cycle = true]
                [9.2 = 9.2 - 0.0]: x1172 = VecApply(x1171,0) [cycle = true]
                [10.2 = 11.2 - 1.0]: x1185 = SRAMBankedWrite(x1017,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) [cycle = true]
                [10.2 = 11.2 - 1.0]: x1184 = SRAMBankedWrite(x1018,Vector(x1183),Vector(List(Const(0))),Vector(x1170),Vector(Set(b1005, b925, b1167, b1162, b1157, b914))) [cycle = false]
          Visiting Block Block(Const(())) [List() => false, List() => false]
            Visiting Block Block(Const(())) [List() => false, List() => false]
              Visiting Block Block(Const(())) [List() => false, List() => false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1199 = FixAdd(b924,b1194)
                  x1200 = RegRead(x879)
                  x1203 = FixDivSRA(x1331,Const(4))
                  x1204 = FixSLA(x1203,Const(4))
                  x1206 = FixSub(x1331,x1204)
                  x1207 = RegRead(x1010)
                  x1208 = FixAdd(x1206,x1207)
                  x1209 = FixAdd(x1208,Const(15))
                  x1210 = FixDivSRA(x1209,Const(4))
                  x1211 = FixSLA(x1210,Const(4))
                  x1213 = FixToFix(x1332,TRUE,_64,_0)
                  x1214 = DRAMAddress(x906)
                  x1215 = FixAdd(x1213,x1214)
                  x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                  x1217 = DRAMIsAlloc(x906)
                  x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                  x1219 = RegWrite(x1196,x1206,Set())
                  x1220 = RegWrite(x1197,x1208,Set())
                  x1221 = RegWrite(x1198,x1211,Set())
                  x1331 = FixFMA(x1199,x1200,b1004)
                  x1332 = FixSLA(x1203,Const(6))
                  x1333 = FixSLA(x1210,Const(6))
                Result: 
                  ()
                  x1200 = RegRead(x879)
                  x1207 = RegRead(x1010)
                  x1214 = DRAMAddress(x906)
                  x1217 = DRAMIsAlloc(x906)
                  x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                  x1219 = RegWrite(x1196,x1206,Set())
                  x1220 = RegWrite(x1197,x1208,Set())
                  x1221 = RegWrite(x1198,x1211,Set())
                Working on pipeLatencies of result Vector(Const(()), x1200, x1207, x1214, x1217, x1218, x1219, x1220, x1221), schedule Vector(x1199, x1200, x1203, x1204, x1206, x1207, x1208, x1209, x1210, x1211, x1213, x1214, x1215, x1216, x1217, x1218, x1219, x1220, x1221, x1331, x1332, x1333)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1199 = FixAdd(b924,b1194)
                  x1200 = RegRead(x879)
                  x1203 = FixDivSRA(x1331,Const(4))
                  x1204 = FixSLA(x1203,Const(4))
                  x1206 = FixSub(x1331,x1204)
                  x1207 = RegRead(x1010)
                  x1208 = FixAdd(x1206,x1207)
                  x1209 = FixAdd(x1208,Const(15))
                  x1210 = FixDivSRA(x1209,Const(4))
                  x1211 = FixSLA(x1210,Const(4))
                  x1213 = FixToFix(x1332,TRUE,_64,_0)
                  x1214 = DRAMAddress(x906)
                  x1215 = FixAdd(x1213,x1214)
                  x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                  x1217 = DRAMIsAlloc(x906)
                  x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                  x1219 = RegWrite(x1196,x1206,Set())
                  x1220 = RegWrite(x1197,x1208,Set())
                  x1221 = RegWrite(x1198,x1211,Set())
                  x1331 = FixFMA(x1199,x1200,b1004)
                  x1332 = FixSLA(x1203,Const(6))
                  x1333 = FixSLA(x1210,Const(6))
                Computing fullDFS: Const(())
                Computing fullDFS: x1200
                cur: x1200, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1200 = RegRead(x879)
                Computing fullDFS: x1207
                cur: x1207, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1207 = RegRead(x1010)
                Computing fullDFS: x1214
                cur: x1214, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1214 = DRAMAddress(x906)
                Computing fullDFS: x1217
                cur: x1217, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1217 = DRAMIsAlloc(x906)
                Computing fullDFS: x1218
                Computing fullDFS: x1216
                Computing fullDFS: x1215
                Computing fullDFS: x1213
                Computing fullDFS: x1332
                Computing fullDFS: x1203
                Computing fullDFS: x1331
                Computing fullDFS: x1199
                cur: x1199, inReduce: false, latency: 1.0
                [1.0 = max(0) + 1.0] x1199 = FixAdd(b924,b1194)
                [7.0 = max(1.0, 0.0) + 6.0] x1331 = FixFMA(x1199,x1200,b1004)
                [7.2 = max(7.0) + 0.2] x1203 = FixDivSRA(x1331,Const(4))
                [7.4 = max(7.2) + 0.2] x1332 = FixSLA(x1203,Const(6))
                [7.4 = max(7.4) + 0.0] x1213 = FixToFix(x1332,TRUE,_64,_0)
                [9.4 = max(7.4, 0.0) + 2.0] x1215 = FixAdd(x1213,x1214)
                Computing fullDFS: x1333
                Computing fullDFS: x1210
                Computing fullDFS: x1209
                Computing fullDFS: x1208
                Computing fullDFS: x1206
                Computing fullDFS: x1204
                [7.4 = max(7.2) + 0.2] x1204 = FixSLA(x1203,Const(4))
                [8.4 = max(7.4, 7.0) + 1.0] x1206 = FixSub(x1331,x1204)
                [9.4 = max(8.4, 0.0) + 1.0] x1208 = FixAdd(x1206,x1207)
                [10.4 = max(9.4) + 1.0] x1209 = FixAdd(x1208,Const(15))
                [10.6 = max(10.4) + 0.2] x1210 = FixDivSRA(x1209,Const(4))
                [10.799999999999999 = max(10.6) + 0.2] x1333 = FixSLA(x1210,Const(6))
                [10.8 = max(9.4, 10.8) + 0.0] x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                [10.8 = max(10.8, 0.0) + 0.0] x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                Computing fullDFS: x1219
                [9.4 = max(8.4) + 1.0] x1219 = RegWrite(x1196,x1206,Set())
                Computing fullDFS: x1220
                [10.4 = max(9.4) + 1.0] x1220 = RegWrite(x1197,x1208,Set())
                Computing fullDFS: x1221
                Computing fullDFS: x1211
                [10.799999999999999 = max(10.6) + 0.2] x1211 = FixSLA(x1210,Const(4))
                [11.8 = max(10.8) + 1.0] x1221 = RegWrite(x1198,x1211,Set())
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1200 = RegRead(x879)
                  [0.0] x1207 = RegRead(x1010)
                  [0.0] x1214 = DRAMAddress(x906)
                  [0.0] x1217 = DRAMIsAlloc(x906)
                  [1.0] x1199 = FixAdd(b924,b1194)
                  [7.0] x1331 = FixFMA(x1199,x1200,b1004)
                  [7.2] x1203 = FixDivSRA(x1331,Const(4))
                  [7.4] x1204 = FixSLA(x1203,Const(4))
                  [7.4] x1213 = FixToFix(x1332,TRUE,_64,_0)
                  [7.4] x1332 = FixSLA(x1203,Const(6))
                  [8.4] x1206 = FixSub(x1331,x1204)
                  [9.4] x1208 = FixAdd(x1206,x1207)
                  [9.4] x1215 = FixAdd(x1213,x1214)
                  [9.4] x1219 = RegWrite(x1196,x1206,Set())
                  [10.4] x1209 = FixAdd(x1208,Const(15))
                  [10.4] x1220 = RegWrite(x1197,x1208,Set())
                  [10.6] x1210 = FixDivSRA(x1209,Const(4))
                  [10.8] x1211 = FixSLA(x1210,Const(4))
                  [10.8] x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                  [10.8] x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                  [10.8] x1333 = FixSLA(x1210,Const(6))
                  [11.8] x1221 = RegWrite(x1198,x1211,Set())
                [0.0] ()
                [0.0] x1200 = RegRead(x879)
                [0.0] x1217 = DRAMIsAlloc(x906)
                [0.0] x1214 = DRAMAddress(x906)
                [0.0] x1207 = RegRead(x1010)
                [1.0] x1199 = FixAdd(b924,b1194)
                [7.0] x1331 = FixFMA(x1199,x1200,b1004)
                [7.2] x1203 = FixDivSRA(x1331,Const(4))
                [7.4] x1332 = FixSLA(x1203,Const(6))
                [7.4] x1213 = FixToFix(x1332,TRUE,_64,_0)
                [7.4] x1204 = FixSLA(x1203,Const(4))
                [8.4] x1206 = FixSub(x1331,x1204)
                [9.4] x1215 = FixAdd(x1213,x1214)
                [9.4] x1219 = RegWrite(x1196,x1206,Set())
                [9.4] x1208 = FixAdd(x1206,x1207)
                [10.4] x1209 = FixAdd(x1208,Const(15))
                [10.4] x1220 = RegWrite(x1197,x1208,Set())
                [10.6] x1210 = FixDivSRA(x1209,Const(4))
                [10.8] x1211 = FixSLA(x1210,Const(4))
                [10.8] x1333 = FixSLA(x1210,Const(6))
                [10.8] x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217)))
                [10.8] x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false))))
                [11.8] x1221 = RegWrite(x1198,x1211,Set())
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1200 = RegRead(x879) [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1199 = FixAdd(b924,b1194) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1217 = DRAMIsAlloc(x906) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1214 = DRAMAddress(x906) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1207 = RegRead(x1010) [cycle = false]
                  [1.0 = 7.0 - 6.0]: x1331 = FixFMA(x1199,x1200,b1004) [cycle = false]
                  [7.0 = 7.2 - 0.2]: x1203 = FixDivSRA(x1331,Const(4)) [cycle = false]
                  [7.2 = 7.4 - 0.2]: x1332 = FixSLA(x1203,Const(6)) [cycle = false]
                  [7.2 = 7.4 - 0.2]: x1204 = FixSLA(x1203,Const(4)) [cycle = false]
                  [7.4 = 9.4 - 2.0]: x1215 = FixAdd(x1213,x1214) [cycle = false]
                  [7.4 = 8.4 - 1.0]: x1206 = FixSub(x1331,x1204) [cycle = false]
                  [7.4 = 7.4 - 0.0]: x1213 = FixToFix(x1332,TRUE,_64,_0) [cycle = false]
                  [8.4 = 9.4 - 1.0]: x1219 = RegWrite(x1196,x1206,Set()) [cycle = false]
                  [8.4 = 9.4 - 1.0]: x1208 = FixAdd(x1206,x1207) [cycle = false]
                  [9.4 = 10.4 - 1.0]: x1209 = FixAdd(x1208,Const(15)) [cycle = false]
                  [9.4 = 10.4 - 1.0]: x1220 = RegWrite(x1197,x1208,Set()) [cycle = false]
                  [10.4 = 10.6 - 0.2]: x1210 = FixDivSRA(x1209,Const(4)) [cycle = false]
                  [10.6 = 10.8 - 0.2]: x1211 = FixSLA(x1210,Const(4)) [cycle = false]
                  [10.6 = 10.8 - 0.2]: x1333 = FixSLA(x1210,Const(6)) [cycle = false]
                  [10.8 = 10.8 - 0.0]: x1218 = StreamOutBankedWrite(x1189,ArrayBuffer(x1216),ArrayBuffer(Set(x1217))) [cycle = false]
                  [10.8 = 11.8 - 1.0]: x1221 = RegWrite(x1198,x1211,Set()) [cycle = false]
                  [10.8 = 10.8 - 0.0]: x1216 = SimpleStruct(ArrayBuffer((offset,x1215), (size,x1333), (isLoad,Const(false)))) [cycle = false]
                Visiting Block Block(Const(())) [List() => true, List() => false]
                Retiming block Block(Const(())):
                  x1228 = RegRead(x1196)
                  x1229 = FixLeq(x1228,b1226)
                  x1230 = RegRead(x1197)
                  x1231 = FixLst(b1226,x1230)
                  x1232 = And(x1229,x1231)
                  x1233 = FixSub(b1226,x1228)
                  x1235 = FixSLA(b1194,Const(4))
                  x1236 = FixAdd(x1235,x1233)
                  x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  x1238 = VecApply(x1237,0)
                  x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                  x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                Result: 
                  ()
                  x1228 = RegRead(x1196)
                  x1230 = RegRead(x1197)
                  x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                Working on pipeLatencies of result Vector(Const(()), x1228, x1230, x1237, x1240), schedule Vector(x1228, x1229, x1230, x1231, x1232, x1233, x1235, x1236, x1237, x1238, x1239, x1240)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x1228 = RegRead(x1196)
                  x1229 = FixLeq(x1228,b1226)
                  x1230 = RegRead(x1197)
                  x1231 = FixLst(b1226,x1230)
                  x1232 = And(x1229,x1231)
                  x1233 = FixSub(b1226,x1228)
                  x1235 = FixSLA(b1194,Const(4))
                  x1236 = FixAdd(x1235,x1233)
                  x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  x1238 = VecApply(x1237,0)
                  x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                  x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                Computing fullDFS: Const(())
                Computing fullDFS: x1228
                cur: x1228, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1228 = RegRead(x1196)
                Computing fullDFS: x1230
                cur: x1230, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x1230 = RegRead(x1197)
                Computing fullDFS: x1237
                Computing fullDFS: x1232
                Computing fullDFS: x1229
                [0.4 = max(0.0) + 0.4] x1229 = FixLeq(x1228,b1226)
                Computing fullDFS: x1231
                [0.4 = max(0.0) + 0.4] x1231 = FixLst(b1226,x1230)
                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1232 = And(x1229,x1231)
                Computing fullDFS: x1236
                Computing fullDFS: x1233
                [1.0 = max(0.0) + 1.0] x1233 = FixSub(b1226,x1228)
                Computing fullDFS: x1235
                cur: x1235, inReduce: false, latency: 0.2
                [0.2 = max(0) + 0.2] x1235 = FixSLA(b1194,Const(4))
                [2.0 = max(1.0, 0.2) + 1.0] x1236 = FixAdd(x1235,x1233)
                [4.0 = max(0.6, 2.0) + 2.0] x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                Computing fullDFS: x1240
                Computing fullDFS: x1239
                Computing fullDFS: x1238
                [4.0 = max(4.0) + 0.0] x1238 = VecApply(x1237,0)
                [4.0 = max(0.6, 4.0) + 0.0] x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                [4.0 = max(4.0) + 0.0] x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x1228 = RegRead(x1196)
                  [0.0] x1230 = RegRead(x1197)
                  [0.2] x1235 = FixSLA(b1194,Const(4))
                  [0.4] x1229 = FixLeq(x1228,b1226)
                  [0.4] x1231 = FixLst(b1226,x1230)
                  [0.6] x1232 = And(x1229,x1231)
                  [1.0] x1233 = FixSub(b1226,x1228)
                  [2.0] x1236 = FixAdd(x1235,x1233)
                  [4.0] x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                  [4.0] x1238 = VecApply(x1237,0)
                  [4.0] x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                  [4.0] x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                [0.0] ()
                [0.0] x1228 = RegRead(x1196)
                [0.0] x1230 = RegRead(x1197)
                [0.2] x1235 = FixSLA(b1194,Const(4))
                [0.4] x1231 = FixLst(b1226,x1230)
                [0.4] x1229 = FixLeq(x1228,b1226)
                [0.6] x1232 = And(x1229,x1231)
                [1.0] x1233 = FixSub(b1226,x1228)
                [2.0] x1236 = FixAdd(x1235,x1233)
                [4.0] x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]])
                [4.0] x1238 = VecApply(x1237,0)
                [4.0] x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232)))
                [4.0] x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227)))
                
                
                Sym Delays:
                  [0.0 = 0.0 - 0.0]: () [cycle = false]
                  [0.0 = 1.0 - 1.0]: x1233 = FixSub(b1226,x1228) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1228 = RegRead(x1196) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1231 = FixLst(b1226,x1230) [cycle = false]
                  [0.0 = 0.0 - 0.0]: x1230 = RegRead(x1197) [cycle = false]
                  [0.0 = 0.2 - 0.2]: x1235 = FixSLA(b1194,Const(4)) [cycle = false]
                  [0.0 = 0.4 - 0.4]: x1229 = FixLeq(x1228,b1226) [cycle = false]
                  [0.4 = 0.6 - 0.2]: x1232 = And(x1229,x1231) [cycle = false]
                  [1.0 = 2.0 - 1.0]: x1236 = FixAdd(x1235,x1233) [cycle = false]
                  [2.0 = 4.0 - 2.0]: x1237 = SRAMBankedRead(x1018,Vector(List(Const(0))),Vector(x1236),Vector(Set(x1232, b1227)),Vec[Fix[TRUE,_24,_8]]) [cycle = false]
                  [4.0 = 4.0 - 0.0]: x1238 = VecApply(x1237,0) [cycle = false]
                  [4.0 = 4.0 - 0.0]: x1239 = SimpleStruct(ArrayBuffer((_1,x1238), (_2,x1232))) [cycle = false]
                  [4.0 = 4.0 - 0.0]: x1240 = StreamOutBankedWrite(x1190,ArrayBuffer(x1239),ArrayBuffer(Set(b1227))) [cycle = false]
              Visiting Block Block(Const(())) [List() => true, List() => false]
              Retiming block Block(Const(())):
                x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              Result: 
                ()
                x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              Working on pipeLatencies of result Vector(Const(()), x1244), schedule Vector(x1244)
              Memories with both reads and writes in this scope: Set()
              Done finding cycles: Vector(), Map()
              ----------------------------------
              Computing pipeLatencies for scope:
                x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              Computing fullDFS: Const(())
              Computing fullDFS: x1244
              cur: x1244, inReduce: false, latency: 1.0
              [1.0 = max(0) + 1.0] x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              Cycles: Map()
                Schedule after pipeLatencies calculation:
                [1.0] x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              [0.0] ()
              [1.0] x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set()))
              
              
              Sym Delays:
                [0.0 = 1.0 - 1.0]: x1244 = StreamInBankedRead(x1191,ArrayBuffer(Set())) [cycle = false]
                [0.0 = 0.0 - 0.0]: () [cycle = false]
  Visiting Block Block((b111) => x1269) [List() => false, List() => false]
    Visiting Block Block((b116) => x1265) [List() => false, List() => false]
    Visiting Block Block((x1266,b125) => x1267) [List() => false, List() => false]
    Visiting Block Block((b126,b127) => x1268) [List() => false, List() => false]
  Visiting Block Block((b135) => Const(())) [List() => false, List() => false]
    Visiting Block Block((b136) => Const(())) [List() => false, List() => false]
  Visiting Block Block((b148) => Const(())) [List() => false, List() => false]
    Visiting Block Block((b149) => Const(())) [List() => false, List() => false]
  Visiting Block Block((x1253,b159) => x1293) [List() => false, List() => false]
  Visiting Block Block((x1270,b159) => x1294) [List() => false, List() => false]
  Visiting Block Block((x1293,x1294) => x1295) [List() => false, List() => false]
  Visiting Block Block((x1296,b165) => x1297) [List() => false, List() => false]
  Visiting Block Block((b166,b167) => x1298) [List() => false, List() => false]
