  x28 = AccelScope(Block(Const(())))
    x25 = StateMachine(Set(),Const(0),Block((b5) => x6),Block((b5) => x84),Block((b5) => x24),Fix[TRUE,_32,_0])
      x84 = Switch(List(x7, x70),Block(x80))
      Working on pipeLatencies of result Vector(x80, x71, x8, x83, x78, x73, x13, x82, x76, x75, x18, x20), schedule Vector(x71, x80, x8, x9, x10, x11, x72, x83, x73, x78, x87, x13, x14, x15, x16, x74, x82, x75, x76, x17, x18, x88, x20)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: x80
      Computing fullDFS: x71
      Computing fullDFS: x8
      cur: x8, inReduce: false, latency: 3.0
      Computing fullDFS: x83
      Computing fullDFS: x11
      Computing fullDFS: x9
      cur: x9, inReduce: false, latency: 0.4
      Computing fullDFS: x10
      cur: x10, inReduce: false, latency: 0.4
      Computing fullDFS: x72
      Computing fullDFS: x73
      Computing fullDFS: x13
      Computing fullDFS: x87
      cur: x87, inReduce: false, latency: 0.2
      Computing fullDFS: x78
      Computing fullDFS: x82
      Computing fullDFS: x16
      Computing fullDFS: x14
      cur: x14, inReduce: false, latency: 0.4
      Computing fullDFS: x15
      cur: x15, inReduce: false, latency: 0.4
      Computing fullDFS: x74
      Computing fullDFS: x75
      Computing fullDFS: x18
      Computing fullDFS: x17
      cur: x17, inReduce: false, latency: 6.0
      Computing fullDFS: x76
      Computing fullDFS: x20
      Computing fullDFS: x88
      cur: x88, inReduce: false, latency: 0.2
      Cycles: Map()
      cycles are Vector()
         stm: x71, None
         stm: x80, None
       - Latency:  9.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
    Working on pipeLatencies of result Vector(x6), schedule Vector(x6)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: x6
    cur: x6, inReduce: false, latency: 0.4
    Cycles: Map()
    cycles are Vector()
    Working on pipeLatencies of result Vector(x24), schedule Vector(x24)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: x24
    cur: x24, inReduce: false, latency: 1.0
    Cycles: Map()
    cycles are Vector()
    Working on pipeLatencies of result Vector(x84, x80, x71, x8, x83, x78, x73, x13, x82, x76, x75, x18, x20), schedule Vector(x7, x70, x84, x71, x80, x8, x9, x10, x11, x72, x83, x73, x78, x87, x13, x14, x15, x16, x74, x82, x75, x76, x17, x18, x88, x20)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: x84
    Computing fullDFS: x7
    cur: x7, inReduce: false, latency: 0.4
    Computing fullDFS: x70
    Computing fullDFS: x71
    Computing fullDFS: x8
    Computing fullDFS: x80
    Computing fullDFS: x83
    Computing fullDFS: x11
    Computing fullDFS: x9
    cur: x9, inReduce: false, latency: 0.4
    Computing fullDFS: x10
    cur: x10, inReduce: false, latency: 0.4
    Computing fullDFS: x72
    Computing fullDFS: x73
    Computing fullDFS: x13
    Computing fullDFS: x87
    cur: x87, inReduce: false, latency: 0.2
    Computing fullDFS: x78
    Computing fullDFS: x82
    Computing fullDFS: x16
    Computing fullDFS: x14
    cur: x14, inReduce: false, latency: 0.4
    Computing fullDFS: x15
    cur: x15, inReduce: false, latency: 0.4
    Computing fullDFS: x74
    Computing fullDFS: x75
    Computing fullDFS: x18
    Computing fullDFS: x17
    cur: x17, inReduce: false, latency: 6.0
    Computing fullDFS: x76
    Computing fullDFS: x20
    Computing fullDFS: x88
    cur: x88, inReduce: false, latency: 0.2
    Cycles: Map()
    Written memories: x2
    Read memories: 
    Intersection: 
     - Latency:  10.4
     - Interval: 2.0
    x109 = UnitPipe(Set(),Block(Const(())),None)
      x98 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x94, x96, x97), schedule Vector(x94, x95, x96, x97)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x94
      cur: x94, inReduce: false, latency: 0.0
      Computing fullDFS: x96
      cur: x96, inReduce: false, latency: 0.0
      Computing fullDFS: x97
      Computing fullDFS: x95
      Cycles: Map()
      cycles are Vector()
         stm: x94, None
         stm: x95, None
         stm: x96, None
         stm: x97, None
       - Latency:  0.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x105 = OpForeach(Set(),x101,Block(Const(())),List(b100),None)
      Working on pipeLatencies of result Vector(Const(()), x102, x104), schedule Vector(x102, x103, x104)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x102
      cur: x102, inReduce: false, latency: 4.0
      Computing fullDFS: x104
      Computing fullDFS: x103
      Cycles: Map()
      cycles are Vector()
         stm: x102, None
         stm: x103, None
         stm: x104, None
       - Latency:  4.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x108 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x107), schedule Vector(x107)
      Memories with both reads and writes in this scope: Set(x93)
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x107
      cur: x107, inReduce: false, latency: 1.0
      Cycles: Map()
      pseudo cycles for x93:
      cycles are Vector()
         stm: x107, None
       - Latency:  1.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
     - Interval: 1.0
   - Interval: 2.0
