    Unrolling x503 = InputArguments()
    x877 = InputArguments()
    [x503] 0: x877
    Unrolling x507 = ArrayApply(x503,Const(0))
    x881 = ArrayApply(x877,Const(0))
    [x507] 0: x881
    Unrolling x508 = TextToFix(x507,TRUE,_32,_0)
    x882 = TextToFix(x881,TRUE,_32,_0)
    [x508] 0: x882
    Access: x509
    Memory: x504
    Iterators between x509 and x504: 
    Unroll: Map()
    uids:List(List())
    Unrolling x509 = SetReg(x504,x508)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x883 = SetReg(x878,x882)
    Unrolling x510 = ArrayApply(x503,Const(1))
    x884 = ArrayApply(x877,Const(1))
    [x510] 0: x884
    Unrolling x511 = TextToFix(x510,TRUE,_32,_0)
    x885 = TextToFix(x884,TRUE,_32,_0)
    [x511] 0: x885
    Access: x512
    Memory: x505
    Iterators between x512 and x505: 
    Unroll: Map()
    uids:List(List())
    Unrolling x512 = SetReg(x505,x511)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x886 = SetReg(x879,x885)
    Unrolling x513 = ArrayApply(x503,Const(2))
    x887 = ArrayApply(x877,Const(2))
    [x513] 0: x887
    Unrolling x514 = TextToFix(x513,TRUE,_32,_0)
    x888 = TextToFix(x887,TRUE,_32,_0)
    [x514] 0: x888
    Access: x515
    Memory: x506
    Iterators between x515 and x506: 
    Unroll: Map()
    uids:List(List())
    Unrolling x515 = SetReg(x506,x514)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x889 = SetReg(x880,x888)
    Unrolling x516 = FixMul(x508,x514)
    x890 = FixMul(x882,x888)
    [x516] 0: x890
    Unrolling x518 = MapIndices(x516,Block((b16) => x517))
      Unrolling x517 = FixRandom(Some(Const(3)))
      x891 = FixRandom(Some(Const(3)))
      [x517] 0: x891
    x892 = MapIndices(x890,Block((b16) => x891))
    [x518] 0: x892
    Unrolling x519 = FixMul(x514,x511)
    x893 = FixMul(x888,x885)
    [x519] 0: x893
    Unrolling x521 = MapIndices(x519,Block((b24) => x520))
      Unrolling x520 = FixRandom(Some(Const(3)))
      x894 = FixRandom(Some(Const(3)))
      [x520] 0: x894
    x895 = MapIndices(x893,Block((b24) => x894))
    [x521] 0: x895
    Unrolling x522 = FixMul(x508,x511)
    x896 = FixMul(x882,x885)
    [x522] 0: x896
    Unrolling x523 = MapIndices(x522,Block((b31) => Const(0)))
    x897 = MapIndices(x896,Block((b31) => Const(0)))
    [x523] 0: x897
    Access: x524
    Memory: x504
    Iterators between x524 and x504: 
    Unroll: Map()
    uids:List(List())
    Unrolling x524 = RegRead(x504)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(1))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
      x898 = RegRead(x878)
    Access: x525
    Memory: x506
    Iterators between x525 and x506: 
    Unroll: Map()
    uids:List(List())
    Unrolling x525 = RegRead(x506)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x899 = RegRead(x880)
    Access: x527
    Memory: x506
    Iterators between x527 and x506: 
    Unroll: Map()
    uids:List(List())
    Unrolling x527 = RegRead(x506)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(1))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
      x901 = RegRead(x880)
    Access: x528
    Memory: x505
    Iterators between x528 and x505: 
    Unroll: Map()
    uids:List(List())
    Unrolling x528 = RegRead(x505)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x902 = RegRead(x879)
    Access: x530
    Memory: x504
    Iterators between x530 and x504: 
    Unroll: Map()
    uids:List(List())
    Unrolling x530 = RegRead(x504)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(0))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
      x904 = RegRead(x878)
    Access: x531
    Memory: x505
    Iterators between x531 and x505: 
    Unroll: Map()
    uids:List(List())
    Unrolling x531 = RegRead(x505)
      Dispatch: ArrayBuffer(0)
      Lane IDs: ArrayBuffer(0)
      Port:     Port(Some(0),1,0,ArrayBuffer(0),ArrayBuffer(1))
      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
      Locks: None
    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
      x905 = RegRead(x879)
    Unrolling x533 = SetMem(x526,x518)
    x907 = SetMem(x900,x892)
    [x533] 0: x907
    Unrolling x534 = SetMem(x529,x521)
    x908 = SetMem(x903,x895)
    [x534] 0: x908
    Unrolling x535 = SetMem(x532,x523)
    x909 = SetMem(x906,x897)
    [x535] 0: x909
      Access: x536
      Memory: x506
      Iterators between x536 and x506: 
      Unroll: Map()
      uids:List(List())
      Unrolling x536 = RegRead(x506)
        Dispatch: ArrayBuffer(0)
        Lane IDs: ArrayBuffer(0)
        Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(1))
        Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
        Locks: None
      laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
        x910 = RegRead(x880)
      Unrolling x537 = CounterNew(Const(0),x536,Const(16),Const(1))
      x911 = CounterNew(Const(0),x910,Const(16),Const(1))
      [x537] 0: x911
      Unrolling x538 = CounterChainNew(List(x537))
      x912 = CounterChainNew(List(x911))
      [x538] 0: x912
      Unrolling x809 = OpForeach(Set(),x538,Block(Const(())),List(b50),None)
      x809 = OpForeach(Set(),x538,Block(Const(())),List(b50),None) [duplicate 1/1] in lanes UnitUnroller(Accel,false)
      Unrolling foreach x809
        Access: x545
        Memory: x504
        Iterators between x545 and x504: 
        Unroll: Map()
        uids:List(List())
        Unrolling x545 = RegRead(x504)
          Dispatch: ArrayBuffer(0)
          Lane IDs: ArrayBuffer(0)
          Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(1))
          Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
          Locks: None
        laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
          x915 = RegRead(x878)
        Duplicating x539 = RegNew(Const(0))
          #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
          x916 = RegNew(Const(0))
          Registering duplicates for memory: x539
          (x539,0) -> x916
        Unrolling x544 = UnitPipe(Set(),Block(Const(())),None)
        x544 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x809,x912,List(b50),false,true)
          Access: x540
          Memory: x506
          Iterators between x540 and x506: b50
          Unroll: Map(b50 -> List(0))
          uids:List(List(0))
          Unrolling x540 = RegRead(x506)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x917 = RegRead(x880)
          Unrolling x541 = FixSub(x540,b50)
          x918 = FixSub(x917,b913)
          [x541] 0: x918
          Unrolling x542 = FixMin(Const(16),x541)
          x919 = FixMin(Const(16),x918)
          [x542] 0: x919
          Access: x543
          Memory: x539
          Iterators between x543 and x539: 
          Unroll: Map(b50 -> List(0))
          uids:List(List())
          Unrolling x543 = RegWrite(x539,x542,Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x920 = RegWrite(x916,x919,Set())
        [x544] 0: Const(())
        Unrolling x546 = CounterNew(Const(0),x545,Const(16),Const(1))
        x922 = CounterNew(Const(0),x915,Const(16),Const(1))
        [x546] 0: x922
        Unrolling x547 = CounterChainNew(List(x546))
        x923 = CounterChainNew(List(x922))
        [x547] 0: x923
        Unrolling x808 = OpForeach(Set(),x547,Block(Const(())),List(b57),None)
        x808 = OpForeach(Set(),x547,Block(Const(())),List(b57),None) [duplicate 1/1] in lanes PartialUnroller(x809,x912,List(b50),false,true)
        Unrolling foreach x808
          Access: x612
          Memory: x505
          Iterators between x612 and x505: b50
          Unroll: Map(b50 -> List(0))
          uids:List(List(0))
          Unrolling x612 = RegRead(x505)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(4))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(4)
            x926 = RegRead(x879)
          Duplicating x548 = RegNew(Const(0))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),3,List(),None)
            x927 = RegNew(Const(0))
            Registering duplicates for memory: x548
            (x548,0) -> x927
          Unrolling x553 = UnitPipe(Set(),Block(Const(())),None)
          x553 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x808,x923,List(b57),false,true)
            Access: x549
            Memory: x504
            Iterators between x549 and x504: b50, b57
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List(0, 0))
            Unrolling x549 = RegRead(x504)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x928 = RegRead(x878)
            Unrolling x550 = FixSub(x549,b57)
            x929 = FixSub(x928,b924)
            [x550] 0: x929
            Unrolling x551 = FixMin(Const(16),x550)
            x930 = FixMin(Const(16),x929)
            [x551] 0: x930
            Access: x552
            Memory: x548
            Iterators between x552 and x548: 
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List())
            Unrolling x552 = RegWrite(x548,x551,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x931 = RegWrite(x927,x930,Set())
          [x553] 0: Const(())
          Access: x555
          Memory: x548
          Iterators between x555 and x548: 
          Unroll: Map(b50 -> List(0))
          uids:List(List())
          Unrolling x555 = RegRead(x548)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x933 = RegRead(x927)
          Duplicating x554 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
            #0: Memory(List(Dims {0}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks), Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0, 0),None)
            x934 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
            Registering duplicates for memory: x554
            (x554,0) -> x934
          Unrolling x611 = UnitPipe(Set(),Block(Const(())),None)
          x611 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x808,x923,List(b57),false,true)
            Duplicating x557 = FIFONew(Const(16))
              #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),None)
              x936 = FIFONew(Const(16))
              Registering duplicates for memory: x557
              (x557,0) -> x936
            Unrolling x559 = CounterNew(Const(0),x555,Const(1),Const(1))
            x938 = CounterNew(Const(0),x933,Const(1),Const(1))
            [x559] 0: x938
            Unrolling x560 = CounterChainNew(List(x559))
            x939 = CounterChainNew(List(x938))
            [x560] 0: x939
            Unrolling x583 = OpForeach(Set(),x560,Block(Const(())),List(b473),None)
            x583 = OpForeach(Set(),x560,Block(Const(())),List(b473),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x611),false)
            Unrolling foreach x583
              Unrolling x561 = FixAdd(b57,b473)
              x942 = FixAdd(b924,b940)
              [x561] 0: x942
              Access: x562
              Memory: x506
              Iterators between x562 and x506: b50, b57, b473
              Unroll: Map(b50 -> List(0), b57 -> List(0))
              uids:List(List(0, 0, 0))
              Unrolling x562 = RegRead(x506)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(2))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                x943 = RegRead(x880)
              Unrolling x563 = FixMul(x561,x562)
              x944 = FixMul(x942,x943)
              [x563] 0: x944
              Unrolling x564 = FixAdd(x563,b50)
              x945 = FixAdd(x944,b913)
              [x564] 0: x945
              Unrolling x565 = FixDivSRA(x564,Const(4))
              x946 = FixDivSRA(x945,Const(4))
              [x565] 0: x946
              Unrolling x566 = FixSLA(x565,Const(4))
              x947 = FixSLA(x946,Const(4))
              [x566] 0: x947
              Unrolling x567 = FixSLA(x566,Const(2))
              x948 = FixSLA(x947,Const(2))
              [x567] 0: x948
              Unrolling x568 = FixSub(x564,x566)
              x949 = FixSub(x945,x947)
              [x568] 0: x949
              Access: x569
              Memory: x539
              Iterators between x569 and x539: b57, b473
              Unroll: Map(b50 -> List(0), b57 -> List(0))
              uids:List(List(0, 0))
              Unrolling x569 = RegRead(x539)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                x950 = RegRead(x916)
              Unrolling x570 = FixAdd(x568,x569)
              x951 = FixAdd(x949,x950)
              [x570] 0: x951
              Unrolling x571 = FixAdd(x570,Const(15))
              x952 = FixAdd(x951,Const(15))
              [x571] 0: x952
              Unrolling x572 = FixDivSRA(x571,Const(4))
              x953 = FixDivSRA(x952,Const(4))
              [x572] 0: x953
              Unrolling x573 = FixSLA(x572,Const(4))
              x954 = FixSLA(x953,Const(4))
              [x573] 0: x954
              Unrolling x574 = FixSLA(x573,Const(2))
              x955 = FixSLA(x954,Const(2))
              [x574] 0: x955
              Unrolling x575 = FixToFix(x567,TRUE,_64,_0)
              x956 = FixToFix(x948,TRUE,_64,_0)
              [x575] 0: x956
              Unrolling x576 = DRAMAddress(x526)
              x957 = DRAMAddress(x900)
              [x576] 0: x957
              Unrolling x577 = FixAdd(x575,x576)
              x958 = FixAdd(x956,x957)
              [x577] 0: x958
              Unrolling x578 = SimpleStruct(ArrayBuffer((offset,x577), (size,x574), (isLoad,Const(true))))
              x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x955), (isLoad,Const(true))))
              [x578] 0: x959
              Unrolling x579 = DRAMIsAlloc(x526)
              x960 = DRAMIsAlloc(x900)
              [x579] 0: x960
              Access: x580
              Memory: x556
              Iterators between x580 and x556: b473
              Unroll: Map(b50 -> List(0), b57 -> List(0))
              uids:List(List(0))
              Unrolling x580 = StreamOutWrite(x556,x578,Set(x579))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
              Unrolling x581 = SimpleStruct(ArrayBuffer((size,x573), (start,x568), (end,x570)))
              x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
              [x581] 0: x962
              Access: x582
              Memory: x557
              Iterators between x582 and x557: b473
              Unroll: Map(b50 -> List(0), b57 -> List(0))
              uids:List(List(0))
              Unrolling x582 = FIFOEnq(x557,x581,Set(Const(true)))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
            Created foreach x964 = UnrolledForeach(Set(),x939,Block(Const(())),List(List(b940)),List(List(b941)),None)
            [x583] 0: Const(())
            Unrolling x584 = FringeDenseLoad(x526,x556,x558)
            x965 = FringeDenseLoad(x900,x935,x937)
            [x584] 0: x965
            Unrolling x585 = CounterNew(Const(0),x555,Const(1),Const(1))
            x966 = CounterNew(Const(0),x933,Const(1),Const(1))
            [x585] 0: x966
            Unrolling x586 = CounterChainNew(List(x585))
            x967 = CounterChainNew(List(x966))
            [x586] 0: x967
            Unrolling x610 = OpForeach(Set(),x586,Block(Const(())),List(b477),None)
            x610 = OpForeach(Set(),x586,Block(Const(())),List(b477),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x611),false)
            Unrolling foreach x610
              Duplicating x587 = RegNew(Const(0))
                #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                x970 = RegNew(Const(0))
                Registering duplicates for memory: x587
                (x587,0) -> x970
              Duplicating x588 = RegNew(Const(0))
                #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                x971 = RegNew(Const(0))
                Registering duplicates for memory: x588
                (x588,0) -> x971
              Duplicating x589 = RegNew(Const(0))
                #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                x972 = RegNew(Const(0))
                Registering duplicates for memory: x589
                (x589,0) -> x972
              Unrolling x597 = UnitPipe(Set(),Block(Const(())),None)
              x597 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x610,x967,List(b477),false,true)
                Access: x590
                Memory: x557
                Iterators between x590 and x557: b477
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List(0))
                Unrolling x590 = FIFODeq(x557,Set(Const(true)))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                Unrolling x591 = FieldApply(x590,start)
                x975 = FieldApply(x974,start)
                [x591] 0: x975
                Access: x592
                Memory: x587
                Iterators between x592 and x587: 
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List())
                Unrolling x592 = RegWrite(x587,x591,Set())
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x976 = RegWrite(x970,x975,Set())
                Unrolling x593 = FieldApply(x590,end)
                x977 = FieldApply(x974,end)
                [x593] 0: x977
                Access: x594
                Memory: x588
                Iterators between x594 and x588: 
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List())
                Unrolling x594 = RegWrite(x588,x593,Set())
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x978 = RegWrite(x971,x977,Set())
                Unrolling x595 = FieldApply(x590,size)
                x979 = FieldApply(x974,size)
                [x595] 0: x979
                Access: x596
                Memory: x589
                Iterators between x596 and x589: 
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List())
                Unrolling x596 = RegWrite(x589,x595,Set())
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x980 = RegWrite(x972,x979,Set())
              [x597] 0: Const(())
              Access: x598
              Memory: x589
              Iterators between x598 and x589: 
              Unroll: Map(b50 -> List(0), b57 -> List(0))
              uids:List(List())
              Unrolling x598 = RegRead(x589)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x982 = RegRead(x972)
              Unrolling x599 = CounterNew(Const(0),x598,Const(1),Const(1))
              x983 = CounterNew(Const(0),x982,Const(1),Const(1))
              [x599] 0: x983
              Unrolling x600 = CounterChainNew(List(x599))
              x984 = CounterChainNew(List(x983))
              [x600] 0: x984
              Unrolling x609 = OpForeach(Set(),x600,Block(Const(())),List(b223),None)
              x609 = OpForeach(Set(),x600,Block(Const(())),List(b223),None) [duplicate 1/1] in lanes PartialUnroller(x610,x967,List(b477),false,true)
              Unrolling foreach x609
                Access: x601
                Memory: x587
                Iterators between x601 and x587: b223
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List(0))
                Unrolling x601 = RegRead(x587)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x987 = RegRead(x970)
                Unrolling x602 = FixLeq(x601,b223)
                x988 = FixLeq(x987,b985)
                [x602] 0: x988
                Access: x603
                Memory: x588
                Iterators between x603 and x588: b223
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List(0))
                Unrolling x603 = RegRead(x588)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x989 = RegRead(x971)
                Unrolling x604 = FixLst(b223,x603)
                x990 = FixLst(b985,x989)
                [x604] 0: x990
                Unrolling x605 = And(x602,x604)
                x991 = And(x988,x990)
                [x605] 0: x991
                Unrolling x606 = FixSub(b223,x601)
                x992 = FixSub(b985,x987)
                [x606] 0: x992
                Access: x607
                Memory: x558
                Iterators between x607 and x558: b477, b223
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List(0, 0))
                Unrolling x607 = StreamInRead(x558,Set())
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
                Access: x608
                Memory: x554
                Iterators between x608 and x554: b477, b223
                Unroll: Map(b50 -> List(0), b57 -> List(0), b477 -> List(0))
                uids:List(List(0, 0))
                Unrolling x608 = SRAMWrite(x554,x607,List(b477, x606),Set(x605))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                a2 = 
                  lane 0 (castgrp/broadcast 0/0) = List(b968, x992)
                  Masters: Vector(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x999 = SRAMBankedWrite(x934,Vector(x994),Vector(List(x995, Const(0))),Vector(x998),Vector(Set(x991, b986, b969)))
              Created foreach x1000 = UnrolledForeach(Set(b969),x984,Block(Const(())),List(List(b985)),List(List(b986)),None)
              [x609] 0: Const(())
            Created foreach x1001 = UnrolledForeach(Set(),x967,Block(Const(())),List(List(b968)),List(List(b969)),None)
            [x610] 0: Const(())
          [x611] 0: Const(())
          Unrolling x613 = CounterNew(Const(0),x612,Const(16),Const(1))
          x1003 = CounterNew(Const(0),x926,Const(16),Const(1))
          [x613] 0: x1003
          Unrolling x614 = CounterChainNew(List(x613))
          x1004 = CounterChainNew(List(x1003))
          [x614] 0: x1004
          Unrolling x807 = OpForeach(Set(),x614,Block(Const(())),List(b69),None)
          x807 = OpForeach(Set(),x614,Block(Const(())),List(b69),None) [duplicate 1/1] in lanes PartialUnroller(x808,x923,List(b57),false,true)
          Unrolling foreach x807
            Access: x623
            Memory: x539
            Iterators between x623 and x539: b57, b69
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List(0, 0))
            Unrolling x623 = RegRead(x539)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
              x1007 = RegRead(x916)
            Access: x680
            Memory: x548
            Iterators between x680 and x548: b69
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List(0))
            Unrolling x680 = RegRead(x548)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(2),0,2,ArrayBuffer(2),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
              x1008 = RegRead(x927)
            Access: x737
            Memory: x548
            Iterators between x737 and x548: 
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List())
            Unrolling x737 = RegRead(x548)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1009 = RegRead(x927)
            Access: x755
            Memory: x548
            Iterators between x755 and x548: b69
            Unroll: Map(b50 -> List(0), b57 -> List(0))
            uids:List(List(0))
            Unrolling x755 = RegRead(x548)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(2),0,1,ArrayBuffer(1),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
              x1010 = RegRead(x927)
            Duplicating x615 = RegNew(Const(0))
              #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),5,List(),None)
              x1011 = RegNew(Const(0))
              Registering duplicates for memory: x615
              (x615,0) -> x1011
            Unrolling x620 = UnitPipe(Set(),Block(Const(())),None)
            x620 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x807,x1004,List(b69),false,true)
              Access: x616
              Memory: x505
              Iterators between x616 and x505: b50, b57, b69
              Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
              uids:List(List(0, 0, 0))
              Unrolling x616 = RegRead(x505)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(3))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                x1012 = RegRead(x879)
              Unrolling x617 = FixSub(x616,b69)
              x1013 = FixSub(x1012,b1005)
              [x617] 0: x1013
              Unrolling x618 = FixMin(Const(16),x617)
              x1014 = FixMin(Const(16),x1013)
              [x618] 0: x1014
              Access: x619
              Memory: x615
              Iterators between x619 and x615: 
              Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
              uids:List(List())
              Unrolling x619 = RegWrite(x615,x618,Set())
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1015 = RegWrite(x1011,x1014,Set())
            [x620] 0: Const(())
            Duplicating x621 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
              #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks), Dims {1}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks)),3,List(0, 0),None)
              x1017 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
              Registering duplicates for memory: x621
              (x621,0) -> x1017
            Duplicating x622 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
              #0: Memory(List(Dims {0}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks), Dims {1}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks)),2,List(0, 0),Fold)
              x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
              #1: Memory(List(Dims {0}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks), Dims {1}: Cyclic: N=4, B=1, alpha=<1>, P=<4> (30 solutions, 7 checks)),3,List(0, 0),Fold)
              x1019 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]])
              Registering duplicates for memory: x622
              (x622,0) -> x1018
              (x622,1) -> x1019
            Unrolling x679 = UnitPipe(Set(),Block(Const(())),None)
            x679 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x807,x1004,List(b69),false,true)
              Duplicating x625 = FIFONew(Const(16))
                #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),None)
                x1021 = FIFONew(Const(16))
                Registering duplicates for memory: x625
                (x625,0) -> x1021
              Unrolling x627 = CounterNew(Const(0),x623,Const(1),Const(1))
              x1023 = CounterNew(Const(0),x1007,Const(1),Const(1))
              [x627] 0: x1023
              Unrolling x628 = CounterChainNew(List(x627))
              x1024 = CounterChainNew(List(x1023))
              [x628] 0: x1024
              Unrolling x651 = OpForeach(Set(),x628,Block(Const(())),List(b482),None)
              x651 = OpForeach(Set(),x628,Block(Const(())),List(b482),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x679),false)
              Unrolling foreach x651
                Unrolling x629 = FixAdd(b50,b482)
                x1027 = FixAdd(b913,b1025)
                [x629] 0: x1027
                Access: x630
                Memory: x505
                Iterators between x630 and x505: b50, b57, b69, b482
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0, 0, 0, 0))
                Unrolling x630 = RegRead(x505)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                  x1028 = RegRead(x879)
                Unrolling x631 = FixMul(x629,x630)
                x1029 = FixMul(x1027,x1028)
                [x631] 0: x1029
                Unrolling x632 = FixAdd(x631,b69)
                x1030 = FixAdd(x1029,b1005)
                [x632] 0: x1030
                Unrolling x633 = FixDivSRA(x632,Const(4))
                x1031 = FixDivSRA(x1030,Const(4))
                [x633] 0: x1031
                Unrolling x634 = FixSLA(x633,Const(4))
                x1032 = FixSLA(x1031,Const(4))
                [x634] 0: x1032
                Unrolling x635 = FixSLA(x634,Const(2))
                x1033 = FixSLA(x1032,Const(2))
                [x635] 0: x1033
                Unrolling x636 = FixSub(x632,x634)
                x1034 = FixSub(x1030,x1032)
                [x636] 0: x1034
                Access: x637
                Memory: x615
                Iterators between x637 and x615: b482
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x637 = RegRead(x615)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1035 = RegRead(x1011)
                Unrolling x638 = FixAdd(x636,x637)
                x1036 = FixAdd(x1034,x1035)
                [x638] 0: x1036
                Unrolling x639 = FixAdd(x638,Const(15))
                x1037 = FixAdd(x1036,Const(15))
                [x639] 0: x1037
                Unrolling x640 = FixDivSRA(x639,Const(4))
                x1038 = FixDivSRA(x1037,Const(4))
                [x640] 0: x1038
                Unrolling x641 = FixSLA(x640,Const(4))
                x1039 = FixSLA(x1038,Const(4))
                [x641] 0: x1039
                Unrolling x642 = FixSLA(x641,Const(2))
                x1040 = FixSLA(x1039,Const(2))
                [x642] 0: x1040
                Unrolling x643 = FixToFix(x635,TRUE,_64,_0)
                x1041 = FixToFix(x1033,TRUE,_64,_0)
                [x643] 0: x1041
                Unrolling x644 = DRAMAddress(x529)
                x1042 = DRAMAddress(x903)
                [x644] 0: x1042
                Unrolling x645 = FixAdd(x643,x644)
                x1043 = FixAdd(x1041,x1042)
                [x645] 0: x1043
                Unrolling x646 = SimpleStruct(ArrayBuffer((offset,x645), (size,x642), (isLoad,Const(true))))
                x1044 = SimpleStruct(ArrayBuffer((offset,x1043), (size,x1040), (isLoad,Const(true))))
                [x646] 0: x1044
                Unrolling x647 = DRAMIsAlloc(x529)
                x1045 = DRAMIsAlloc(x903)
                [x647] 0: x1045
                Access: x648
                Memory: x624
                Iterators between x648 and x624: b482
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x648 = StreamOutWrite(x624,x646,Set(x647))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1046 = StreamOutBankedWrite(x1020,ArrayBuffer(x1044),ArrayBuffer(Set(x1045, b1026)))
                Unrolling x649 = SimpleStruct(ArrayBuffer((size,x641), (start,x636), (end,x638)))
                x1047 = SimpleStruct(ArrayBuffer((size,x1039), (start,x1034), (end,x1036)))
                [x649] 0: x1047
                Access: x650
                Memory: x625
                Iterators between x650 and x625: b482
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x650 = FIFOEnq(x625,x649,Set(Const(true)))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1048 = FIFOBankedEnq(x1021,ArrayBuffer(x1047),ArrayBuffer(Set(Const(true), b1026)))
              Created foreach x1049 = UnrolledForeach(Set(),x1024,Block(Const(())),List(List(b1025)),List(List(b1026)),None)
              [x651] 0: Const(())
              Unrolling x652 = FringeDenseLoad(x529,x624,x626)
              x1050 = FringeDenseLoad(x903,x1020,x1022)
              [x652] 0: x1050
              Unrolling x653 = CounterNew(Const(0),x623,Const(1),Const(1))
              x1051 = CounterNew(Const(0),x1007,Const(1),Const(1))
              [x653] 0: x1051
              Unrolling x654 = CounterChainNew(List(x653))
              x1052 = CounterChainNew(List(x1051))
              [x654] 0: x1052
              Unrolling x678 = OpForeach(Set(),x654,Block(Const(())),List(b486),None)
              x678 = OpForeach(Set(),x654,Block(Const(())),List(b486),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x679),false)
              Unrolling foreach x678
                Duplicating x655 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1055 = RegNew(Const(0))
                  Registering duplicates for memory: x655
                  (x655,0) -> x1055
                Duplicating x656 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1056 = RegNew(Const(0))
                  Registering duplicates for memory: x656
                  (x656,0) -> x1056
                Duplicating x657 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1057 = RegNew(Const(0))
                  Registering duplicates for memory: x657
                  (x657,0) -> x1057
                Unrolling x665 = UnitPipe(Set(),Block(Const(())),None)
                x665 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x678,x1052,List(b486),false,true)
                  Access: x658
                  Memory: x625
                  Iterators between x658 and x625: b486
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List(0))
                  Unrolling x658 = FIFODeq(x625,Set(Const(true)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1058 = FIFOBankedDeq(x1021,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  Unrolling x659 = FieldApply(x658,start)
                  x1060 = FieldApply(x1059,start)
                  [x659] 0: x1060
                  Access: x660
                  Memory: x655
                  Iterators between x660 and x655: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List())
                  Unrolling x660 = RegWrite(x655,x659,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1061 = RegWrite(x1055,x1060,Set())
                  Unrolling x661 = FieldApply(x658,end)
                  x1062 = FieldApply(x1059,end)
                  [x661] 0: x1062
                  Access: x662
                  Memory: x656
                  Iterators between x662 and x656: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List())
                  Unrolling x662 = RegWrite(x656,x661,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1063 = RegWrite(x1056,x1062,Set())
                  Unrolling x663 = FieldApply(x658,size)
                  x1064 = FieldApply(x1059,size)
                  [x663] 0: x1064
                  Access: x664
                  Memory: x657
                  Iterators between x664 and x657: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List())
                  Unrolling x664 = RegWrite(x657,x663,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1065 = RegWrite(x1057,x1064,Set())
                [x665] 0: Const(())
                Access: x666
                Memory: x657
                Iterators between x666 and x657: 
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List())
                Unrolling x666 = RegRead(x657)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1067 = RegRead(x1057)
                Unrolling x667 = CounterNew(Const(0),x666,Const(1),Const(1))
                x1068 = CounterNew(Const(0),x1067,Const(1),Const(1))
                [x667] 0: x1068
                Unrolling x668 = CounterChainNew(List(x667))
                x1069 = CounterChainNew(List(x1068))
                [x668] 0: x1069
                Unrolling x677 = OpForeach(Set(),x668,Block(Const(())),List(b289),None)
                x677 = OpForeach(Set(),x668,Block(Const(())),List(b289),None) [duplicate 1/1] in lanes PartialUnroller(x678,x1052,List(b486),false,true)
                Unrolling foreach x677
                  Access: x669
                  Memory: x655
                  Iterators between x669 and x655: b289
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List(0))
                  Unrolling x669 = RegRead(x655)
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1072 = RegRead(x1055)
                  Unrolling x670 = FixLeq(x669,b289)
                  x1073 = FixLeq(x1072,b1070)
                  [x670] 0: x1073
                  Access: x671
                  Memory: x656
                  Iterators between x671 and x656: b289
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List(0))
                  Unrolling x671 = RegRead(x656)
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1074 = RegRead(x1056)
                  Unrolling x672 = FixLst(b289,x671)
                  x1075 = FixLst(b1070,x1074)
                  [x672] 0: x1075
                  Unrolling x673 = And(x670,x672)
                  x1076 = And(x1073,x1075)
                  [x673] 0: x1076
                  Unrolling x674 = FixSub(b289,x669)
                  x1077 = FixSub(b1070,x1072)
                  [x674] 0: x1077
                  Access: x675
                  Memory: x626
                  Iterators between x675 and x626: b486, b289
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List(0, 0))
                  Unrolling x675 = StreamInRead(x626,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1078 = StreamInBankedRead(x1022,ArrayBuffer(Set(b1071, b1054)))
                  Access: x676
                  Memory: x621
                  Iterators between x676 and x621: b486, b289
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b486 -> List(0))
                  uids:List(List(0, 0))
                  Unrolling x676 = SRAMWrite(x621,x675,List(b486, x674),Set(x673))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1053, x1077)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1084 = SRAMBankedWrite(x1017,Vector(x1079),Vector(List(Const(0), x1080)),Vector(x1083),Vector(Set(x1076, b1071, b1054)))
                Created foreach x1085 = UnrolledForeach(Set(b1054),x1069,Block(Const(())),List(List(b1070)),List(List(b1071)),None)
                [x677] 0: Const(())
              Created foreach x1086 = UnrolledForeach(Set(),x1052,Block(Const(())),List(List(b1053)),List(List(b1054)),None)
              [x678] 0: Const(())
            [x679] 0: Const(())
            Unrolling x736 = UnitPipe(Set(),Block(Const(())),None)
            x736 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x807,x1004,List(b69),false,true)
              Duplicating x682 = FIFONew(Const(16))
                #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),None)
                x1089 = FIFONew(Const(16))
                Registering duplicates for memory: x682
                (x682,0) -> x1089
              Unrolling x684 = CounterNew(Const(0),x680,Const(1),Const(1))
              x1091 = CounterNew(Const(0),x1008,Const(1),Const(1))
              [x684] 0: x1091
              Unrolling x685 = CounterChainNew(List(x684))
              x1092 = CounterChainNew(List(x1091))
              [x685] 0: x1092
              Unrolling x708 = OpForeach(Set(),x685,Block(Const(())),List(b491),None)
              x708 = OpForeach(Set(),x685,Block(Const(())),List(b491),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x736),false)
              Unrolling foreach x708
                Unrolling x686 = FixAdd(b57,b491)
                x1095 = FixAdd(b924,b1093)
                [x686] 0: x1095
                Access: x687
                Memory: x505
                Iterators between x687 and x505: b50, b57, b69, b491
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0, 0, 0, 0))
                Unrolling x687 = RegRead(x505)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1096 = RegRead(x879)
                Unrolling x688 = FixMul(x686,x687)
                x1097 = FixMul(x1095,x1096)
                [x688] 0: x1097
                Unrolling x689 = FixAdd(x688,b69)
                x1098 = FixAdd(x1097,b1005)
                [x689] 0: x1098
                Unrolling x690 = FixDivSRA(x689,Const(4))
                x1099 = FixDivSRA(x1098,Const(4))
                [x690] 0: x1099
                Unrolling x691 = FixSLA(x690,Const(4))
                x1100 = FixSLA(x1099,Const(4))
                [x691] 0: x1100
                Unrolling x692 = FixSLA(x691,Const(2))
                x1101 = FixSLA(x1100,Const(2))
                [x692] 0: x1101
                Unrolling x693 = FixSub(x689,x691)
                x1102 = FixSub(x1098,x1100)
                [x693] 0: x1102
                Access: x694
                Memory: x615
                Iterators between x694 and x615: b491
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x694 = RegRead(x615)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1103 = RegRead(x1011)
                Unrolling x695 = FixAdd(x693,x694)
                x1104 = FixAdd(x1102,x1103)
                [x695] 0: x1104
                Unrolling x696 = FixAdd(x695,Const(15))
                x1105 = FixAdd(x1104,Const(15))
                [x696] 0: x1105
                Unrolling x697 = FixDivSRA(x696,Const(4))
                x1106 = FixDivSRA(x1105,Const(4))
                [x697] 0: x1106
                Unrolling x698 = FixSLA(x697,Const(4))
                x1107 = FixSLA(x1106,Const(4))
                [x698] 0: x1107
                Unrolling x699 = FixSLA(x698,Const(2))
                x1108 = FixSLA(x1107,Const(2))
                [x699] 0: x1108
                Unrolling x700 = FixToFix(x692,TRUE,_64,_0)
                x1109 = FixToFix(x1101,TRUE,_64,_0)
                [x700] 0: x1109
                Unrolling x701 = DRAMAddress(x532)
                x1110 = DRAMAddress(x906)
                [x701] 0: x1110
                Unrolling x702 = FixAdd(x700,x701)
                x1111 = FixAdd(x1109,x1110)
                [x702] 0: x1111
                Unrolling x703 = SimpleStruct(ArrayBuffer((offset,x702), (size,x699), (isLoad,Const(true))))
                x1112 = SimpleStruct(ArrayBuffer((offset,x1111), (size,x1108), (isLoad,Const(true))))
                [x703] 0: x1112
                Unrolling x704 = DRAMIsAlloc(x532)
                x1113 = DRAMIsAlloc(x906)
                [x704] 0: x1113
                Access: x705
                Memory: x681
                Iterators between x705 and x681: b491
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x705 = StreamOutWrite(x681,x703,Set(x704))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1114 = StreamOutBankedWrite(x1088,ArrayBuffer(x1112),ArrayBuffer(Set(x1113, b1094)))
                Unrolling x706 = SimpleStruct(ArrayBuffer((size,x698), (start,x693), (end,x695)))
                x1115 = SimpleStruct(ArrayBuffer((size,x1107), (start,x1102), (end,x1104)))
                [x706] 0: x1115
                Access: x707
                Memory: x682
                Iterators between x707 and x682: b491
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List(0))
                Unrolling x707 = FIFOEnq(x682,x706,Set(Const(true)))
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1116 = FIFOBankedEnq(x1089,ArrayBuffer(x1115),ArrayBuffer(Set(Const(true), b1094)))
              Created foreach x1117 = UnrolledForeach(Set(),x1092,Block(Const(())),List(List(b1093)),List(List(b1094)),None)
              [x708] 0: Const(())
              Unrolling x709 = FringeDenseLoad(x532,x681,x683)
              x1118 = FringeDenseLoad(x906,x1088,x1090)
              [x709] 0: x1118
              Unrolling x710 = CounterNew(Const(0),x680,Const(1),Const(1))
              x1119 = CounterNew(Const(0),x1008,Const(1),Const(1))
              [x710] 0: x1119
              Unrolling x711 = CounterChainNew(List(x710))
              x1120 = CounterChainNew(List(x1119))
              [x711] 0: x1120
              Unrolling x735 = OpForeach(Set(),x711,Block(Const(())),List(b495),None)
              x735 = OpForeach(Set(),x711,Block(Const(())),List(b495),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x736),false)
              Unrolling foreach x735
                Duplicating x712 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1123 = RegNew(Const(0))
                  Registering duplicates for memory: x712
                  (x712,0) -> x1123
                Duplicating x713 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1124 = RegNew(Const(0))
                  Registering duplicates for memory: x713
                  (x713,0) -> x1124
                Duplicating x714 = RegNew(Const(0))
                  #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                  x1125 = RegNew(Const(0))
                  Registering duplicates for memory: x714
                  (x714,0) -> x1125
                Unrolling x722 = UnitPipe(Set(),Block(Const(())),None)
                x722 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x735,x1120,List(b495),false,true)
                  Access: x715
                  Memory: x682
                  Iterators between x715 and x682: b495
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List(0))
                  Unrolling x715 = FIFODeq(x682,Set(Const(true)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1126 = FIFOBankedDeq(x1089,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  Unrolling x716 = FieldApply(x715,start)
                  x1128 = FieldApply(x1127,start)
                  [x716] 0: x1128
                  Access: x717
                  Memory: x712
                  Iterators between x717 and x712: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List())
                  Unrolling x717 = RegWrite(x712,x716,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1129 = RegWrite(x1123,x1128,Set())
                  Unrolling x718 = FieldApply(x715,end)
                  x1130 = FieldApply(x1127,end)
                  [x718] 0: x1130
                  Access: x719
                  Memory: x713
                  Iterators between x719 and x713: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List())
                  Unrolling x719 = RegWrite(x713,x718,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1131 = RegWrite(x1124,x1130,Set())
                  Unrolling x720 = FieldApply(x715,size)
                  x1132 = FieldApply(x1127,size)
                  [x720] 0: x1132
                  Access: x721
                  Memory: x714
                  Iterators between x721 and x714: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List())
                  Unrolling x721 = RegWrite(x714,x720,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1133 = RegWrite(x1125,x1132,Set())
                [x722] 0: Const(())
                Access: x723
                Memory: x714
                Iterators between x723 and x714: 
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
                uids:List(List())
                Unrolling x723 = RegRead(x714)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1135 = RegRead(x1125)
                Unrolling x724 = CounterNew(Const(0),x723,Const(1),Const(1))
                x1136 = CounterNew(Const(0),x1135,Const(1),Const(1))
                [x724] 0: x1136
                Unrolling x725 = CounterChainNew(List(x724))
                x1137 = CounterChainNew(List(x1136))
                [x725] 0: x1137
                Unrolling x734 = OpForeach(Set(),x725,Block(Const(())),List(b352),None)
                x734 = OpForeach(Set(),x725,Block(Const(())),List(b352),None) [duplicate 1/1] in lanes PartialUnroller(x735,x1120,List(b495),false,true)
                Unrolling foreach x734
                  Access: x726
                  Memory: x712
                  Iterators between x726 and x712: b352
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List(0))
                  Unrolling x726 = RegRead(x712)
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1140 = RegRead(x1123)
                  Unrolling x727 = FixLeq(x726,b352)
                  x1141 = FixLeq(x1140,b1138)
                  [x727] 0: x1141
                  Access: x728
                  Memory: x713
                  Iterators between x728 and x713: b352
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List(0))
                  Unrolling x728 = RegRead(x713)
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1142 = RegRead(x1124)
                  Unrolling x729 = FixLst(b352,x728)
                  x1143 = FixLst(b1138,x1142)
                  [x729] 0: x1143
                  Unrolling x730 = And(x727,x729)
                  x1144 = And(x1141,x1143)
                  [x730] 0: x1144
                  Unrolling x731 = FixSub(b352,x726)
                  x1145 = FixSub(b1138,x1140)
                  [x731] 0: x1145
                  Access: x732
                  Memory: x683
                  Iterators between x732 and x683: b495, b352
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List(0, 0))
                  Unrolling x732 = StreamInRead(x683,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1146 = StreamInBankedRead(x1090,ArrayBuffer(Set(b1139, b1122)))
                  Access: x733
                  Memory: x622
                  Iterators between x733 and x622: b495, b352
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b495 -> List(0))
                  uids:List(List(0, 0))
                  Unrolling x733 = SRAMWrite(x622,x732,List(b495, x731),Set(x730))
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1121, x1145)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1154 = SRAMBankedWrite(x1019,Vector(x1147),Vector(List(x1148, x1149)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1121, x1145)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1155 = SRAMBankedWrite(x1018,Vector(x1147),Vector(List(x1148, x1149)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                Created foreach x1156 = UnrolledForeach(Set(b1122),x1137,Block(Const(())),List(List(b1138)),List(List(b1139)),None)
                [x734] 0: Const(())
              Created foreach x1157 = UnrolledForeach(Set(),x1120,Block(Const(())),List(List(b1121)),List(List(b1122)),None)
              [x735] 0: Const(())
            [x736] 0: Const(())
            Unrolling x738 = CounterNew(Const(0),x737,Const(1),Const(4))
            x1159 = CounterNew(Const(0),x1009,Const(1),Const(4))
            [x738] 0: x1159
            Unrolling x739 = CounterChainNew(List(x738))
            x1160 = CounterChainNew(List(x1159))
            [x739] 0: x1160
            Unrolling x754 = OpForeach(Set(),x739,Block(Const(())),List(b84),None)
            x754 = OpForeach(Set(),x739,Block(Const(())),List(b84),None) [duplicate 1/1] in lanes PartialUnroller(x807,x1004,List(b69),false,true)
            Unrolling foreach x754
              Access: x740
              Memory: x615
              Iterators between x740 and x615: 
              Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0))
              uids:List(List())
              uids:List(List())
              uids:List(List())
              uids:List(List())
              Unrolling x740 = RegRead(x615)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(3),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1169 = RegRead(x1011)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(1)
                Port:     Port(Some(3),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1170 = RegRead(x1011)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(2)
                Port:     Port(Some(3),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(2) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1171 = RegRead(x1011)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(3)
                Port:     Port(Some(3),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(3) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1172 = RegRead(x1011)
              Unrolling x741 = CounterNew(Const(0),x740,Const(1),Const(4))
              Lane #List(0): 
              x1173 = CounterNew(Const(0),x1169,Const(1),Const(4))
              Lane #List(1): 
              x1174 = CounterNew(Const(0),x1170,Const(1),Const(4))
              Lane #List(2): 
              x1175 = CounterNew(Const(0),x1171,Const(1),Const(4))
              Lane #List(3): 
              x1176 = CounterNew(Const(0),x1172,Const(1),Const(4))
              [x741] 0: x1173, 1: x1174, 2: x1175, 3: x1176
              Unrolling x742 = CounterChainNew(List(x741))
              Lane #List(0): 
              x1177 = CounterChainNew(List(x1173))
              Lane #List(1): 
              x1178 = CounterChainNew(List(x1174))
              Lane #List(2): 
              x1179 = CounterChainNew(List(x1175))
              Lane #List(3): 
              x1180 = CounterChainNew(List(x1176))
              [x742] 0: x1177, 1: x1178, 2: x1179, 3: x1180
              Unrolling x753 = OpForeach(Set(),x742,Block(Const(())),List(b87),None)
              Duplicating controller x753 = OpForeach(Set(),x742,Block(Const(())),List(b87),None) in lanes PartialUnroller(x754,x1160,List(b84),false,true)
                x743 = RegRead(x539) [x743]
                x744 = CounterNew(Const(0),x743,Const(1),Const(1)) [x744]
                x745 = CounterChainNew(List(x744)) [x745]
                x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) [x752]
              
              Unrolling foreach x753
                Access: x743
                Memory: x539
                Iterators between x743 and x539: b57, b69, b84
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b84 -> List(0))
                uids:List(List(0, 0, 0))
                uids:List(List(0, 0, 0))
                uids:List(List(0, 0, 0))
                uids:List(List(0, 0, 0))
                Unrolling x743 = RegRead(x539)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1189 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(1)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1190 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(2)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(2) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1191 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(3)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  Masters: ArrayBuffer(3) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                  x1192 = RegRead(x916)
                Unrolling x744 = CounterNew(Const(0),x743,Const(1),Const(1))
                Lane #List(0): 
                x1193 = CounterNew(Const(0),x1189,Const(1),Const(1))
                Lane #List(1): 
                x1194 = CounterNew(Const(0),x1190,Const(1),Const(1))
                Lane #List(2): 
                x1195 = CounterNew(Const(0),x1191,Const(1),Const(1))
                Lane #List(3): 
                x1196 = CounterNew(Const(0),x1192,Const(1),Const(1))
                [x744] 0: x1193, 1: x1194, 2: x1195, 3: x1196
                Unrolling x745 = CounterChainNew(List(x744))
                Lane #List(0): 
                x1197 = CounterChainNew(List(x1193))
                Lane #List(1): 
                x1198 = CounterChainNew(List(x1194))
                Lane #List(2): 
                x1199 = CounterChainNew(List(x1195))
                Lane #List(3): 
                x1200 = CounterChainNew(List(x1196))
                [x745] 0: x1197, 1: x1198, 2: x1199, 3: x1200
                Unrolling x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None)
                Duplicating controller x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) in lanes PartialUnroller(x753,x1177,List(b87),false,true)
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 0, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1161, b1181)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1209 = SRAMBankedRead(x1018,Vector(List(x1203, x1204)),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 0, 0, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1161, b1201)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1213 = SRAMBankedRead(x934,Vector(List(x1203, Const(0))),Vector(x1212),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 0, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1201, b1181)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1217 = SRAMBankedRead(x1017,Vector(List(Const(0), x1204)),Vector(x1216),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1219 = FixMul(x1214,x1218)
                  [x749] 0: x1219
                  Unrolling x750 = FixAdd(x746,x749)
                  x1220 = FixAdd(x1210,x1219)
                  [x750] 0: x1220
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 0, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1161, b1181)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1221 = SRAMBankedWrite(x1019,Vector(x1220),Vector(List(x1203, x1204)),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/0) = List(b1161, b1181)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(x1203, x1204)),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                Created foreach x1223 = UnrolledForeach(Set(b925, b1006, b1185, b914, b1165),x1197,Block(Const(())),List(List(b1201)),List(List(b1202)),None)
                  x752 duplicate #List(1)/4 = x1223
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 1, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/0) = List(b1161, b1182)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
                    x1232 = SRAMBankedRead(x1018,Vector(List(x1226, x1227)),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 0, 1, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/1) = List(b1161, b1224)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                    x1236 = SRAMBankedRead(x934,Vector(List(x1226, Const(0))),Vector(x1235),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 1, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,1,ArrayBuffer(1),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/0) = List(b1224, b1182)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
                    x1240 = SRAMBankedRead(x1017,Vector(List(Const(0), x1227)),Vector(x1239),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1242 = FixMul(x1237,x1241)
                  [x749] 0: x1242
                  Unrolling x750 = FixAdd(x746,x749)
                  x1243 = FixAdd(x1233,x1242)
                  [x750] 0: x1243
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 1, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/0) = List(b1161, b1182)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
                    x1244 = SRAMBankedWrite(x1019,Vector(x1243),Vector(List(x1226, x1227)),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/0) = List(b1161, b1182)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
                    x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(x1226, x1227)),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                Created foreach x1246 = UnrolledForeach(Set(b925, b1006, b1186, b914, b1165),x1198,Block(Const(())),List(List(b1224)),List(List(b1225)),None)
                  x752 duplicate #List(2)/4 = x1246
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 2, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/0) = List(b1161, b1183)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                    x1255 = SRAMBankedRead(x1018,Vector(List(x1249, x1250)),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 0, 2, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/2) = List(b1161, b1247)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                    x1259 = SRAMBankedRead(x934,Vector(List(x1249, Const(0))),Vector(x1258),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 2, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,2,ArrayBuffer(2),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/0) = List(b1247, b1183)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                    x1263 = SRAMBankedRead(x1017,Vector(List(Const(0), x1250)),Vector(x1262),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1265 = FixMul(x1260,x1264)
                  [x749] 0: x1265
                  Unrolling x750 = FixAdd(x746,x749)
                  x1266 = FixAdd(x1256,x1265)
                  [x750] 0: x1266
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 2, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/0) = List(b1161, b1183)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                    x1267 = SRAMBankedWrite(x1019,Vector(x1266),Vector(List(x1249, x1250)),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/0) = List(b1161, b1183)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                    x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(x1249, x1250)),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                Created foreach x1269 = UnrolledForeach(Set(b925, b1006, b1187, b914, b1165),x1199,Block(Const(())),List(List(b1247)),List(List(b1248)),None)
                  x752 duplicate #List(3)/4 = x1269
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 3, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/0) = List(b1161, b1184)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
                    x1278 = SRAMBankedRead(x1018,Vector(List(x1272, x1273)),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 0, 3, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/3) = List(b1161, b1270)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                    x1282 = SRAMBankedRead(x934,Vector(List(x1272, Const(0))),Vector(x1281),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 3, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,3,ArrayBuffer(3),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/0) = List(b1270, b1184)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
                    x1286 = SRAMBankedRead(x1017,Vector(List(Const(0), x1273)),Vector(x1285),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1288 = FixMul(x1283,x1287)
                  [x749] 0: x1288
                  Unrolling x750 = FixAdd(x746,x749)
                  x1289 = FixAdd(x1279,x1288)
                  [x750] 0: x1289
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(0), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 3, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/0) = List(b1161, b1184)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
                    x1290 = SRAMBankedWrite(x1019,Vector(x1289),Vector(List(x1272, x1273)),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/0) = List(b1161, b1184)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
                    x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(x1272, x1273)),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                Created foreach x1292 = UnrolledForeach(Set(b925, b1006, b1188, b914, b1165),x1200,Block(Const(())),List(List(b1270)),List(List(b1271)),None)
                  x752 duplicate #List(4)/4 = x1292
                [x752] 0: x1293
              Created foreach x1294 = UnrolledForeach(Set(b1165, b1006, b925, b914),x1177,Block(Const(())),List(List(b1181, b1182, b1183, b1184)),List(List(b1185, b1186, b1187, b1188)),None)
                x753 duplicate #List(1)/4 = x1294
                x743 = RegRead(x539) [x743]
                x744 = CounterNew(Const(0),x743,Const(1),Const(1)) [x744]
                x745 = CounterChainNew(List(x744)) [x745]
                x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) [x752]
              
              Unrolling foreach x753
                Access: x743
                Memory: x539
                Iterators between x743 and x539: b57, b69, b84
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b84 -> List(1))
                uids:List(List(0, 0, 1))
                uids:List(List(0, 0, 1))
                uids:List(List(0, 0, 1))
                uids:List(List(0, 0, 1))
                Unrolling x743 = RegRead(x539)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                  x1303 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(1)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                  x1304 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(2)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  Masters: ArrayBuffer(2) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                  x1305 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(3)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  Masters: ArrayBuffer(3) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                  x1306 = RegRead(x916)
                Unrolling x744 = CounterNew(Const(0),x743,Const(1),Const(1))
                Lane #List(0): 
                x1307 = CounterNew(Const(0),x1303,Const(1),Const(1))
                Lane #List(1): 
                x1308 = CounterNew(Const(0),x1304,Const(1),Const(1))
                Lane #List(2): 
                x1309 = CounterNew(Const(0),x1305,Const(1),Const(1))
                Lane #List(3): 
                x1310 = CounterNew(Const(0),x1306,Const(1),Const(1))
                [x744] 0: x1307, 1: x1308, 2: x1309, 3: x1310
                Unrolling x745 = CounterChainNew(List(x744))
                Lane #List(0): 
                x1311 = CounterChainNew(List(x1307))
                Lane #List(1): 
                x1312 = CounterChainNew(List(x1308))
                Lane #List(2): 
                x1313 = CounterChainNew(List(x1309))
                Lane #List(3): 
                x1314 = CounterChainNew(List(x1310))
                [x745] 0: x1311, 1: x1312, 2: x1313, 3: x1314
                Unrolling x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None)
                Duplicating controller x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) in lanes PartialUnroller(x753,x1178,List(b87),false,true)
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(0))
                  uids:List(List(1, 0, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,4,ArrayBuffer(4),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 4/0) = List(b1162, b1295)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
                    x1323 = SRAMBankedRead(x1018,Vector(List(x1317, x1318)),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 1, 0, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/0) = List(b1162, b1315)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
                    x1327 = SRAMBankedRead(x934,Vector(List(x1317, Const(0))),Vector(x1326),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(0))
                  uids:List(List(1, 0, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/1) = List(b1315, b1295)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
                    x1331 = SRAMBankedRead(x1017,Vector(List(Const(0), x1318)),Vector(x1330),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1333 = FixMul(x1328,x1332)
                  [x749] 0: x1333
                  Unrolling x750 = FixAdd(x746,x749)
                  x1334 = FixAdd(x1324,x1333)
                  [x750] 0: x1334
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(0))
                  uids:List(List(1, 0, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,4,ArrayBuffer(4),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 4/0) = List(b1162, b1295)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
                    x1335 = SRAMBankedWrite(x1019,Vector(x1334),Vector(List(x1317, x1318)),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,4,ArrayBuffer(4),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 4/0) = List(b1162, b1295)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
                    x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(x1317, x1318)),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                Created foreach x1337 = UnrolledForeach(Set(b925, b1006, b1166, b914, b1299),x1311,Block(Const(())),List(List(b1315)),List(List(b1316)),None)
                  x752 duplicate #List(1)/4 = x1337
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(1))
                  uids:List(List(1, 1, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,5,ArrayBuffer(5),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 5/0) = List(b1162, b1296)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
                    x1346 = SRAMBankedRead(x1018,Vector(List(x1340, x1341)),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 1, 1, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/1) = List(b1162, b1338)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(1)
                    x1350 = SRAMBankedRead(x934,Vector(List(x1340, Const(0))),Vector(x1349),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(1))
                  uids:List(List(1, 1, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,1,ArrayBuffer(1),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/1) = List(b1338, b1296)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(1)
                    x1354 = SRAMBankedRead(x1017,Vector(List(Const(0), x1341)),Vector(x1353),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1356 = FixMul(x1351,x1355)
                  [x749] 0: x1356
                  Unrolling x750 = FixAdd(x746,x749)
                  x1357 = FixAdd(x1347,x1356)
                  [x750] 0: x1357
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(1))
                  uids:List(List(1, 1, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,5,ArrayBuffer(5),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 5/0) = List(b1162, b1296)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
                    x1358 = SRAMBankedWrite(x1019,Vector(x1357),Vector(List(x1340, x1341)),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,5,ArrayBuffer(5),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 5/0) = List(b1162, b1296)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
                    x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(x1340, x1341)),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                Created foreach x1360 = UnrolledForeach(Set(b925, b1006, b1166, b1300, b914),x1312,Block(Const(())),List(List(b1338)),List(List(b1339)),None)
                  x752 duplicate #List(2)/4 = x1360
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(2))
                  uids:List(List(1, 2, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,6,ArrayBuffer(6),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 6/0) = List(b1162, b1297)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
                    x1369 = SRAMBankedRead(x1018,Vector(List(x1363, x1364)),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 1, 2, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/2) = List(b1162, b1361)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(2)
                    x1373 = SRAMBankedRead(x934,Vector(List(x1363, Const(0))),Vector(x1372),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(2))
                  uids:List(List(1, 2, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,2,ArrayBuffer(2),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/1) = List(b1361, b1297)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(1)
                    x1377 = SRAMBankedRead(x1017,Vector(List(Const(0), x1364)),Vector(x1376),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1379 = FixMul(x1374,x1378)
                  [x749] 0: x1379
                  Unrolling x750 = FixAdd(x746,x749)
                  x1380 = FixAdd(x1370,x1379)
                  [x750] 0: x1380
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(2))
                  uids:List(List(1, 2, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,6,ArrayBuffer(6),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 6/0) = List(b1162, b1297)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
                    x1381 = SRAMBankedWrite(x1019,Vector(x1380),Vector(List(x1363, x1364)),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,6,ArrayBuffer(6),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 6/0) = List(b1162, b1297)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
                    x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(x1363, x1364)),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                Created foreach x1383 = UnrolledForeach(Set(b925, b1006, b1301, b1166, b914),x1313,Block(Const(())),List(List(b1361)),List(List(b1362)),None)
                  x752 duplicate #List(3)/4 = x1383
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(3))
                  uids:List(List(1, 3, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,7,ArrayBuffer(7),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 7/0) = List(b1162, b1298)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
                    x1392 = SRAMBankedRead(x1018,Vector(List(x1386, x1387)),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 1, 3, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/3) = List(b1162, b1384)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(3)
                    x1396 = SRAMBankedRead(x934,Vector(List(x1386, Const(0))),Vector(x1395),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(3))
                  uids:List(List(1, 3, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,3,ArrayBuffer(3),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/1) = List(b1384, b1298)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(1)
                    x1400 = SRAMBankedRead(x1017,Vector(List(Const(0), x1387)),Vector(x1399),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1402 = FixMul(x1397,x1401)
                  [x749] 0: x1402
                  Unrolling x750 = FixAdd(x746,x749)
                  x1403 = FixAdd(x1393,x1402)
                  [x750] 0: x1403
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(1), b50 -> List(0), b87 -> List(3))
                  uids:List(List(1, 3, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,7,ArrayBuffer(7),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 7/0) = List(b1162, b1298)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
                    x1404 = SRAMBankedWrite(x1019,Vector(x1403),Vector(List(x1386, x1387)),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,7,ArrayBuffer(7),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 7/0) = List(b1162, b1298)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
                    x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(x1386, x1387)),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                Created foreach x1406 = UnrolledForeach(Set(b1302, b925, b1006, b1166, b914),x1314,Block(Const(())),List(List(b1384)),List(List(b1385)),None)
                  x752 duplicate #List(4)/4 = x1406
                [x752] 0: x1407
              Created foreach x1408 = UnrolledForeach(Set(b1166, b1006, b925, b914),x1178,Block(Const(())),List(List(b1295, b1296, b1297, b1298)),List(List(b1299, b1300, b1301, b1302)),None)
                x753 duplicate #List(2)/4 = x1408
                x743 = RegRead(x539) [x743]
                x744 = CounterNew(Const(0),x743,Const(1),Const(1)) [x744]
                x745 = CounterChainNew(List(x744)) [x745]
                x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) [x752]
              
              Unrolling foreach x753
                Access: x743
                Memory: x539
                Iterators between x743 and x539: b57, b69, b84
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b84 -> List(2))
                uids:List(List(0, 0, 2))
                uids:List(List(0, 0, 2))
                uids:List(List(0, 0, 2))
                uids:List(List(0, 0, 2))
                Unrolling x743 = RegRead(x539)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                  x1417 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(1)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                  x1418 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(2)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  Masters: ArrayBuffer(2) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                  x1419 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(3)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  Masters: ArrayBuffer(3) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                  x1420 = RegRead(x916)
                Unrolling x744 = CounterNew(Const(0),x743,Const(1),Const(1))
                Lane #List(0): 
                x1421 = CounterNew(Const(0),x1417,Const(1),Const(1))
                Lane #List(1): 
                x1422 = CounterNew(Const(0),x1418,Const(1),Const(1))
                Lane #List(2): 
                x1423 = CounterNew(Const(0),x1419,Const(1),Const(1))
                Lane #List(3): 
                x1424 = CounterNew(Const(0),x1420,Const(1),Const(1))
                [x744] 0: x1421, 1: x1422, 2: x1423, 3: x1424
                Unrolling x745 = CounterChainNew(List(x744))
                Lane #List(0): 
                x1425 = CounterChainNew(List(x1421))
                Lane #List(1): 
                x1426 = CounterChainNew(List(x1422))
                Lane #List(2): 
                x1427 = CounterChainNew(List(x1423))
                Lane #List(3): 
                x1428 = CounterChainNew(List(x1424))
                [x745] 0: x1425, 1: x1426, 2: x1427, 3: x1428
                Unrolling x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None)
                Duplicating controller x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) in lanes PartialUnroller(x753,x1179,List(b87),false,true)
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(0))
                  uids:List(List(2, 0, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,8,ArrayBuffer(8),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 8/0) = List(b1163, b1409)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
                    x1437 = SRAMBankedRead(x1018,Vector(List(x1431, x1432)),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 2, 0, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/0) = List(b1163, b1429)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
                    x1441 = SRAMBankedRead(x934,Vector(List(x1431, Const(0))),Vector(x1440),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(0))
                  uids:List(List(2, 0, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/2) = List(b1429, b1409)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                    x1445 = SRAMBankedRead(x1017,Vector(List(Const(0), x1432)),Vector(x1444),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1447 = FixMul(x1442,x1446)
                  [x749] 0: x1447
                  Unrolling x750 = FixAdd(x746,x749)
                  x1448 = FixAdd(x1438,x1447)
                  [x750] 0: x1448
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(0))
                  uids:List(List(2, 0, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,8,ArrayBuffer(8),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 8/0) = List(b1163, b1409)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
                    x1449 = SRAMBankedWrite(x1019,Vector(x1448),Vector(List(x1431, x1432)),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,8,ArrayBuffer(8),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 8/0) = List(b1163, b1409)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
                    x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(x1431, x1432)),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                Created foreach x1451 = UnrolledForeach(Set(b925, b1006, b1167, b1413, b914),x1425,Block(Const(())),List(List(b1429)),List(List(b1430)),None)
                  x752 duplicate #List(1)/4 = x1451
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(1))
                  uids:List(List(2, 1, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,9,ArrayBuffer(9),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 9/0) = List(b1163, b1410)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
                    x1460 = SRAMBankedRead(x1018,Vector(List(x1454, x1455)),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 2, 1, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/1) = List(b1163, b1452)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(1)
                    x1464 = SRAMBankedRead(x934,Vector(List(x1454, Const(0))),Vector(x1463),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(1))
                  uids:List(List(2, 1, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,1,ArrayBuffer(1),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/2) = List(b1452, b1410)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(2)
                    x1468 = SRAMBankedRead(x1017,Vector(List(Const(0), x1455)),Vector(x1467),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1470 = FixMul(x1465,x1469)
                  [x749] 0: x1470
                  Unrolling x750 = FixAdd(x746,x749)
                  x1471 = FixAdd(x1461,x1470)
                  [x750] 0: x1471
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(1))
                  uids:List(List(2, 1, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,9,ArrayBuffer(9),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 9/0) = List(b1163, b1410)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
                    x1472 = SRAMBankedWrite(x1019,Vector(x1471),Vector(List(x1454, x1455)),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,9,ArrayBuffer(9),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 9/0) = List(b1163, b1410)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
                    x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(x1454, x1455)),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                Created foreach x1474 = UnrolledForeach(Set(b925, b1006, b1414, b1167, b914),x1426,Block(Const(())),List(List(b1452)),List(List(b1453)),None)
                  x752 duplicate #List(2)/4 = x1474
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(2))
                  uids:List(List(2, 2, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,10,ArrayBuffer(10),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 10/0) = List(b1163, b1411)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(10) broadcast:List(0)
                    x1483 = SRAMBankedRead(x1018,Vector(List(x1477, x1478)),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 2, 2, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/2) = List(b1163, b1475)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(2)
                    x1487 = SRAMBankedRead(x934,Vector(List(x1477, Const(0))),Vector(x1486),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(2))
                  uids:List(List(2, 2, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,2,ArrayBuffer(2),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/2) = List(b1475, b1411)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(2)
                    x1491 = SRAMBankedRead(x1017,Vector(List(Const(0), x1478)),Vector(x1490),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1493 = FixMul(x1488,x1492)
                  [x749] 0: x1493
                  Unrolling x750 = FixAdd(x746,x749)
                  x1494 = FixAdd(x1484,x1493)
                  [x750] 0: x1494
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(2))
                  uids:List(List(2, 2, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,10,ArrayBuffer(10),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 10/0) = List(b1163, b1411)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(10) broadcast:List(0)
                    x1495 = SRAMBankedWrite(x1019,Vector(x1494),Vector(List(x1477, x1478)),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,10,ArrayBuffer(10),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 10/0) = List(b1163, b1411)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(10) broadcast:List(0)
                    x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(x1477, x1478)),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                Created foreach x1497 = UnrolledForeach(Set(b1415, b925, b1006, b1167, b914),x1427,Block(Const(())),List(List(b1475)),List(List(b1476)),None)
                  x752 duplicate #List(3)/4 = x1497
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(3))
                  uids:List(List(2, 3, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,11,ArrayBuffer(11),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 11/0) = List(b1163, b1412)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(11) broadcast:List(0)
                    x1506 = SRAMBankedRead(x1018,Vector(List(x1500, x1501)),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 2, 3, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,2,ArrayBuffer(2),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/3) = List(b1163, b1498)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(3)
                    x1510 = SRAMBankedRead(x934,Vector(List(x1500, Const(0))),Vector(x1509),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(3))
                  uids:List(List(2, 3, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,3,ArrayBuffer(3),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/2) = List(b1498, b1412)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(2)
                    x1514 = SRAMBankedRead(x1017,Vector(List(Const(0), x1501)),Vector(x1513),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1516 = FixMul(x1511,x1515)
                  [x749] 0: x1516
                  Unrolling x750 = FixAdd(x746,x749)
                  x1517 = FixAdd(x1507,x1516)
                  [x750] 0: x1517
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(2), b50 -> List(0), b87 -> List(3))
                  uids:List(List(2, 3, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,11,ArrayBuffer(11),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 11/0) = List(b1163, b1412)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(11) broadcast:List(0)
                    x1518 = SRAMBankedWrite(x1019,Vector(x1517),Vector(List(x1500, x1501)),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,11,ArrayBuffer(11),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 11/0) = List(b1163, b1412)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(11) broadcast:List(0)
                    x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(x1500, x1501)),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                Created foreach x1520 = UnrolledForeach(Set(b925, b1006, b1167, b914, b1416),x1428,Block(Const(())),List(List(b1498)),List(List(b1499)),None)
                  x752 duplicate #List(4)/4 = x1520
                [x752] 0: x1521
              Created foreach x1522 = UnrolledForeach(Set(b1167, b1006, b925, b914),x1179,Block(Const(())),List(List(b1409, b1410, b1411, b1412)),List(List(b1413, b1414, b1415, b1416)),None)
                x753 duplicate #List(3)/4 = x1522
                x743 = RegRead(x539) [x743]
                x744 = CounterNew(Const(0),x743,Const(1),Const(1)) [x744]
                x745 = CounterChainNew(List(x744)) [x745]
                x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) [x752]
              
              Unrolling foreach x753
                Access: x743
                Memory: x539
                Iterators between x743 and x539: b57, b69, b84
                Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b84 -> List(3))
                uids:List(List(0, 0, 3))
                uids:List(List(0, 0, 3))
                uids:List(List(0, 0, 3))
                uids:List(List(0, 0, 3))
                Unrolling x743 = RegRead(x539)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(0)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                  x1531 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(1)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                  x1532 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(2)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  Masters: ArrayBuffer(2) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                  x1533 = RegRead(x916)
                  Dispatch: ArrayBuffer(0)
                  Lane IDs: ArrayBuffer(3)
                  Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  Masters: ArrayBuffer(3) // Lanes that do not have duplicated address
                  Locks: None
                laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                  x1534 = RegRead(x916)
                Unrolling x744 = CounterNew(Const(0),x743,Const(1),Const(1))
                Lane #List(0): 
                x1535 = CounterNew(Const(0),x1531,Const(1),Const(1))
                Lane #List(1): 
                x1536 = CounterNew(Const(0),x1532,Const(1),Const(1))
                Lane #List(2): 
                x1537 = CounterNew(Const(0),x1533,Const(1),Const(1))
                Lane #List(3): 
                x1538 = CounterNew(Const(0),x1534,Const(1),Const(1))
                [x744] 0: x1535, 1: x1536, 2: x1537, 3: x1538
                Unrolling x745 = CounterChainNew(List(x744))
                Lane #List(0): 
                x1539 = CounterChainNew(List(x1535))
                Lane #List(1): 
                x1540 = CounterChainNew(List(x1536))
                Lane #List(2): 
                x1541 = CounterChainNew(List(x1537))
                Lane #List(3): 
                x1542 = CounterChainNew(List(x1538))
                [x745] 0: x1539, 1: x1540, 2: x1541, 3: x1542
                Unrolling x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None)
                Duplicating controller x752 = OpForeach(Set(),x745,Block(Const(())),List(b90),None) in lanes PartialUnroller(x753,x1180,List(b87),false,true)
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(0))
                  uids:List(List(3, 0, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,12,ArrayBuffer(12),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 12/0) = List(b1164, b1523)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(12) broadcast:List(0)
                    x1551 = SRAMBankedRead(x1018,Vector(List(x1545, x1546)),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(0))
                  uids:List(List(0, 3, 0, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/0) = List(b1164, b1543)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
                    x1555 = SRAMBankedRead(x934,Vector(List(x1545, Const(0))),Vector(x1554),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(0))
                  uids:List(List(3, 0, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 0/3) = List(b1543, b1523)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
                    x1559 = SRAMBankedRead(x1017,Vector(List(Const(0), x1546)),Vector(x1558),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1561 = FixMul(x1556,x1560)
                  [x749] 0: x1561
                  Unrolling x750 = FixAdd(x746,x749)
                  x1562 = FixAdd(x1552,x1561)
                  [x750] 0: x1562
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(0))
                  uids:List(List(3, 0, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,12,ArrayBuffer(12),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 12/0) = List(b1164, b1523)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(12) broadcast:List(0)
                    x1563 = SRAMBankedWrite(x1019,Vector(x1562),Vector(List(x1545, x1546)),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,12,ArrayBuffer(12),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 12/0) = List(b1164, b1523)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(12) broadcast:List(0)
                    x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(x1545, x1546)),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                Created foreach x1565 = UnrolledForeach(Set(b1168, b925, b1006, b914, b1527),x1539,Block(Const(())),List(List(b1543)),List(List(b1544)),None)
                  x752 duplicate #List(1)/4 = x1565
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(1))
                  uids:List(List(3, 1, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,13,ArrayBuffer(13),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 13/0) = List(b1164, b1524)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(13) broadcast:List(0)
                    x1574 = SRAMBankedRead(x1018,Vector(List(x1568, x1569)),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(1))
                  uids:List(List(0, 3, 1, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(1))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/1) = List(b1164, b1566)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(1)
                    x1578 = SRAMBankedRead(x934,Vector(List(x1568, Const(0))),Vector(x1577),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(1))
                  uids:List(List(3, 1, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,1,ArrayBuffer(1),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 1/3) = List(b1566, b1524)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(3)
                    x1582 = SRAMBankedRead(x1017,Vector(List(Const(0), x1569)),Vector(x1581),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1584 = FixMul(x1579,x1583)
                  [x749] 0: x1584
                  Unrolling x750 = FixAdd(x746,x749)
                  x1585 = FixAdd(x1575,x1584)
                  [x750] 0: x1585
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(1))
                  uids:List(List(3, 1, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,13,ArrayBuffer(13),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 13/0) = List(b1164, b1524)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(13) broadcast:List(0)
                    x1586 = SRAMBankedWrite(x1019,Vector(x1585),Vector(List(x1568, x1569)),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,13,ArrayBuffer(13),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 13/0) = List(b1164, b1524)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(13) broadcast:List(0)
                    x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(x1568, x1569)),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                Created foreach x1588 = UnrolledForeach(Set(b1168, b925, b1006, b1528, b914),x1540,Block(Const(())),List(List(b1566)),List(List(b1567)),None)
                  x752 duplicate #List(2)/4 = x1588
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(2))
                  uids:List(List(3, 2, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,14,ArrayBuffer(14),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 14/0) = List(b1164, b1525)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(14) broadcast:List(0)
                    x1597 = SRAMBankedRead(x1018,Vector(List(x1591, x1592)),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(2))
                  uids:List(List(0, 3, 2, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(2))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/2) = List(b1164, b1589)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(2)
                    x1601 = SRAMBankedRead(x934,Vector(List(x1591, Const(0))),Vector(x1600),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(2))
                  uids:List(List(3, 2, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,2,ArrayBuffer(2),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 2/3) = List(b1589, b1525)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(3)
                    x1605 = SRAMBankedRead(x1017,Vector(List(Const(0), x1592)),Vector(x1604),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1607 = FixMul(x1602,x1606)
                  [x749] 0: x1607
                  Unrolling x750 = FixAdd(x746,x749)
                  x1608 = FixAdd(x1598,x1607)
                  [x750] 0: x1608
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(2))
                  uids:List(List(3, 2, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,14,ArrayBuffer(14),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 14/0) = List(b1164, b1525)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(14) broadcast:List(0)
                    x1609 = SRAMBankedWrite(x1019,Vector(x1608),Vector(List(x1591, x1592)),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,14,ArrayBuffer(14),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 14/0) = List(b1164, b1525)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(14) broadcast:List(0)
                    x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(x1591, x1592)),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                Created foreach x1611 = UnrolledForeach(Set(b1168, b1529, b925, b1006, b914),x1541,Block(Const(())),List(List(b1589)),List(List(b1590)),None)
                  x752 duplicate #List(3)/4 = x1611
                  x746 = SRAMRead(x622,List(b84, b87),Set()) [x746]
                  x747 = SRAMRead(x554,List(b84, b90),Set()) [x747]
                  x748 = SRAMRead(x621,List(b90, b87),Set()) [x748]
                  x749 = FixMul(x747,x748) [x749]
                  x750 = FixAdd(x746,x749) [x750]
                  x751 = SRAMWrite(x622,x750,List(b84, b87),Set()) [x751]
                
                Unrolling foreach x752
                  Access: x746
                  Memory: x622
                  Iterators between x746 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(3))
                  uids:List(List(3, 3, 0))
                  Unrolling x746 = SRAMRead(x622,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,15,ArrayBuffer(15),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 15/0) = List(b1164, b1526)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(15) broadcast:List(0)
                    x1620 = SRAMBankedRead(x1018,Vector(List(x1614, x1615)),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x747
                  Memory: x554
                  Iterators between x747 and x554: b69, b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(3))
                  uids:List(List(0, 3, 3, 0))
                  Unrolling x747 = SRAMRead(x554,List(b84, b90),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,3,ArrayBuffer(3),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/3) = List(b1164, b1612)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(3)
                    x1624 = SRAMBankedRead(x934,Vector(List(x1614, Const(0))),Vector(x1623),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                  Access: x748
                  Memory: x621
                  Iterators between x748 and x621: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(3))
                  uids:List(List(3, 3, 0))
                  Unrolling x748 = SRAMRead(x621,List(b90, b87),Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(2),0,3,ArrayBuffer(3),ArrayBuffer(3))
                  a2 = 
                    lane 0 (castgrp/broadcast 3/3) = List(b1612, b1526)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(3)
                    x1628 = SRAMBankedRead(x1017,Vector(List(Const(0), x1615)),Vector(x1627),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                  Unrolling x749 = FixMul(x747,x748)
                  x1630 = FixMul(x1625,x1629)
                  [x749] 0: x1630
                  Unrolling x750 = FixAdd(x746,x749)
                  x1631 = FixAdd(x1621,x1630)
                  [x750] 0: x1631
                  Access: x751
                  Memory: x622
                  Iterators between x751 and x622: b84, b87, b90
                  Unroll: Map(b69 -> List(0), b57 -> List(0), b84 -> List(3), b50 -> List(0), b87 -> List(3))
                  uids:List(List(3, 3, 0))
                  Unrolling x751 = SRAMWrite(x622,x750,List(b84, b87),Set())
                    Dispatch: ArrayBuffer(1)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,15,ArrayBuffer(15),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 15/0) = List(b1164, b1526)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(15) broadcast:List(0)
                    x1632 = SRAMBankedWrite(x1019,Vector(x1631),Vector(List(x1614, x1615)),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(1),0,15,ArrayBuffer(15),ArrayBuffer(0))
                  a2 = 
                    lane 0 (castgrp/broadcast 15/0) = List(b1164, b1526)
                    Masters: Vector(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(15) broadcast:List(0)
                    x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(x1614, x1615)),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                Created foreach x1634 = UnrolledForeach(Set(b1168, b925, b1006, b1530, b914),x1542,Block(Const(())),List(List(b1612)),List(List(b1613)),None)
                  x752 duplicate #List(4)/4 = x1634
                [x752] 0: x1635
              Created foreach x1636 = UnrolledForeach(Set(b1168, b1006, b925, b914),x1180,Block(Const(())),List(List(b1523, b1524, b1525, b1526)),List(List(b1527, b1528, b1529, b1530)),None)
                x753 duplicate #List(4)/4 = x1636
              [x753] 0: x1637
            Created foreach x1638 = UnrolledForeach(Set(b1006, b925, b914),x1160,Block(Const(())),List(List(b1161, b1162, b1163, b1164)),List(List(b1165, b1166, b1167, b1168)),None)
            [x754] 0: Const(())
            Unrolling x806 = UnitPipe(Set(),Block(Const(())),None)
            x806 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x807,x1004,List(b69),false,true)
              Unrolling x759 = CounterNew(Const(0),x755,Const(1),Const(1))
              x1642 = CounterNew(Const(0),x1010,Const(1),Const(1))
              [x759] 0: x1642
              Unrolling x760 = CounterChainNew(List(x759))
              x1643 = CounterChainNew(List(x1642))
              [x760] 0: x1643
              Unrolling x805 = OpForeach(Set(),x760,Block(Const(())),List(b500),None)
              x805 = OpForeach(Set(),x760,Block(Const(())),List(b500),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x806),false)
              Unrolling foreach x805
                Unrolling x801 = UnitPipe(Set(),Block(Const(())),None)
                x801 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x805,x1643,List(b500),false,true)
                  Duplicating x761 = RegNew(Const(0))
                    #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                    x1646 = RegNew(Const(0))
                    Registering duplicates for memory: x761
                    (x761,0) -> x1646
                  Duplicating x762 = RegNew(Const(0))
                    #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                    x1647 = RegNew(Const(0))
                    Registering duplicates for memory: x762
                    (x762,0) -> x1647
                  Duplicating x763 = RegNew(Const(0))
                    #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
                    x1648 = RegNew(Const(0))
                    Registering duplicates for memory: x763
                    (x763,0) -> x1648
                  Unrolling x787 = UnitPipe(Set(),Block(Const(())),None)
                  x787 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes UnitUnroller(x801,false)
                    Unrolling x764 = FixAdd(b57,b500)
                    x1649 = FixAdd(b924,b1644)
                    [x764] 0: x1649
                    Access: x765
                    Memory: x505
                    Iterators between x765 and x505: b50, b57, b69, b500
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0, 0, 0, 0))
                    Unrolling x765 = RegRead(x505)
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(2))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
                      x1650 = RegRead(x879)
                    Unrolling x766 = FixMul(x764,x765)
                    x1651 = FixMul(x1649,x1650)
                    [x766] 0: x1651
                    Unrolling x767 = FixAdd(x766,b69)
                    x1652 = FixAdd(x1651,b1005)
                    [x767] 0: x1652
                    Unrolling x768 = FixDivSRA(x767,Const(4))
                    x1653 = FixDivSRA(x1652,Const(4))
                    [x768] 0: x1653
                    Unrolling x769 = FixSLA(x768,Const(4))
                    x1654 = FixSLA(x1653,Const(4))
                    [x769] 0: x1654
                    Unrolling x770 = FixSLA(x769,Const(2))
                    x1655 = FixSLA(x1654,Const(2))
                    [x770] 0: x1655
                    Unrolling x771 = FixSub(x767,x769)
                    x1656 = FixSub(x1652,x1654)
                    [x771] 0: x1656
                    Access: x772
                    Memory: x615
                    Iterators between x772 and x615: b500
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0))
                    Unrolling x772 = RegRead(x615)
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(4),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1657 = RegRead(x1011)
                    Unrolling x773 = FixAdd(x771,x772)
                    x1658 = FixAdd(x1656,x1657)
                    [x773] 0: x1658
                    Unrolling x774 = FixAdd(x773,Const(15))
                    x1659 = FixAdd(x1658,Const(15))
                    [x774] 0: x1659
                    Unrolling x775 = FixDivSRA(x774,Const(4))
                    x1660 = FixDivSRA(x1659,Const(4))
                    [x775] 0: x1660
                    Unrolling x776 = FixSLA(x775,Const(4))
                    x1661 = FixSLA(x1660,Const(4))
                    [x776] 0: x1661
                    Unrolling x777 = FixSLA(x776,Const(2))
                    x1662 = FixSLA(x1661,Const(2))
                    [x777] 0: x1662
                    Unrolling x778 = FixToFix(x770,TRUE,_64,_0)
                    x1663 = FixToFix(x1655,TRUE,_64,_0)
                    [x778] 0: x1663
                    Unrolling x779 = DRAMAddress(x532)
                    x1664 = DRAMAddress(x906)
                    [x779] 0: x1664
                    Unrolling x780 = FixAdd(x778,x779)
                    x1665 = FixAdd(x1663,x1664)
                    [x780] 0: x1665
                    Unrolling x781 = SimpleStruct(ArrayBuffer((offset,x780), (size,x777), (isLoad,Const(false))))
                    x1666 = SimpleStruct(ArrayBuffer((offset,x1665), (size,x1662), (isLoad,Const(false))))
                    [x781] 0: x1666
                    Unrolling x782 = DRAMIsAlloc(x532)
                    x1667 = DRAMIsAlloc(x906)
                    [x782] 0: x1667
                    Access: x783
                    Memory: x756
                    Iterators between x783 and x756: b500
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0))
                    Unrolling x783 = StreamOutWrite(x756,x781,Set(x782))
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1668 = StreamOutBankedWrite(x1639,ArrayBuffer(x1666),ArrayBuffer(Set(x1667)))
                    Access: x784
                    Memory: x761
                    Iterators between x784 and x761: 
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List())
                    Unrolling x784 = RegWrite(x761,x771,Set())
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1669 = RegWrite(x1646,x1656,Set())
                    Access: x785
                    Memory: x762
                    Iterators between x785 and x762: 
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List())
                    Unrolling x785 = RegWrite(x762,x773,Set())
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1670 = RegWrite(x1647,x1658,Set())
                    Access: x786
                    Memory: x763
                    Iterators between x786 and x763: 
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List())
                    Unrolling x786 = RegWrite(x763,x776,Set())
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1671 = RegWrite(x1648,x1661,Set())
                  [x787] 0: Const(())
                  Access: x788
                  Memory: x763
                  Iterators between x788 and x763: 
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                  uids:List(List())
                  Unrolling x788 = RegRead(x763)
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1673 = RegRead(x1648)
                  Unrolling x789 = CounterNew(Const(0),x788,Const(1),Const(1))
                  x1674 = CounterNew(Const(0),x1673,Const(1),Const(1))
                  [x789] 0: x1674
                  Unrolling x790 = CounterChainNew(List(x789))
                  x1675 = CounterChainNew(List(x1674))
                  [x790] 0: x1675
                  Unrolling x800 = OpForeach(Set(),x790,Block(Const(())),List(b405),None)
                  x800 = OpForeach(Set(),x790,Block(Const(())),List(b405),None) [duplicate 1/1] in lanes UnitUnroller(x801,false)
                  Unrolling foreach x800
                    Access: x791
                    Memory: x761
                    Iterators between x791 and x761: b405
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0))
                    Unrolling x791 = RegRead(x761)
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1678 = RegRead(x1646)
                    Unrolling x792 = FixLeq(x791,b405)
                    x1679 = FixLeq(x1678,b1676)
                    [x792] 0: x1679
                    Access: x793
                    Memory: x762
                    Iterators between x793 and x762: b405
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0))
                    Unrolling x793 = RegRead(x762)
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1680 = RegRead(x1647)
                    Unrolling x794 = FixLst(b405,x793)
                    x1681 = FixLst(b1676,x1680)
                    [x794] 0: x1681
                    Unrolling x795 = And(x792,x794)
                    x1682 = And(x1679,x1681)
                    [x795] 0: x1682
                    Unrolling x796 = FixSub(b405,x791)
                    x1683 = FixSub(b1676,x1678)
                    [x796] 0: x1683
                    Access: x797
                    Memory: x622
                    Iterators between x797 and x622: b500, b405
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0, 0))
                    Unrolling x797 = SRAMRead(x622,List(b500, x796),Set(x795))
                      Dispatch: ArrayBuffer(1)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    a2 = 
                      lane 0 (castgrp/broadcast 0/0) = List(b1644, x1683)
                      Masters: Vector(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1690 = SRAMBankedRead(x1019,Vector(List(x1684, x1685)),Vector(x1689),Vector(Set(x1682, b1677)),Vec[Fix[TRUE,_24,_8]])
                    Unrolling x798 = SimpleStruct(ArrayBuffer((_1,x797), (_2,x795)))
                    x1692 = SimpleStruct(ArrayBuffer((_1,x1691), (_2,x1682)))
                    [x798] 0: x1692
                    Access: x799
                    Memory: x757
                    Iterators between x799 and x757: b500, b405
                    Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                    uids:List(List(0, 0))
                    Unrolling x799 = StreamOutWrite(x757,x798,Set())
                      Dispatch: ArrayBuffer(0)
                      Lane IDs: ArrayBuffer(0)
                      Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                      Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                      Locks: None
                    laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                      x1693 = StreamOutBankedWrite(x1640,ArrayBuffer(x1692),ArrayBuffer(Set(b1677)))
                  Created foreach x1694 = UnrolledForeach(Set(),x1675,Block(Const(())),List(List(b1676)),List(List(b1677)),None)
                  [x800] 0: Const(())
                [x801] 0: Const(())
                Unrolling x802 = FringeDenseStore(x532,x756,x757,x758)
                x1696 = FringeDenseStore(x906,x1639,x1640,x1641)
                [x802] 0: x1696
                Unrolling x804 = UnitPipe(Set(),Block(Const(())),None)
                x804 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x805,x1643,List(b500),false,true)
                  Access: x803
                  Memory: x758
                  Iterators between x803 and x758: b500
                  Unroll: Map(b50 -> List(0), b57 -> List(0), b69 -> List(0), b500 -> List(0))
                  uids:List(List(0))
                  Unrolling x803 = StreamInRead(x758,Set())
                    Dispatch: ArrayBuffer(0)
                    Lane IDs: ArrayBuffer(0)
                    Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                    Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                    Locks: None
                  laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                    x1697 = StreamInBankedRead(x1641,ArrayBuffer(Set()))
                [x804] 0: Const(())
              Created foreach x1700 = UnrolledForeach(Set(),x1643,Block(Const(())),List(List(b1644)),List(List(b1645)),None)
              [x805] 0: Const(())
            [x806] 0: Const(())
          Created foreach x1702 = UnrolledForeach(Set(b925, b914),x1004,Block(Const(())),List(List(b1005)),List(List(b1006)),None)
          [x807] 0: Const(())
        Created foreach x1703 = UnrolledForeach(Set(b914),x923,Block(Const(())),List(List(b924)),List(List(b925)),None)
        [x808] 0: Const(())
      Created foreach x1704 = UnrolledForeach(Set(),x912,Block(Const(())),List(List(b913)),List(List(b914)),None)
      [x809] 0: Const(())
    Unrolling x811 = FixMul(x530,x531)
    x1705 = FixMul(x904,x905)
    [x811] 0: x1705
    Unrolling x812 = ArrayNew(x811)
    x1706 = ArrayNew(x1705)
    [x812] 0: x1706
    Unrolling x813 = GetMem(x532,x812)
    x1707 = GetMem(x906,x1706)
    [x813] 0: x1707
    Unrolling x829 = MapIndices(x522,Block((b111) => x828))
      Unrolling x814 = FixDiv(b111,x511)
      x1708 = FixDiv(b111,x885)
      [x814] 0: x1708
      Unrolling x815 = FixMod(b111,x511)
      x1709 = FixMod(b111,x885)
      [x815] 0: x1709
      Unrolling x816 = ArrayApply(x503,Const(2))
      x1710 = ArrayApply(x877,Const(2))
      [x816] 0: x1710
      Unrolling x817 = TextToFix(x816,TRUE,_32,_0)
      x1711 = TextToFix(x1710,TRUE,_32,_0)
      [x817] 0: x1711
      Unrolling x825 = MapIndices(x817,Block((b116) => x824))
        Unrolling x818 = FixMul(x814,x514)
        x1712 = FixMul(x1708,x888)
        [x818] 0: x1712
        Unrolling x819 = FixAdd(x818,b116)
        x1713 = FixAdd(x1712,b116)
        [x819] 0: x1713
        Unrolling x820 = ArrayApply(x518,x819)
        x1714 = ArrayApply(x892,x1713)
        [x820] 0: x1714
        Unrolling x821 = FixMul(b116,x511)
        x1715 = FixMul(b116,x885)
        [x821] 0: x1715
        Unrolling x822 = FixAdd(x821,x815)
        x1716 = FixAdd(x1715,x1709)
        [x822] 0: x1716
        Unrolling x823 = ArrayApply(x521,x822)
        x1717 = ArrayApply(x895,x1716)
        [x823] 0: x1717
        Unrolling x824 = FixMul(x820,x823)
        x1718 = FixMul(x1714,x1717)
        [x824] 0: x1718
      x1719 = MapIndices(x1711,Block((b116) => x1718))
      [x825] 0: x1719
      Unrolling x828 = ArrayReduce(x825,Block((x825,b125) => x826),Block((b126,b127) => x827))
        Unrolling x826 = ArrayApply(x825,b125)
        x1720 = ArrayApply(x1719,b125)
        [x826] 0: x1720
        Unrolling x827 = FixAdd(b126,b127)
        x1721 = FixAdd(b126,b127)
        [x827] 0: x1721
      x1722 = ArrayReduce(x1719,Block((x1719,b125) => x1720),Block((b126,b127) => x1721))
      [x828] 0: x1722
    x1723 = MapIndices(x896,Block((b111) => x1722))
    [x829] 0: x1723
    Unrolling x830 = TextConcat(List(Const("Received: "), Const("\n")))
    x1724 = TextConcat(List(Const("Received: "), Const("\n")))
    [x830] 0: x1724
    Unrolling x831 = PrintIf(Set(),x830)
    x1725 = PrintIf(Set(),x1724)
    [x831] 0: x1725
    Unrolling x840 = SeriesForeach(Const(0),x530,Const(1),Block((b135) => Const(())))
      Unrolling x838 = SeriesForeach(Const(0),x531,Const(1),Block((b136) => Const(())))
        Unrolling x832 = FixMul(b135,x531)
        x1726 = FixMul(b135,x905)
        [x832] 0: x1726
        Unrolling x833 = FixAdd(x832,b136)
        x1727 = FixAdd(x1726,b136)
        [x833] 0: x1727
        Unrolling x834 = ArrayApply(x812,x833)
        x1728 = ArrayApply(x1706,x1727)
        [x834] 0: x1728
        Unrolling x835 = FixToText(x834,None)
        x1729 = FixToText(x1728,None)
        [x835] 0: x1729
        Unrolling x836 = TextConcat(List(x835, Const("\t")))
        x1730 = TextConcat(List(x1729, Const("\t")))
        [x836] 0: x1730
        Unrolling x837 = PrintIf(Set(),x836)
        x1731 = PrintIf(Set(),x1730)
        [x837] 0: x1731
      x1732 = SeriesForeach(Const(0),x905,Const(1),Block((b136) => Const(())))
      [x838] 0: x1732
      Unrolling x839 = PrintIf(Set(),Const("\n"))
      x1733 = PrintIf(Set(),Const("\n"))
      [x839] 0: x1733
    x1734 = SeriesForeach(Const(0),x904,Const(1),Block((b135) => Const(())))
    [x840] 0: x1734
    Unrolling x841 = TextConcat(List(Const("Wanted: "), Const("\n")))
    x1735 = TextConcat(List(Const("Wanted: "), Const("\n")))
    [x841] 0: x1735
    Unrolling x842 = PrintIf(Set(),x841)
    x1736 = PrintIf(Set(),x1735)
    [x842] 0: x1736
    Unrolling x851 = SeriesForeach(Const(0),x508,Const(1),Block((b148) => Const(())))
      Unrolling x849 = SeriesForeach(Const(0),x511,Const(1),Block((b149) => Const(())))
        Unrolling x843 = FixMul(b148,x511)
        x1737 = FixMul(b148,x885)
        [x843] 0: x1737
        Unrolling x844 = FixAdd(x843,b149)
        x1738 = FixAdd(x1737,b149)
        [x844] 0: x1738
        Unrolling x845 = ArrayApply(x829,x844)
        x1739 = ArrayApply(x1723,x1738)
        [x845] 0: x1739
        Unrolling x846 = FixToText(x845,None)
        x1740 = FixToText(x1739,None)
        [x846] 0: x1740
        Unrolling x847 = TextConcat(List(x846, Const("\t")))
        x1741 = TextConcat(List(x1740, Const("\t")))
        [x847] 0: x1741
        Unrolling x848 = PrintIf(Set(),x847)
        x1742 = PrintIf(Set(),x1741)
        [x848] 0: x1742
      x1743 = SeriesForeach(Const(0),x885,Const(1),Block((b149) => Const(())))
      [x849] 0: x1743
      Unrolling x850 = PrintIf(Set(),Const("\n"))
      x1744 = PrintIf(Set(),Const("\n"))
      [x850] 0: x1744
    x1745 = SeriesForeach(Const(0),x882,Const(1),Block((b148) => Const(())))
    [x851] 0: x1745
    Unrolling x855 = ArrayZip(x812,x829,Block((x812,b159) => x852),Block((x829,b159) => x853),Block((x852,x853) => x854))
      Unrolling x852 = ArrayApply(x812,b159)
      x1746 = ArrayApply(x1706,b159)
      [x852] 0: x1746
      Unrolling x853 = ArrayApply(x829,b159)
      x1747 = ArrayApply(x1723,b159)
      [x853] 0: x1747
      Unrolling x854 = FixEql(x852,x853)
      x1748 = FixEql(x1746,x1747)
      [x854] 0: x1748
    x1749 = ArrayZip(x1706,x1723,Block((x1706,b159) => x1746),Block((x1723,b159) => x1747),Block((x1746,x1747) => x1748))
    [x855] 0: x1749
    Unrolling x858 = ArrayReduce(x855,Block((x855,b165) => x856),Block((b166,b167) => x857))
      Unrolling x856 = ArrayApply(x855,b165)
      x1750 = ArrayApply(x1749,b165)
      [x856] 0: x1750
      Unrolling x857 = And(b166,b167)
      x1751 = And(b166,b167)
      [x857] 0: x1751
    x1752 = ArrayReduce(x1749,Block((x1749,b165) => x1750),Block((b166,b167) => x1751))
    [x858] 0: x1752
    Unrolling x859 = BitToText(x858)
    x1753 = BitToText(x1752)
    [x859] 0: x1753
    Unrolling x860 = TextConcat(List(Const("Pass? "), x859))
    x1754 = TextConcat(List(Const("Pass? "), x1753))
    [x860] 0: x1754
    Unrolling x861 = TextConcat(List(x860, Const("\n")))
    x1755 = TextConcat(List(x1754, Const("\n")))
    [x861] 0: x1755
    Unrolling x862 = PrintIf(Set(),x861)
    x1756 = PrintIf(Set(),x1755)
    [x862] 0: x1756
    Unrolling x863 = AssertIf(Set(),x858,Some(Const("Lab2GEMM.scala:154:12: Assertion failure")))
    x1757 = AssertIf(Set(),x1752,Some(Const("Lab2GEMM.scala:154:12: Assertion failure")))
    [x863] 0: x1757
