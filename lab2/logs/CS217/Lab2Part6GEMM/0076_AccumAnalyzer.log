  x892 = MapIndices(x890,Block((b16) => x891))
  x895 = MapIndices(x893,Block((b24) => x894))
  x897 = MapIndices(x896,Block((b31) => Const(0)))
  x810 = AccelScope(Block(Const(())))
      x1704 = UnrolledForeach(Set(),x912,Block(Const(())),List(List(b913)),List(List(b914)),None)
          x921 = UnitPipe(Set(b914),Block(Const(())),None)
            Working on pipeLatencies of result Vector(Const(()), x917, x920), schedule Vector(x917, x918, x919, x920)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            ----------------------------------
            Computing pipeLatencies for scope:
              x917 = RegRead(x880)
              x918 = FixSub(x917,b913)
              x919 = FixMin(Const(16),x918)
              x920 = RegWrite(x916,x919,Set())
            Computing fullDFS: Const(())
            Computing fullDFS: x917
            cur: x917, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x917 = RegRead(x880)
            Computing fullDFS: x920
            Computing fullDFS: x919
            Computing fullDFS: x918
            [1.0 = max(0.0) + 1.0] x918 = FixSub(x917,b913)
            [1.0 = max(1.0) + 0.0] x919 = FixMin(Const(16),x918)
            [2.0 = max(1.0) + 1.0] x920 = RegWrite(x916,x919,Set())
            Cycles: Map()
              Schedule after pipeLatencies calculation:
              [0.0] x917 = RegRead(x880)
              [1.0] x918 = FixSub(x917,b913)
              [1.0] x919 = FixMin(Const(16),x918)
              [2.0] x920 = RegWrite(x916,x919,Set())
          x1703 = UnrolledForeach(Set(b914),x923,Block(Const(())),List(List(b924)),List(List(b925)),None)
              x932 = UnitPipe(Set(b925, b914),Block(Const(())),None)
                Working on pipeLatencies of result Vector(Const(()), x928, x931), schedule Vector(x928, x929, x930, x931)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x928 = RegRead(x878)
                  x929 = FixSub(x928,b924)
                  x930 = FixMin(Const(16),x929)
                  x931 = RegWrite(x927,x930,Set())
                Computing fullDFS: Const(())
                Computing fullDFS: x928
                cur: x928, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x928 = RegRead(x878)
                Computing fullDFS: x931
                Computing fullDFS: x930
                Computing fullDFS: x929
                [1.0 = max(0.0) + 1.0] x929 = FixSub(x928,b924)
                [1.0 = max(1.0) + 0.0] x930 = FixMin(Const(16),x929)
                [2.0 = max(1.0) + 1.0] x931 = RegWrite(x927,x930,Set())
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x928 = RegRead(x878)
                  [1.0] x929 = FixSub(x928,b924)
                  [1.0] x930 = FixMin(Const(16),x929)
                  [2.0] x931 = RegWrite(x927,x930,Set())
              x1002 = UnitPipe(Set(b925, b914),Block(Const(())),None)
                  x964 = UnrolledForeach(Set(),x939,Block(Const(())),List(List(b940)),List(List(b941)),None)
                    Working on pipeLatencies of result Vector(Const(()), x957, x943, x961, x963, x950, x960), schedule Vector(x942, x943, x1793, x946, x947, x1794, x949, x950, x951, x952, x953, x954, x1795, x956, x957, x958, x959, x960, x961, x962, x963)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x942 = FixAdd(b924,b940)
                      x943 = RegRead(x880)
                      x1793 = FixFMA(x942,x943,b913)
                      x946 = FixDivSRA(x1793,Const(4))
                      x947 = FixSLA(x946,Const(4))
                      x1794 = FixSLA(x946,Const(6))
                      x949 = FixSub(x1793,x947)
                      x950 = RegRead(x916)
                      x951 = FixAdd(x949,x950)
                      x952 = FixAdd(x951,Const(15))
                      x953 = FixDivSRA(x952,Const(4))
                      x954 = FixSLA(x953,Const(4))
                      x1795 = FixSLA(x953,Const(6))
                      x956 = FixToFix(x1794,TRUE,_64,_0)
                      x957 = DRAMAddress(x900)
                      x958 = FixAdd(x956,x957)
                      x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1795), (isLoad,Const(true))))
                      x960 = DRAMIsAlloc(x900)
                      x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
                      x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
                      x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x957
                    cur: x957, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x957 = DRAMAddress(x900)
                    Computing fullDFS: x943
                    cur: x943, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x943 = RegRead(x880)
                    Computing fullDFS: x961
                    Computing fullDFS: x959
                    Computing fullDFS: x1795
                    Computing fullDFS: x953
                    Computing fullDFS: x952
                    Computing fullDFS: x951
                    Computing fullDFS: x949
                    Computing fullDFS: x1793
                    Computing fullDFS: x942
                    cur: x942, inReduce: false, latency: 1.0
                    [1.0 = max(0) + 1.0] x942 = FixAdd(b924,b940)
                    [7.0 = max(1.0, 0.0) + 6.0] x1793 = FixFMA(x942,x943,b913)
                    Computing fullDFS: x947
                    Computing fullDFS: x946
                    [7.2 = max(7.0) + 0.2] x946 = FixDivSRA(x1793,Const(4))
                    [7.4 = max(7.2) + 0.2] x947 = FixSLA(x946,Const(4))
                    [8.4 = max(7.0, 7.4) + 1.0] x949 = FixSub(x1793,x947)
                    Computing fullDFS: x950
                    cur: x950, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x950 = RegRead(x916)
                    [9.4 = max(8.4, 0.0) + 1.0] x951 = FixAdd(x949,x950)
                    [10.4 = max(9.4) + 1.0] x952 = FixAdd(x951,Const(15))
                    [10.6 = max(10.4) + 0.2] x953 = FixDivSRA(x952,Const(4))
                    [10.799999999999999 = max(10.6) + 0.2] x1795 = FixSLA(x953,Const(6))
                    Computing fullDFS: x958
                    Computing fullDFS: x956
                    Computing fullDFS: x1794
                    [7.4 = max(7.2) + 0.2] x1794 = FixSLA(x946,Const(6))
                    [7.4 = max(7.4) + 0.0] x956 = FixToFix(x1794,TRUE,_64,_0)
                    [9.4 = max(7.4, 0.0) + 2.0] x958 = FixAdd(x956,x957)
                    [10.8 = max(10.8, 9.4) + 0.0] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1795), (isLoad,Const(true))))
                    Computing fullDFS: x960
                    cur: x960, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x960 = DRAMIsAlloc(x900)
                    [10.8 = max(10.8, 0.0) + 0.0] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
                    Computing fullDFS: x963
                    Computing fullDFS: x962
                    Computing fullDFS: x954
                    [10.799999999999999 = max(10.6) + 0.2] x954 = FixSLA(x953,Const(4))
                    [10.8 = max(8.4, 9.4, 10.8) + 0.0] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
                    [11.8 = max(10.8) + 1.0] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x943 = RegRead(x880)
                      [0.0] x950 = RegRead(x916)
                      [0.0] x957 = DRAMAddress(x900)
                      [0.0] x960 = DRAMIsAlloc(x900)
                      [1.0] x942 = FixAdd(b924,b940)
                      [7.0] x1793 = FixFMA(x942,x943,b913)
                      [7.2] x946 = FixDivSRA(x1793,Const(4))
                      [7.4] x947 = FixSLA(x946,Const(4))
                      [7.4] x1794 = FixSLA(x946,Const(6))
                      [7.4] x956 = FixToFix(x1794,TRUE,_64,_0)
                      [8.4] x949 = FixSub(x1793,x947)
                      [9.4] x951 = FixAdd(x949,x950)
                      [9.4] x958 = FixAdd(x956,x957)
                      [10.4] x952 = FixAdd(x951,Const(15))
                      [10.6] x953 = FixDivSRA(x952,Const(4))
                      [10.8] x954 = FixSLA(x953,Const(4))
                      [10.8] x1795 = FixSLA(x953,Const(6))
                      [10.8] x959 = SimpleStruct(ArrayBuffer((offset,x958), (size,x1795), (isLoad,Const(true))))
                      [10.8] x961 = StreamOutBankedWrite(x935,ArrayBuffer(x959),ArrayBuffer(Set(x960, b941)))
                      [10.8] x962 = SimpleStruct(ArrayBuffer((size,x954), (start,x949), (end,x951)))
                      [11.8] x963 = FIFOBankedEnq(x936,ArrayBuffer(x962),ArrayBuffer(Set(Const(true), b941)))
                  x1001 = UnrolledForeach(Set(),x967,Block(Const(())),List(List(b968)),List(List(b969)),None)
                      x981 = UnitPipe(Set(b969),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x973, x980, x978, x976), schedule Vector(x973, x974, x975, x976, x977, x978, x979, x980)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                          x974 = VecApply(x973,0)
                          x975 = FieldApply(x974,start)
                          x976 = RegWrite(x970,x975,Set())
                          x977 = FieldApply(x974,end)
                          x978 = RegWrite(x971,x977,Set())
                          x979 = FieldApply(x974,size)
                          x980 = RegWrite(x972,x979,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x973
                        cur: x973, inReduce: false, latency: 0.0
                        [0.0 = max(0) + 0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                        Computing fullDFS: x980
                        Computing fullDFS: x979
                        Computing fullDFS: x974
                        [0.0 = max(0.0) + 0.0] x974 = VecApply(x973,0)
                        [0.0 = max(0.0) + 0.0] x979 = FieldApply(x974,size)
                        [1.0 = max(0.0) + 1.0] x980 = RegWrite(x972,x979,Set())
                        Computing fullDFS: x978
                        Computing fullDFS: x977
                        [0.0 = max(0.0) + 0.0] x977 = FieldApply(x974,end)
                        [1.0 = max(0.0) + 1.0] x978 = RegWrite(x971,x977,Set())
                        Computing fullDFS: x976
                        Computing fullDFS: x975
                        [0.0 = max(0.0) + 0.0] x975 = FieldApply(x974,start)
                        [1.0 = max(0.0) + 1.0] x976 = RegWrite(x970,x975,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.0] x973 = FIFOBankedDeq(x936,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                          [0.0] x974 = VecApply(x973,0)
                          [0.0] x975 = FieldApply(x974,start)
                          [0.0] x977 = FieldApply(x974,end)
                          [0.0] x979 = FieldApply(x974,size)
                          [1.0] x976 = RegWrite(x970,x975,Set())
                          [1.0] x978 = RegWrite(x971,x977,Set())
                          [1.0] x980 = RegWrite(x972,x979,Set())
                      x1000 = UnrolledForeach(Set(b969),x984,Block(Const(())),List(List(b985)),List(List(b986)),None)
                        Working on pipeLatencies of result Vector(Const(()), x989, x993, x999, x987), schedule Vector(x987, x988, x989, x990, x991, x992, x993, x994, x1796, x996, x997, x998, x999)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x987 = RegRead(x970)
                          x988 = FixLeq(x987,b985)
                          x989 = RegRead(x971)
                          x990 = FixLst(b985,x989)
                          x991 = And(x988,x990)
                          x992 = FixSub(b985,x987)
                          x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
                          x994 = VecApply(x993,0)
                          x1796 = FixAnd(b968,Const(3))
                          x996 = FixDivSRA(b968,Const(2))
                          x997 = FixSLA(x996,Const(4))
                          x998 = FixAdd(x997,x992)
                          x999 = SRAMBankedWrite(x934,Vector(x994),Vector(List(x1796, Const(0))),Vector(x998),Vector(Set(x991, b986, b969)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x989
                        cur: x989, inReduce: false, latency: 0.0
                        [0.0 = max(0) + 0.0] x989 = RegRead(x971)
                        Computing fullDFS: x993
                        cur: x993, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
                        Computing fullDFS: x999
                        Computing fullDFS: x991
                        Computing fullDFS: x988
                        Computing fullDFS: x987
                        cur: x987, inReduce: false, latency: 0.0
                        [0.0 = max(0) + 0.0] x987 = RegRead(x970)
                        [0.4 = max(0.0) + 0.4] x988 = FixLeq(x987,b985)
                        Computing fullDFS: x990
                        [0.4 = max(0.0) + 0.4] x990 = FixLst(b985,x989)
                        [0.6000000000000001 = max(0.4, 0.4) + 0.2] x991 = And(x988,x990)
                        Computing fullDFS: x994
                        [1.0 = max(1.0) + 0.0] x994 = VecApply(x993,0)
                        Computing fullDFS: x1796
                        cur: x1796, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1796 = FixAnd(b968,Const(3))
                        Computing fullDFS: x998
                        Computing fullDFS: x992
                        [1.0 = max(0.0) + 1.0] x992 = FixSub(b985,x987)
                        Computing fullDFS: x997
                        Computing fullDFS: x996
                        cur: x996, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x996 = FixDivSRA(b968,Const(2))
                        [0.4 = max(0.2) + 0.2] x997 = FixSLA(x996,Const(4))
                        [2.0 = max(1.0, 0.4) + 1.0] x998 = FixAdd(x997,x992)
                        [3.0 = max(0.6, 1.0, 0.2, 2.0) + 1.0] x999 = SRAMBankedWrite(x934,Vector(x994),Vector(List(x1796, Const(0))),Vector(x998),Vector(Set(x991, b986, b969)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.0] x987 = RegRead(x970)
                          [0.0] x989 = RegRead(x971)
                          [0.2] x1796 = FixAnd(b968,Const(3))
                          [0.2] x996 = FixDivSRA(b968,Const(2))
                          [0.4] x988 = FixLeq(x987,b985)
                          [0.4] x990 = FixLst(b985,x989)
                          [0.4] x997 = FixSLA(x996,Const(4))
                          [0.6] x991 = And(x988,x990)
                          [1.0] x992 = FixSub(b985,x987)
                          [1.0] x993 = StreamInBankedRead(x937,ArrayBuffer(Set(b986, b969)))
                          [1.0] x994 = VecApply(x993,0)
                          [2.0] x998 = FixAdd(x997,x992)
                          [3.0] x999 = SRAMBankedWrite(x934,Vector(x994),Vector(List(x1796, Const(0))),Vector(x998),Vector(Set(x991, b986, b969)))
              x1812 = UnrolledForeach(Set(b925, b914),x1004,Block(Const(())),List(List(b1005)),List(List(b1006)),None)
                  x1016 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)
                    Working on pipeLatencies of result Vector(Const(()), x1012, x1015), schedule Vector(x1012, x1013, x1014, x1015)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1012 = RegRead(x879)
                      x1013 = FixSub(x1012,b1005)
                      x1014 = FixMin(Const(16),x1013)
                      x1015 = RegWrite(x1011,x1014,Set())
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1012
                    cur: x1012, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1012 = RegRead(x879)
                    Computing fullDFS: x1015
                    Computing fullDFS: x1014
                    Computing fullDFS: x1013
                    [1.0 = max(0.0) + 1.0] x1013 = FixSub(x1012,b1005)
                    [1.0 = max(1.0) + 0.0] x1014 = FixMin(Const(16),x1013)
                    [2.0 = max(1.0) + 1.0] x1015 = RegWrite(x1011,x1014,Set())
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1012 = RegRead(x879)
                      [1.0] x1013 = FixSub(x1012,b1005)
                      [1.0] x1014 = FixMin(Const(16),x1013)
                      [2.0] x1015 = RegWrite(x1011,x1014,Set())
                  x1811 = ParallelPipe(Set(),Block(Const(())))
                      x1087 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)
                          x1049 = UnrolledForeach(Set(),x1024,Block(Const(())),List(List(b1025)),List(List(b1026)),None)
                            Working on pipeLatencies of result Vector(Const(()), x1046, x1042, x1028, x1035, x1048, x1045), schedule Vector(x1027, x1028, x1797, x1031, x1032, x1798, x1034, x1035, x1036, x1037, x1038, x1039, x1799, x1041, x1042, x1043, x1044, x1045, x1046, x1047, x1048)
                            Memories with both reads and writes in this scope: Set()
                            Done finding cycles: Vector(), Map()
                            ----------------------------------
                            Computing pipeLatencies for scope:
                              x1027 = FixAdd(b913,b1025)
                              x1028 = RegRead(x879)
                              x1797 = FixFMA(x1027,x1028,b1005)
                              x1031 = FixDivSRA(x1797,Const(4))
                              x1032 = FixSLA(x1031,Const(4))
                              x1798 = FixSLA(x1031,Const(6))
                              x1034 = FixSub(x1797,x1032)
                              x1035 = RegRead(x1011)
                              x1036 = FixAdd(x1034,x1035)
                              x1037 = FixAdd(x1036,Const(15))
                              x1038 = FixDivSRA(x1037,Const(4))
                              x1039 = FixSLA(x1038,Const(4))
                              x1799 = FixSLA(x1038,Const(6))
                              x1041 = FixToFix(x1798,TRUE,_64,_0)
                              x1042 = DRAMAddress(x903)
                              x1043 = FixAdd(x1041,x1042)
                              x1044 = SimpleStruct(ArrayBuffer((offset,x1043), (size,x1799), (isLoad,Const(true))))
                              x1045 = DRAMIsAlloc(x903)
                              x1046 = StreamOutBankedWrite(x1020,ArrayBuffer(x1044),ArrayBuffer(Set(x1045, b1026)))
                              x1047 = SimpleStruct(ArrayBuffer((size,x1039), (start,x1034), (end,x1036)))
                              x1048 = FIFOBankedEnq(x1021,ArrayBuffer(x1047),ArrayBuffer(Set(Const(true), b1026)))
                            Computing fullDFS: Const(())
                            Computing fullDFS: x1046
                            Computing fullDFS: x1044
                            Computing fullDFS: x1799
                            Computing fullDFS: x1038
                            Computing fullDFS: x1037
                            Computing fullDFS: x1036
                            Computing fullDFS: x1034
                            Computing fullDFS: x1797
                            Computing fullDFS: x1027
                            cur: x1027, inReduce: false, latency: 1.0
                            [1.0 = max(0) + 1.0] x1027 = FixAdd(b913,b1025)
                            Computing fullDFS: x1028
                            cur: x1028, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1028 = RegRead(x879)
                            [7.0 = max(1.0, 0.0) + 6.0] x1797 = FixFMA(x1027,x1028,b1005)
                            Computing fullDFS: x1032
                            Computing fullDFS: x1031
                            [7.2 = max(7.0) + 0.2] x1031 = FixDivSRA(x1797,Const(4))
                            [7.4 = max(7.2) + 0.2] x1032 = FixSLA(x1031,Const(4))
                            [8.4 = max(7.0, 7.4) + 1.0] x1034 = FixSub(x1797,x1032)
                            Computing fullDFS: x1035
                            cur: x1035, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1035 = RegRead(x1011)
                            [9.4 = max(8.4, 0.0) + 1.0] x1036 = FixAdd(x1034,x1035)
                            [10.4 = max(9.4) + 1.0] x1037 = FixAdd(x1036,Const(15))
                            [10.6 = max(10.4) + 0.2] x1038 = FixDivSRA(x1037,Const(4))
                            [10.799999999999999 = max(10.6) + 0.2] x1799 = FixSLA(x1038,Const(6))
                            Computing fullDFS: x1043
                            Computing fullDFS: x1041
                            Computing fullDFS: x1798
                            [7.4 = max(7.2) + 0.2] x1798 = FixSLA(x1031,Const(6))
                            [7.4 = max(7.4) + 0.0] x1041 = FixToFix(x1798,TRUE,_64,_0)
                            Computing fullDFS: x1042
                            cur: x1042, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1042 = DRAMAddress(x903)
                            [9.4 = max(7.4, 0.0) + 2.0] x1043 = FixAdd(x1041,x1042)
                            [10.8 = max(10.8, 9.4) + 0.0] x1044 = SimpleStruct(ArrayBuffer((offset,x1043), (size,x1799), (isLoad,Const(true))))
                            Computing fullDFS: x1045
                            cur: x1045, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1045 = DRAMIsAlloc(x903)
                            [10.8 = max(10.8, 0.0) + 0.0] x1046 = StreamOutBankedWrite(x1020,ArrayBuffer(x1044),ArrayBuffer(Set(x1045, b1026)))
                            Computing fullDFS: x1048
                            Computing fullDFS: x1047
                            Computing fullDFS: x1039
                            [10.799999999999999 = max(10.6) + 0.2] x1039 = FixSLA(x1038,Const(4))
                            [10.8 = max(8.4, 9.4, 10.8) + 0.0] x1047 = SimpleStruct(ArrayBuffer((size,x1039), (start,x1034), (end,x1036)))
                            [11.8 = max(10.8) + 1.0] x1048 = FIFOBankedEnq(x1021,ArrayBuffer(x1047),ArrayBuffer(Set(Const(true), b1026)))
                            Cycles: Map()
                              Schedule after pipeLatencies calculation:
                              [0.0] x1028 = RegRead(x879)
                              [0.0] x1035 = RegRead(x1011)
                              [0.0] x1042 = DRAMAddress(x903)
                              [0.0] x1045 = DRAMIsAlloc(x903)
                              [1.0] x1027 = FixAdd(b913,b1025)
                              [7.0] x1797 = FixFMA(x1027,x1028,b1005)
                              [7.2] x1031 = FixDivSRA(x1797,Const(4))
                              [7.4] x1032 = FixSLA(x1031,Const(4))
                              [7.4] x1798 = FixSLA(x1031,Const(6))
                              [7.4] x1041 = FixToFix(x1798,TRUE,_64,_0)
                              [8.4] x1034 = FixSub(x1797,x1032)
                              [9.4] x1036 = FixAdd(x1034,x1035)
                              [9.4] x1043 = FixAdd(x1041,x1042)
                              [10.4] x1037 = FixAdd(x1036,Const(15))
                              [10.6] x1038 = FixDivSRA(x1037,Const(4))
                              [10.8] x1039 = FixSLA(x1038,Const(4))
                              [10.8] x1799 = FixSLA(x1038,Const(6))
                              [10.8] x1044 = SimpleStruct(ArrayBuffer((offset,x1043), (size,x1799), (isLoad,Const(true))))
                              [10.8] x1046 = StreamOutBankedWrite(x1020,ArrayBuffer(x1044),ArrayBuffer(Set(x1045, b1026)))
                              [10.8] x1047 = SimpleStruct(ArrayBuffer((size,x1039), (start,x1034), (end,x1036)))
                              [11.8] x1048 = FIFOBankedEnq(x1021,ArrayBuffer(x1047),ArrayBuffer(Set(Const(true), b1026)))
                          x1086 = UnrolledForeach(Set(),x1052,Block(Const(())),List(List(b1053)),List(List(b1054)),None)
                              x1066 = UnitPipe(Set(b1054),Block(Const(())),None)
                                Working on pipeLatencies of result Vector(Const(()), x1063, x1058, x1061, x1065), schedule Vector(x1058, x1059, x1060, x1061, x1062, x1063, x1064, x1065)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1058 = FIFOBankedDeq(x1021,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                  x1059 = VecApply(x1058,0)
                                  x1060 = FieldApply(x1059,start)
                                  x1061 = RegWrite(x1055,x1060,Set())
                                  x1062 = FieldApply(x1059,end)
                                  x1063 = RegWrite(x1056,x1062,Set())
                                  x1064 = FieldApply(x1059,size)
                                  x1065 = RegWrite(x1057,x1064,Set())
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1063
                                Computing fullDFS: x1062
                                Computing fullDFS: x1059
                                Computing fullDFS: x1058
                                cur: x1058, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1058 = FIFOBankedDeq(x1021,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                [0.0 = max(0.0) + 0.0] x1059 = VecApply(x1058,0)
                                [0.0 = max(0.0) + 0.0] x1062 = FieldApply(x1059,end)
                                [1.0 = max(0.0) + 1.0] x1063 = RegWrite(x1056,x1062,Set())
                                Computing fullDFS: x1061
                                Computing fullDFS: x1060
                                [0.0 = max(0.0) + 0.0] x1060 = FieldApply(x1059,start)
                                [1.0 = max(0.0) + 1.0] x1061 = RegWrite(x1055,x1060,Set())
                                Computing fullDFS: x1065
                                Computing fullDFS: x1064
                                [0.0 = max(0.0) + 0.0] x1064 = FieldApply(x1059,size)
                                [1.0 = max(0.0) + 1.0] x1065 = RegWrite(x1057,x1064,Set())
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1058 = FIFOBankedDeq(x1021,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                  [0.0] x1059 = VecApply(x1058,0)
                                  [0.0] x1060 = FieldApply(x1059,start)
                                  [0.0] x1062 = FieldApply(x1059,end)
                                  [0.0] x1064 = FieldApply(x1059,size)
                                  [1.0] x1061 = RegWrite(x1055,x1060,Set())
                                  [1.0] x1063 = RegWrite(x1056,x1062,Set())
                                  [1.0] x1065 = RegWrite(x1057,x1064,Set())
                              x1085 = UnrolledForeach(Set(b1054),x1069,Block(Const(())),List(List(b1070)),List(List(b1071)),None)
                                Working on pipeLatencies of result Vector(Const(()), x1078, x1072, x1074, x1084), schedule Vector(x1072, x1073, x1074, x1075, x1076, x1077, x1078, x1079, x1800, x1081, x1082, x1083, x1084)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1072 = RegRead(x1055)
                                  x1073 = FixLeq(x1072,b1070)
                                  x1074 = RegRead(x1056)
                                  x1075 = FixLst(b1070,x1074)
                                  x1076 = And(x1073,x1075)
                                  x1077 = FixSub(b1070,x1072)
                                  x1078 = StreamInBankedRead(x1022,ArrayBuffer(Set(b1071, b1054)))
                                  x1079 = VecApply(x1078,0)
                                  x1800 = FixAnd(x1077,Const(3))
                                  x1081 = FixSLA(b1053,Const(2))
                                  x1082 = FixDivSRA(x1077,Const(2))
                                  x1083 = FixAdd(x1081,x1082)
                                  x1084 = SRAMBankedWrite(x1017,Vector(x1079),Vector(List(Const(0), x1800)),Vector(x1083),Vector(Set(x1076, b1071, b1054)))
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1078
                                cur: x1078, inReduce: false, latency: 1.0
                                [1.0 = max(0) + 1.0] x1078 = StreamInBankedRead(x1022,ArrayBuffer(Set(b1071, b1054)))
                                Computing fullDFS: x1072
                                cur: x1072, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1072 = RegRead(x1055)
                                Computing fullDFS: x1074
                                cur: x1074, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1074 = RegRead(x1056)
                                Computing fullDFS: x1084
                                Computing fullDFS: x1076
                                Computing fullDFS: x1073
                                [0.4 = max(0.0) + 0.4] x1073 = FixLeq(x1072,b1070)
                                Computing fullDFS: x1075
                                [0.4 = max(0.0) + 0.4] x1075 = FixLst(b1070,x1074)
                                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1076 = And(x1073,x1075)
                                Computing fullDFS: x1079
                                [1.0 = max(1.0) + 0.0] x1079 = VecApply(x1078,0)
                                Computing fullDFS: x1800
                                Computing fullDFS: x1077
                                [1.0 = max(0.0) + 1.0] x1077 = FixSub(b1070,x1072)
                                [1.2 = max(1.0) + 0.2] x1800 = FixAnd(x1077,Const(3))
                                Computing fullDFS: x1083
                                Computing fullDFS: x1081
                                cur: x1081, inReduce: false, latency: 0.2
                                [0.2 = max(0) + 0.2] x1081 = FixSLA(b1053,Const(2))
                                Computing fullDFS: x1082
                                [1.2 = max(1.0) + 0.2] x1082 = FixDivSRA(x1077,Const(2))
                                [2.2 = max(0.2, 1.2) + 1.0] x1083 = FixAdd(x1081,x1082)
                                [3.2 = max(0.6, 1.0, 1.2, 2.2) + 1.0] x1084 = SRAMBankedWrite(x1017,Vector(x1079),Vector(List(Const(0), x1800)),Vector(x1083),Vector(Set(x1076, b1071, b1054)))
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1072 = RegRead(x1055)
                                  [0.0] x1074 = RegRead(x1056)
                                  [0.2] x1081 = FixSLA(b1053,Const(2))
                                  [0.4] x1073 = FixLeq(x1072,b1070)
                                  [0.4] x1075 = FixLst(b1070,x1074)
                                  [0.6] x1076 = And(x1073,x1075)
                                  [1.0] x1077 = FixSub(b1070,x1072)
                                  [1.0] x1078 = StreamInBankedRead(x1022,ArrayBuffer(Set(b1071, b1054)))
                                  [1.0] x1079 = VecApply(x1078,0)
                                  [1.2] x1800 = FixAnd(x1077,Const(3))
                                  [1.2] x1082 = FixDivSRA(x1077,Const(2))
                                  [2.2] x1083 = FixAdd(x1081,x1082)
                                  [3.2] x1084 = SRAMBankedWrite(x1017,Vector(x1079),Vector(List(Const(0), x1800)),Vector(x1083),Vector(Set(x1076, b1071, b1054)))
                      x1158 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)
                          x1117 = UnrolledForeach(Set(),x1092,Block(Const(())),List(List(b1093)),List(List(b1094)),None)
                            Working on pipeLatencies of result Vector(Const(()), x1110, x1096, x1114, x1103, x1113, x1116), schedule Vector(x1095, x1096, x1801, x1099, x1100, x1802, x1102, x1103, x1104, x1105, x1106, x1107, x1803, x1109, x1110, x1111, x1112, x1113, x1114, x1115, x1116)
                            Memories with both reads and writes in this scope: Set()
                            Done finding cycles: Vector(), Map()
                            ----------------------------------
                            Computing pipeLatencies for scope:
                              x1095 = FixAdd(b924,b1093)
                              x1096 = RegRead(x879)
                              x1801 = FixFMA(x1095,x1096,b1005)
                              x1099 = FixDivSRA(x1801,Const(4))
                              x1100 = FixSLA(x1099,Const(4))
                              x1802 = FixSLA(x1099,Const(6))
                              x1102 = FixSub(x1801,x1100)
                              x1103 = RegRead(x1011)
                              x1104 = FixAdd(x1102,x1103)
                              x1105 = FixAdd(x1104,Const(15))
                              x1106 = FixDivSRA(x1105,Const(4))
                              x1107 = FixSLA(x1106,Const(4))
                              x1803 = FixSLA(x1106,Const(6))
                              x1109 = FixToFix(x1802,TRUE,_64,_0)
                              x1110 = DRAMAddress(x906)
                              x1111 = FixAdd(x1109,x1110)
                              x1112 = SimpleStruct(ArrayBuffer((offset,x1111), (size,x1803), (isLoad,Const(true))))
                              x1113 = DRAMIsAlloc(x906)
                              x1114 = StreamOutBankedWrite(x1088,ArrayBuffer(x1112),ArrayBuffer(Set(x1113, b1094)))
                              x1115 = SimpleStruct(ArrayBuffer((size,x1107), (start,x1102), (end,x1104)))
                              x1116 = FIFOBankedEnq(x1089,ArrayBuffer(x1115),ArrayBuffer(Set(Const(true), b1094)))
                            Computing fullDFS: Const(())
                            Computing fullDFS: x1110
                            cur: x1110, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1110 = DRAMAddress(x906)
                            Computing fullDFS: x1096
                            cur: x1096, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1096 = RegRead(x879)
                            Computing fullDFS: x1114
                            Computing fullDFS: x1112
                            Computing fullDFS: x1803
                            Computing fullDFS: x1106
                            Computing fullDFS: x1105
                            Computing fullDFS: x1104
                            Computing fullDFS: x1102
                            Computing fullDFS: x1801
                            Computing fullDFS: x1095
                            cur: x1095, inReduce: false, latency: 1.0
                            [1.0 = max(0) + 1.0] x1095 = FixAdd(b924,b1093)
                            [7.0 = max(1.0, 0.0) + 6.0] x1801 = FixFMA(x1095,x1096,b1005)
                            Computing fullDFS: x1100
                            Computing fullDFS: x1099
                            [7.2 = max(7.0) + 0.2] x1099 = FixDivSRA(x1801,Const(4))
                            [7.4 = max(7.2) + 0.2] x1100 = FixSLA(x1099,Const(4))
                            [8.4 = max(7.0, 7.4) + 1.0] x1102 = FixSub(x1801,x1100)
                            Computing fullDFS: x1103
                            cur: x1103, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1103 = RegRead(x1011)
                            [9.4 = max(8.4, 0.0) + 1.0] x1104 = FixAdd(x1102,x1103)
                            [10.4 = max(9.4) + 1.0] x1105 = FixAdd(x1104,Const(15))
                            [10.6 = max(10.4) + 0.2] x1106 = FixDivSRA(x1105,Const(4))
                            [10.799999999999999 = max(10.6) + 0.2] x1803 = FixSLA(x1106,Const(6))
                            Computing fullDFS: x1111
                            Computing fullDFS: x1109
                            Computing fullDFS: x1802
                            [7.4 = max(7.2) + 0.2] x1802 = FixSLA(x1099,Const(6))
                            [7.4 = max(7.4) + 0.0] x1109 = FixToFix(x1802,TRUE,_64,_0)
                            [9.4 = max(7.4, 0.0) + 2.0] x1111 = FixAdd(x1109,x1110)
                            [10.8 = max(10.8, 9.4) + 0.0] x1112 = SimpleStruct(ArrayBuffer((offset,x1111), (size,x1803), (isLoad,Const(true))))
                            Computing fullDFS: x1113
                            cur: x1113, inReduce: false, latency: 0.0
                            [0.0 = max(0) + 0.0] x1113 = DRAMIsAlloc(x906)
                            [10.8 = max(10.8, 0.0) + 0.0] x1114 = StreamOutBankedWrite(x1088,ArrayBuffer(x1112),ArrayBuffer(Set(x1113, b1094)))
                            Computing fullDFS: x1116
                            Computing fullDFS: x1115
                            Computing fullDFS: x1107
                            [10.799999999999999 = max(10.6) + 0.2] x1107 = FixSLA(x1106,Const(4))
                            [10.8 = max(8.4, 9.4, 10.8) + 0.0] x1115 = SimpleStruct(ArrayBuffer((size,x1107), (start,x1102), (end,x1104)))
                            [11.8 = max(10.8) + 1.0] x1116 = FIFOBankedEnq(x1089,ArrayBuffer(x1115),ArrayBuffer(Set(Const(true), b1094)))
                            Cycles: Map()
                              Schedule after pipeLatencies calculation:
                              [0.0] x1096 = RegRead(x879)
                              [0.0] x1103 = RegRead(x1011)
                              [0.0] x1110 = DRAMAddress(x906)
                              [0.0] x1113 = DRAMIsAlloc(x906)
                              [1.0] x1095 = FixAdd(b924,b1093)
                              [7.0] x1801 = FixFMA(x1095,x1096,b1005)
                              [7.2] x1099 = FixDivSRA(x1801,Const(4))
                              [7.4] x1100 = FixSLA(x1099,Const(4))
                              [7.4] x1802 = FixSLA(x1099,Const(6))
                              [7.4] x1109 = FixToFix(x1802,TRUE,_64,_0)
                              [8.4] x1102 = FixSub(x1801,x1100)
                              [9.4] x1104 = FixAdd(x1102,x1103)
                              [9.4] x1111 = FixAdd(x1109,x1110)
                              [10.4] x1105 = FixAdd(x1104,Const(15))
                              [10.6] x1106 = FixDivSRA(x1105,Const(4))
                              [10.8] x1107 = FixSLA(x1106,Const(4))
                              [10.8] x1803 = FixSLA(x1106,Const(6))
                              [10.8] x1112 = SimpleStruct(ArrayBuffer((offset,x1111), (size,x1803), (isLoad,Const(true))))
                              [10.8] x1114 = StreamOutBankedWrite(x1088,ArrayBuffer(x1112),ArrayBuffer(Set(x1113, b1094)))
                              [10.8] x1115 = SimpleStruct(ArrayBuffer((size,x1107), (start,x1102), (end,x1104)))
                              [11.8] x1116 = FIFOBankedEnq(x1089,ArrayBuffer(x1115),ArrayBuffer(Set(Const(true), b1094)))
                          x1157 = UnrolledForeach(Set(),x1120,Block(Const(())),List(List(b1121)),List(List(b1122)),None)
                              x1134 = UnitPipe(Set(b1122),Block(Const(())),None)
                                Working on pipeLatencies of result Vector(Const(()), x1131, x1126, x1133, x1129), schedule Vector(x1126, x1127, x1128, x1129, x1130, x1131, x1132, x1133)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1126 = FIFOBankedDeq(x1089,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                  x1127 = VecApply(x1126,0)
                                  x1128 = FieldApply(x1127,start)
                                  x1129 = RegWrite(x1123,x1128,Set())
                                  x1130 = FieldApply(x1127,end)
                                  x1131 = RegWrite(x1124,x1130,Set())
                                  x1132 = FieldApply(x1127,size)
                                  x1133 = RegWrite(x1125,x1132,Set())
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1131
                                Computing fullDFS: x1130
                                Computing fullDFS: x1127
                                Computing fullDFS: x1126
                                cur: x1126, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1126 = FIFOBankedDeq(x1089,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                [0.0 = max(0.0) + 0.0] x1127 = VecApply(x1126,0)
                                [0.0 = max(0.0) + 0.0] x1130 = FieldApply(x1127,end)
                                [1.0 = max(0.0) + 1.0] x1131 = RegWrite(x1124,x1130,Set())
                                Computing fullDFS: x1133
                                Computing fullDFS: x1132
                                [0.0 = max(0.0) + 0.0] x1132 = FieldApply(x1127,size)
                                [1.0 = max(0.0) + 1.0] x1133 = RegWrite(x1125,x1132,Set())
                                Computing fullDFS: x1129
                                Computing fullDFS: x1128
                                [0.0 = max(0.0) + 0.0] x1128 = FieldApply(x1127,start)
                                [1.0 = max(0.0) + 1.0] x1129 = RegWrite(x1123,x1128,Set())
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1126 = FIFOBankedDeq(x1089,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                                  [0.0] x1127 = VecApply(x1126,0)
                                  [0.0] x1128 = FieldApply(x1127,start)
                                  [0.0] x1130 = FieldApply(x1127,end)
                                  [0.0] x1132 = FieldApply(x1127,size)
                                  [1.0] x1129 = RegWrite(x1123,x1128,Set())
                                  [1.0] x1131 = RegWrite(x1124,x1130,Set())
                                  [1.0] x1133 = RegWrite(x1125,x1132,Set())
                              x1156 = UnrolledForeach(Set(b1122),x1137,Block(Const(())),List(List(b1138)),List(List(b1139)),None)
                                Working on pipeLatencies of result Vector(Const(()), x1142, x1155, x1146, x1154, x1140), schedule Vector(x1140, x1141, x1142, x1143, x1144, x1145, x1146, x1147, x1804, x1805, x1150, x1151, x1152, x1153, x1154, x1155)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1140 = RegRead(x1123)
                                  x1141 = FixLeq(x1140,b1138)
                                  x1142 = RegRead(x1124)
                                  x1143 = FixLst(b1138,x1142)
                                  x1144 = And(x1141,x1143)
                                  x1145 = FixSub(b1138,x1140)
                                  x1146 = StreamInBankedRead(x1090,ArrayBuffer(Set(b1139, b1122)))
                                  x1147 = VecApply(x1146,0)
                                  x1804 = FixAnd(b1121,Const(3))
                                  x1805 = FixAnd(x1145,Const(3))
                                  x1150 = FixDivSRA(b1121,Const(2))
                                  x1151 = FixSLA(x1150,Const(2))
                                  x1152 = FixDivSRA(x1145,Const(2))
                                  x1153 = FixAdd(x1151,x1152)
                                  x1154 = SRAMBankedWrite(x1019,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                                  x1155 = SRAMBankedWrite(x1018,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1142
                                cur: x1142, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1142 = RegRead(x1124)
                                Computing fullDFS: x1155
                                Computing fullDFS: x1144
                                Computing fullDFS: x1141
                                Computing fullDFS: x1140
                                cur: x1140, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1140 = RegRead(x1123)
                                [0.4 = max(0.0) + 0.4] x1141 = FixLeq(x1140,b1138)
                                Computing fullDFS: x1143
                                [0.4 = max(0.0) + 0.4] x1143 = FixLst(b1138,x1142)
                                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1144 = And(x1141,x1143)
                                Computing fullDFS: x1147
                                Computing fullDFS: x1146
                                cur: x1146, inReduce: false, latency: 1.0
                                [1.0 = max(0) + 1.0] x1146 = StreamInBankedRead(x1090,ArrayBuffer(Set(b1139, b1122)))
                                [1.0 = max(1.0) + 0.0] x1147 = VecApply(x1146,0)
                                Computing fullDFS: x1804
                                cur: x1804, inReduce: false, latency: 0.2
                                [0.2 = max(0) + 0.2] x1804 = FixAnd(b1121,Const(3))
                                Computing fullDFS: x1805
                                Computing fullDFS: x1145
                                [1.0 = max(0.0) + 1.0] x1145 = FixSub(b1138,x1140)
                                [1.2 = max(1.0) + 0.2] x1805 = FixAnd(x1145,Const(3))
                                Computing fullDFS: x1153
                                Computing fullDFS: x1151
                                Computing fullDFS: x1150
                                cur: x1150, inReduce: false, latency: 0.2
                                [0.2 = max(0) + 0.2] x1150 = FixDivSRA(b1121,Const(2))
                                [0.4 = max(0.2) + 0.2] x1151 = FixSLA(x1150,Const(2))
                                Computing fullDFS: x1152
                                [1.2 = max(1.0) + 0.2] x1152 = FixDivSRA(x1145,Const(2))
                                [2.2 = max(0.4, 1.2) + 1.0] x1153 = FixAdd(x1151,x1152)
                                [3.2 = max(0.6, 1.0, 0.2, 1.2, 2.2) + 1.0] x1155 = SRAMBankedWrite(x1018,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                                Computing fullDFS: x1154
                                [3.2 = max(0.6, 1.0, 0.2, 1.2, 2.2) + 1.0] x1154 = SRAMBankedWrite(x1019,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1140 = RegRead(x1123)
                                  [0.0] x1142 = RegRead(x1124)
                                  [0.2] x1804 = FixAnd(b1121,Const(3))
                                  [0.2] x1150 = FixDivSRA(b1121,Const(2))
                                  [0.4] x1141 = FixLeq(x1140,b1138)
                                  [0.4] x1143 = FixLst(b1138,x1142)
                                  [0.4] x1151 = FixSLA(x1150,Const(2))
                                  [0.6] x1144 = And(x1141,x1143)
                                  [1.0] x1145 = FixSub(b1138,x1140)
                                  [1.0] x1146 = StreamInBankedRead(x1090,ArrayBuffer(Set(b1139, b1122)))
                                  [1.0] x1147 = VecApply(x1146,0)
                                  [1.2] x1805 = FixAnd(x1145,Const(3))
                                  [1.2] x1152 = FixDivSRA(x1145,Const(2))
                                  [2.2] x1153 = FixAdd(x1151,x1152)
                                  [3.2] x1154 = SRAMBankedWrite(x1019,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                                  [3.2] x1155 = SRAMBankedWrite(x1018,Vector(x1147),Vector(List(x1804, x1805)),Vector(x1153),Vector(Set(x1144, b1139, b1122)))
                  x1638 = UnrolledForeach(Set(b1006, b925, b914),x1160,Block(Const(())),List(List(b1161, b1162, b1163, b1164)),List(List(b1165, b1166, b1167, b1168)),None)
                      x1637 = ParallelPipe(Set(b1006, b925, b914),Block(Const(())))
                          x1294 = UnrolledForeach(Set(b1165, b1006, b925, b914),x1177,Block(Const(())),List(List(b1181, b1182, b1183, b1184)),List(List(b1185, b1186, b1187, b1188)),None)
                              x1293 = ParallelPipe(Set(b1165, b1006, b925, b914),Block(Const(())))
                                  x1223 = UnrolledForeach(Set(b925, b1006, b1185, b914, b1165),x1197,Block(Const(())),List(List(b1201)),List(List(b1202)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1222, x1217, x1209, x1213, x1221), schedule Vector(x1205, x1206, x1207, x1208, x1209, x1210, x1211, x1212, x1213, x1214, x1215, x1216, x1217, x1218, x1219, x1220, x1221, x1222)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1209, x1222): Set()
                                    NonConflictSets(x1209, x1222): Set()
                                    Found Cycle: x1209, x1222
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                      x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1210 = VecApply(x1209,0)
                                        x1220 = FixAdd(x1210,x1219)
                                        x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1209,x1222)), Map(x1222 -> List(AccumTriple(x1018,x1209,x1222)), x1210 -> List(AccumTriple(x1018,x1209,x1222)), x1209 -> List(AccumTriple(x1018,x1209,x1222)), x1220 -> List(AccumTriple(x1018,x1209,x1222)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1205 = FixDivSRA(b1161,Const(2))
                                      x1206 = FixSLA(x1205,Const(2))
                                      x1207 = FixDivSRA(b1181,Const(2))
                                      x1208 = FixAdd(x1206,x1207)
                                      x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1210 = VecApply(x1209,0)
                                      x1211 = FixSLA(x1205,Const(4))
                                      x1212 = FixAdd(x1211,b1201)
                                      x1213 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1212),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1214 = VecApply(x1213,0)
                                      x1215 = FixSLA(b1201,Const(2))
                                      x1216 = FixAdd(x1215,x1207)
                                      x1217 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1216),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1218 = VecApply(x1217,0)
                                      x1219 = FixMul(x1214,x1218)
                                      x1220 = FixAdd(x1210,x1219)
                                      x1221 = SRAMBankedWrite(x1019,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                      x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1222
                                    Computing fullDFS: x1208
                                    Computing fullDFS: x1206
                                    Computing fullDFS: x1205
                                    cur: x1205, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1205 = FixDivSRA(b1161,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1206 = FixSLA(x1205,Const(2))
                                    Computing fullDFS: x1207
                                    cur: x1207, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1207 = FixDivSRA(b1181,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1208 = FixAdd(x1206,x1207)
                                    Computing fullDFS: x1209
                                    [3.4 = max(1.4) + 2.0] x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1220
                                    Computing fullDFS: x1210
                                    cycle deps of x1210: Vector(x1209, x1210)
                                    [3.4 = max(3.4) + 0.0] x1210 = VecApply(x1209,0)[cycle]
                                    Computing fullDFS: x1219
                                    Computing fullDFS: x1214
                                    Computing fullDFS: x1213
                                    Computing fullDFS: x1212
                                    Computing fullDFS: x1211
                                    [0.4 = max(0.2) + 0.2] x1211 = FixSLA(x1205,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1212 = FixAdd(x1211,b1201)
                                    [3.4 = max(1.4) + 2.0] x1213 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1212),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1214 = VecApply(x1213,0)
                                    Computing fullDFS: x1218
                                    Computing fullDFS: x1217
                                    Computing fullDFS: x1216
                                    Computing fullDFS: x1215
                                    cur: x1215, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1215 = FixSLA(b1201,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1216 = FixAdd(x1215,x1207)
                                    [3.2 = max(1.2) + 2.0] x1217 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1216),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1218 = VecApply(x1217,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1219 = FixMul(x1214,x1218)
                                    cycle deps of x1220: Vector(x1209, x1210, x1220)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1220 = FixAdd(x1210,x1219)[cycle]
                                    cycle deps of x1222: Vector(x1209, x1209, x1210, x1220, x1222)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))[cycle]
                                    Computing fullDFS: x1221
                                    cycle deps of x1221: Vector(x1209, x1210, x1220, x1221)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1221 = SRAMBankedWrite(x1019,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                    Cycle #0: write: x1222, cycle: x1209, x1209, x1210, x1220, x1222
                                    x1220 = FixAdd(x1210,x1219) [10.4]
                                      [10.4 = 11.4 - 1.0] x1221 = SRAMBankedWrite(x1019,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                      [10.4 = 11.4 - 1.0] x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                      [10.4]
                                    x1210 = VecApply(x1209,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1220 = FixAdd(x1210,x1219)
                                      [9.4]
                                    x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1210 = VecApply(x1209,0)
                                      [9.4]
                                    x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1210 = VecApply(x1209,0)
                                      [9.4]
                                    Cycles: Map(x1222 -> Vector(x1209, x1209, x1210, x1220, x1222), x1210 -> Vector(x1209, x1210), x1209 -> List(x1209), x1221 -> Vector(x1209, x1210, x1220, x1221), x1220 -> Vector(x1209, x1210, x1220))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1209 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
                                    Pushing x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                    Access: x1222 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,0,Vector(0),Vector(0)))
                                    Pushing x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1209),x1018,1.0)
                                    AAACycle(Vector(x1222),x1018,1.0)
                                    WARCycle(x1209,x1222,x1018,Vector(x1209, x1209, x1210, x1220, x1222),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1205 = FixDivSRA(b1161,Const(2))
                                      [0.2] x1207 = FixDivSRA(b1181,Const(2))
                                      [0.2] x1215 = FixSLA(b1201,Const(2))
                                      [0.4] x1206 = FixSLA(x1205,Const(2))
                                      [0.4] x1211 = FixSLA(x1205,Const(4))
                                      [1.2] x1216 = FixAdd(x1215,x1207)
                                      [1.4] x1208 = FixAdd(x1206,x1207)
                                      [1.4] x1212 = FixAdd(x1211,b1201)
                                      [3.2] x1217 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1216),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1218 = VecApply(x1217,0)
                                      [3.4] x1213 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1212),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1214 = VecApply(x1213,0)
                                      [9.4] x1209 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1210 = VecApply(x1209,0)
                                      [9.4] x1219 = FixMul(x1214,x1218)
                                      [10.4] x1220 = FixAdd(x1210,x1219)
                                      [11.4] x1221 = SRAMBankedWrite(x1019,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                      [11.4] x1222 = SRAMBankedWrite(x1018,Vector(x1220),Vector(List(Const(0), Const(0))),Vector(x1208),Vector(Set(b925, b1006, b1202, b1185, b914, b1165)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1246 = UnrolledForeach(Set(b925, b1006, b1186, b914, b1165),x1198,Block(Const(())),List(List(b1224)),List(List(b1225)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1232, x1245, x1240, x1244, x1236), schedule Vector(x1228, x1229, x1230, x1231, x1232, x1233, x1234, x1235, x1236, x1237, x1238, x1239, x1240, x1241, x1242, x1243, x1244, x1245)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1232, x1245): Set()
                                    NonConflictSets(x1232, x1245): Set()
                                    Found Cycle: x1232, x1245
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                      x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1233 = VecApply(x1232,0)
                                        x1243 = FixAdd(x1233,x1242)
                                        x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1232,x1245)), Map(x1243 -> List(AccumTriple(x1018,x1232,x1245)), x1245 -> List(AccumTriple(x1018,x1232,x1245)), x1233 -> List(AccumTriple(x1018,x1232,x1245)), x1232 -> List(AccumTriple(x1018,x1232,x1245)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1228 = FixDivSRA(b1161,Const(2))
                                      x1229 = FixSLA(x1228,Const(2))
                                      x1230 = FixDivSRA(b1182,Const(2))
                                      x1231 = FixAdd(x1229,x1230)
                                      x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1233 = VecApply(x1232,0)
                                      x1234 = FixSLA(x1228,Const(4))
                                      x1235 = FixAdd(x1234,b1224)
                                      x1236 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1235),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1237 = VecApply(x1236,0)
                                      x1238 = FixSLA(b1224,Const(2))
                                      x1239 = FixAdd(x1238,x1230)
                                      x1240 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1239),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1241 = VecApply(x1240,0)
                                      x1242 = FixMul(x1237,x1241)
                                      x1243 = FixAdd(x1233,x1242)
                                      x1244 = SRAMBankedWrite(x1019,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                      x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1232
                                    Computing fullDFS: x1231
                                    Computing fullDFS: x1229
                                    Computing fullDFS: x1228
                                    cur: x1228, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1228 = FixDivSRA(b1161,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1229 = FixSLA(x1228,Const(2))
                                    Computing fullDFS: x1230
                                    cur: x1230, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1230 = FixDivSRA(b1182,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1231 = FixAdd(x1229,x1230)
                                    [3.4 = max(1.4) + 2.0] x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1245
                                    Computing fullDFS: x1243
                                    Computing fullDFS: x1233
                                    cycle deps of x1233: Vector(x1232, x1233)
                                    [3.4 = max(3.4) + 0.0] x1233 = VecApply(x1232,0)[cycle]
                                    Computing fullDFS: x1242
                                    Computing fullDFS: x1237
                                    Computing fullDFS: x1236
                                    Computing fullDFS: x1235
                                    Computing fullDFS: x1234
                                    [0.4 = max(0.2) + 0.2] x1234 = FixSLA(x1228,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1235 = FixAdd(x1234,b1224)
                                    [3.4 = max(1.4) + 2.0] x1236 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1235),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1237 = VecApply(x1236,0)
                                    Computing fullDFS: x1241
                                    Computing fullDFS: x1240
                                    Computing fullDFS: x1239
                                    Computing fullDFS: x1238
                                    cur: x1238, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1238 = FixSLA(b1224,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1239 = FixAdd(x1238,x1230)
                                    [3.2 = max(1.2) + 2.0] x1240 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1239),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1241 = VecApply(x1240,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1242 = FixMul(x1237,x1241)
                                    cycle deps of x1243: Vector(x1232, x1233, x1243)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1243 = FixAdd(x1233,x1242)[cycle]
                                    cycle deps of x1245: Vector(x1232, x1232, x1233, x1243, x1245)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))[cycle]
                                    Computing fullDFS: x1244
                                    cycle deps of x1244: Vector(x1232, x1233, x1243, x1244)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1244 = SRAMBankedWrite(x1019,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                    Cycle #0: write: x1245, cycle: x1232, x1232, x1233, x1243, x1245
                                    x1243 = FixAdd(x1233,x1242) [10.4]
                                      [10.4 = 11.4 - 1.0] x1244 = SRAMBankedWrite(x1019,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                      [10.4 = 11.4 - 1.0] x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                      [10.4]
                                    x1233 = VecApply(x1232,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1243 = FixAdd(x1233,x1242)
                                      [9.4]
                                    x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1233 = VecApply(x1232,0)
                                      [9.4]
                                    x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1233 = VecApply(x1232,0)
                                      [9.4]
                                    Cycles: Map(x1243 -> Vector(x1232, x1233, x1243), x1245 -> Vector(x1232, x1232, x1233, x1243, x1245), x1233 -> Vector(x1232, x1233), x1232 -> List(x1232), x1244 -> Vector(x1232, x1233, x1243, x1244))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1232 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,1,Vector(1),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,1,Vector(1),Vector(0)))
                                    Pushing x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                    Access: x1245 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,1,Vector(1),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,1,Vector(1),Vector(0)))
                                    Pushing x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1232),x1018,1.0)
                                    AAACycle(Vector(x1245),x1018,1.0)
                                    WARCycle(x1232,x1245,x1018,Vector(x1232, x1232, x1233, x1243, x1245),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1228 = FixDivSRA(b1161,Const(2))
                                      [0.2] x1230 = FixDivSRA(b1182,Const(2))
                                      [0.2] x1238 = FixSLA(b1224,Const(2))
                                      [0.4] x1229 = FixSLA(x1228,Const(2))
                                      [0.4] x1234 = FixSLA(x1228,Const(4))
                                      [1.2] x1239 = FixAdd(x1238,x1230)
                                      [1.4] x1231 = FixAdd(x1229,x1230)
                                      [1.4] x1235 = FixAdd(x1234,b1224)
                                      [3.2] x1240 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1239),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1241 = VecApply(x1240,0)
                                      [3.4] x1236 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1235),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1237 = VecApply(x1236,0)
                                      [9.4] x1232 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1233 = VecApply(x1232,0)
                                      [9.4] x1242 = FixMul(x1237,x1241)
                                      [10.4] x1243 = FixAdd(x1233,x1242)
                                      [11.4] x1244 = SRAMBankedWrite(x1019,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                      [11.4] x1245 = SRAMBankedWrite(x1018,Vector(x1243),Vector(List(Const(0), Const(1))),Vector(x1231),Vector(Set(b925, b1006, b1225, b1186, b914, b1165)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1269 = UnrolledForeach(Set(b925, b1006, b1187, b914, b1165),x1199,Block(Const(())),List(List(b1247)),List(List(b1248)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1255, x1259, x1263, x1267, x1268), schedule Vector(x1251, x1252, x1253, x1254, x1255, x1256, x1257, x1258, x1259, x1260, x1261, x1262, x1263, x1264, x1265, x1266, x1267, x1268)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1255, x1268): Set()
                                    NonConflictSets(x1255, x1268): Set()
                                    Found Cycle: x1255, x1268
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                      x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1256 = VecApply(x1255,0)
                                        x1266 = FixAdd(x1256,x1265)
                                        x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1255,x1268)), Map(x1255 -> List(AccumTriple(x1018,x1255,x1268)), x1266 -> List(AccumTriple(x1018,x1255,x1268)), x1268 -> List(AccumTriple(x1018,x1255,x1268)), x1256 -> List(AccumTriple(x1018,x1255,x1268)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1251 = FixDivSRA(b1161,Const(2))
                                      x1252 = FixSLA(x1251,Const(2))
                                      x1253 = FixDivSRA(b1183,Const(2))
                                      x1254 = FixAdd(x1252,x1253)
                                      x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1256 = VecApply(x1255,0)
                                      x1257 = FixSLA(x1251,Const(4))
                                      x1258 = FixAdd(x1257,b1247)
                                      x1259 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1258),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1260 = VecApply(x1259,0)
                                      x1261 = FixSLA(b1247,Const(2))
                                      x1262 = FixAdd(x1261,x1253)
                                      x1263 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1262),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1264 = VecApply(x1263,0)
                                      x1265 = FixMul(x1260,x1264)
                                      x1266 = FixAdd(x1256,x1265)
                                      x1267 = SRAMBankedWrite(x1019,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                      x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1255
                                    Computing fullDFS: x1254
                                    Computing fullDFS: x1252
                                    Computing fullDFS: x1251
                                    cur: x1251, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1251 = FixDivSRA(b1161,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1252 = FixSLA(x1251,Const(2))
                                    Computing fullDFS: x1253
                                    cur: x1253, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1253 = FixDivSRA(b1183,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1254 = FixAdd(x1252,x1253)
                                    [3.4 = max(1.4) + 2.0] x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1259
                                    Computing fullDFS: x1258
                                    Computing fullDFS: x1257
                                    [0.4 = max(0.2) + 0.2] x1257 = FixSLA(x1251,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1258 = FixAdd(x1257,b1247)
                                    [3.4 = max(1.4) + 2.0] x1259 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1258),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1263
                                    Computing fullDFS: x1262
                                    Computing fullDFS: x1261
                                    cur: x1261, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1261 = FixSLA(b1247,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1262 = FixAdd(x1261,x1253)
                                    [3.2 = max(1.2) + 2.0] x1263 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1262),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1267
                                    Computing fullDFS: x1266
                                    Computing fullDFS: x1256
                                    cycle deps of x1256: Vector(x1255, x1256)
                                    [3.4 = max(3.4) + 0.0] x1256 = VecApply(x1255,0)[cycle]
                                    Computing fullDFS: x1265
                                    Computing fullDFS: x1260
                                    [3.4 = max(3.4) + 0.0] x1260 = VecApply(x1259,0)
                                    Computing fullDFS: x1264
                                    [3.2 = max(3.2) + 0.0] x1264 = VecApply(x1263,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1265 = FixMul(x1260,x1264)
                                    cycle deps of x1266: Vector(x1255, x1256, x1266)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1266 = FixAdd(x1256,x1265)[cycle]
                                    cycle deps of x1267: Vector(x1255, x1256, x1266, x1267)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1267 = SRAMBankedWrite(x1019,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                    Computing fullDFS: x1268
                                    cycle deps of x1268: Vector(x1255, x1255, x1256, x1266, x1268)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))[cycle]
                                    Cycle #0: write: x1268, cycle: x1255, x1255, x1256, x1266, x1268
                                    x1266 = FixAdd(x1256,x1265) [10.4]
                                      [10.4 = 11.4 - 1.0] x1267 = SRAMBankedWrite(x1019,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                      [10.4 = 11.4 - 1.0] x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                      [10.4]
                                    x1256 = VecApply(x1255,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1266 = FixAdd(x1256,x1265)
                                      [9.4]
                                    x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1256 = VecApply(x1255,0)
                                      [9.4]
                                    x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1256 = VecApply(x1255,0)
                                      [9.4]
                                    Cycles: Map(x1255 -> List(x1255), x1267 -> Vector(x1255, x1256, x1266, x1267), x1266 -> Vector(x1255, x1256, x1266), x1268 -> Vector(x1255, x1255, x1256, x1266, x1268), x1256 -> Vector(x1255, x1256))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1255 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,2,Vector(2),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,2,Vector(2),Vector(0)))
                                    Pushing x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                    Access: x1268 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,2,Vector(2),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,2,Vector(2),Vector(0)))
                                    Pushing x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1255),x1018,1.0)
                                    AAACycle(Vector(x1268),x1018,1.0)
                                    WARCycle(x1255,x1268,x1018,Vector(x1255, x1255, x1256, x1266, x1268),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1251 = FixDivSRA(b1161,Const(2))
                                      [0.2] x1253 = FixDivSRA(b1183,Const(2))
                                      [0.2] x1261 = FixSLA(b1247,Const(2))
                                      [0.4] x1252 = FixSLA(x1251,Const(2))
                                      [0.4] x1257 = FixSLA(x1251,Const(4))
                                      [1.2] x1262 = FixAdd(x1261,x1253)
                                      [1.4] x1254 = FixAdd(x1252,x1253)
                                      [1.4] x1258 = FixAdd(x1257,b1247)
                                      [3.2] x1263 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1262),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1264 = VecApply(x1263,0)
                                      [3.4] x1259 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1258),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1260 = VecApply(x1259,0)
                                      [9.4] x1255 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1256 = VecApply(x1255,0)
                                      [9.4] x1265 = FixMul(x1260,x1264)
                                      [10.4] x1266 = FixAdd(x1256,x1265)
                                      [11.4] x1267 = SRAMBankedWrite(x1019,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                      [11.4] x1268 = SRAMBankedWrite(x1018,Vector(x1266),Vector(List(Const(0), Const(2))),Vector(x1254),Vector(Set(b925, b1006, b1187, b914, b1248, b1165)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1292 = UnrolledForeach(Set(b925, b1006, b1188, b914, b1165),x1200,Block(Const(())),List(List(b1270)),List(List(b1271)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1290, x1291, x1286, x1278, x1282), schedule Vector(x1274, x1275, x1276, x1277, x1278, x1279, x1280, x1281, x1282, x1283, x1284, x1285, x1286, x1287, x1288, x1289, x1290, x1291)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1278, x1291): Set()
                                    NonConflictSets(x1278, x1291): Set()
                                    Found Cycle: x1278, x1291
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                      x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                        x1279 = VecApply(x1278,0)
                                        x1289 = FixAdd(x1279,x1288)
                                        x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1278,x1291)), Map(x1291 -> List(AccumTriple(x1018,x1278,x1291)), x1279 -> List(AccumTriple(x1018,x1278,x1291)), x1278 -> List(AccumTriple(x1018,x1278,x1291)), x1289 -> List(AccumTriple(x1018,x1278,x1291)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1274 = FixDivSRA(b1161,Const(2))
                                      x1275 = FixSLA(x1274,Const(2))
                                      x1276 = FixDivSRA(b1184,Const(2))
                                      x1277 = FixAdd(x1275,x1276)
                                      x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1279 = VecApply(x1278,0)
                                      x1280 = FixSLA(x1274,Const(4))
                                      x1281 = FixAdd(x1280,b1270)
                                      x1282 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1281),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1283 = VecApply(x1282,0)
                                      x1284 = FixSLA(b1270,Const(2))
                                      x1285 = FixAdd(x1284,x1276)
                                      x1286 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1285),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      x1287 = VecApply(x1286,0)
                                      x1288 = FixMul(x1283,x1287)
                                      x1289 = FixAdd(x1279,x1288)
                                      x1290 = SRAMBankedWrite(x1019,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                      x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1290
                                    Computing fullDFS: x1277
                                    Computing fullDFS: x1275
                                    Computing fullDFS: x1274
                                    cur: x1274, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1274 = FixDivSRA(b1161,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1275 = FixSLA(x1274,Const(2))
                                    Computing fullDFS: x1276
                                    cur: x1276, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1276 = FixDivSRA(b1184,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1277 = FixAdd(x1275,x1276)
                                    Computing fullDFS: x1289
                                    Computing fullDFS: x1279
                                    Computing fullDFS: x1278
                                    [3.4 = max(1.4) + 2.0] x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    cycle deps of x1279: Vector(x1278, x1279)
                                    [3.4 = max(3.4) + 0.0] x1279 = VecApply(x1278,0)[cycle]
                                    Computing fullDFS: x1288
                                    Computing fullDFS: x1283
                                    Computing fullDFS: x1282
                                    Computing fullDFS: x1281
                                    Computing fullDFS: x1280
                                    [0.4 = max(0.2) + 0.2] x1280 = FixSLA(x1274,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1281 = FixAdd(x1280,b1270)
                                    [3.4 = max(1.4) + 2.0] x1282 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1281),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1283 = VecApply(x1282,0)
                                    Computing fullDFS: x1287
                                    Computing fullDFS: x1286
                                    Computing fullDFS: x1285
                                    Computing fullDFS: x1284
                                    cur: x1284, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1284 = FixSLA(b1270,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1285 = FixAdd(x1284,x1276)
                                    [3.2 = max(1.2) + 2.0] x1286 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1285),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1287 = VecApply(x1286,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1288 = FixMul(x1283,x1287)
                                    cycle deps of x1289: Vector(x1278, x1279, x1289)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1289 = FixAdd(x1279,x1288)[cycle]
                                    cycle deps of x1290: Vector(x1278, x1279, x1289, x1290)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1290 = SRAMBankedWrite(x1019,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                    Computing fullDFS: x1291
                                    cycle deps of x1291: Vector(x1278, x1278, x1279, x1289, x1291)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))[cycle]
                                    Cycle #0: write: x1291, cycle: x1278, x1278, x1279, x1289, x1291
                                    x1289 = FixAdd(x1279,x1288) [10.4]
                                      [10.4 = 11.4 - 1.0] x1290 = SRAMBankedWrite(x1019,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                      [10.4 = 11.4 - 1.0] x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                      [10.4]
                                    x1279 = VecApply(x1278,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1289 = FixAdd(x1279,x1288)
                                      [9.4]
                                    x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1279 = VecApply(x1278,0)
                                      [9.4]
                                    x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1279 = VecApply(x1278,0)
                                      [9.4]
                                    Cycles: Map(x1291 -> Vector(x1278, x1278, x1279, x1289, x1291), x1279 -> Vector(x1278, x1279), x1278 -> List(x1278), x1290 -> Vector(x1278, x1279, x1289, x1290), x1289 -> Vector(x1278, x1279, x1289))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1278 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,3,Vector(3),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,3,Vector(3),Vector(0)))
                                    Pushing x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                    Access: x1291 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,3,Vector(3),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,3,Vector(3),Vector(0)))
                                    Pushing x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1278),x1018,1.0)
                                    AAACycle(Vector(x1291),x1018,1.0)
                                    WARCycle(x1278,x1291,x1018,Vector(x1278, x1278, x1279, x1289, x1291),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1274 = FixDivSRA(b1161,Const(2))
                                      [0.2] x1276 = FixDivSRA(b1184,Const(2))
                                      [0.2] x1284 = FixSLA(b1270,Const(2))
                                      [0.4] x1275 = FixSLA(x1274,Const(2))
                                      [0.4] x1280 = FixSLA(x1274,Const(4))
                                      [1.2] x1285 = FixAdd(x1284,x1276)
                                      [1.4] x1277 = FixAdd(x1275,x1276)
                                      [1.4] x1281 = FixAdd(x1280,b1270)
                                      [3.2] x1286 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1285),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1287 = VecApply(x1286,0)
                                      [3.4] x1282 = SRAMBankedRead(x934,Vector(List(Const(0), Const(0))),Vector(x1281),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1283 = VecApply(x1282,0)
                                      [9.4] x1278 = SRAMBankedRead(x1018,Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1279 = VecApply(x1278,0)
                                      [9.4] x1288 = FixMul(x1283,x1287)
                                      [10.4] x1289 = FixAdd(x1279,x1288)
                                      [11.4] x1290 = SRAMBankedWrite(x1019,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                      [11.4] x1291 = SRAMBankedWrite(x1018,Vector(x1289),Vector(List(Const(0), Const(3))),Vector(x1277),Vector(Set(b925, b1006, b1271, b1188, b914, b1165)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                          x1408 = UnrolledForeach(Set(b1166, b1006, b925, b914),x1178,Block(Const(())),List(List(b1295, b1296, b1297, b1298)),List(List(b1299, b1300, b1301, b1302)),None)
                              x1407 = ParallelPipe(Set(b1166, b1006, b925, b914),Block(Const(())))
                                  x1337 = UnrolledForeach(Set(b925, b1006, b1166, b914, b1299),x1311,Block(Const(())),List(List(b1315)),List(List(b1316)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1327, x1323, x1336, x1335, x1331), schedule Vector(x1319, x1320, x1321, x1322, x1323, x1324, x1325, x1326, x1327, x1328, x1329, x1330, x1331, x1332, x1333, x1334, x1335, x1336)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1323, x1336): Set()
                                    NonConflictSets(x1323, x1336): Set()
                                    Found Cycle: x1323, x1336
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                      x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                        x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                        x1324 = VecApply(x1323,0)
                                        x1334 = FixAdd(x1324,x1333)
                                        x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1323,x1336)), Map(x1324 -> List(AccumTriple(x1018,x1323,x1336)), x1336 -> List(AccumTriple(x1018,x1323,x1336)), x1323 -> List(AccumTriple(x1018,x1323,x1336)), x1334 -> List(AccumTriple(x1018,x1323,x1336)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1319 = FixDivSRA(b1162,Const(2))
                                      x1320 = FixSLA(x1319,Const(2))
                                      x1321 = FixDivSRA(b1295,Const(2))
                                      x1322 = FixAdd(x1320,x1321)
                                      x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      x1324 = VecApply(x1323,0)
                                      x1325 = FixSLA(x1319,Const(4))
                                      x1326 = FixAdd(x1325,b1315)
                                      x1327 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1326),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      x1328 = VecApply(x1327,0)
                                      x1329 = FixSLA(b1315,Const(2))
                                      x1330 = FixAdd(x1329,x1321)
                                      x1331 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1330),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      x1332 = VecApply(x1331,0)
                                      x1333 = FixMul(x1328,x1332)
                                      x1334 = FixAdd(x1324,x1333)
                                      x1335 = SRAMBankedWrite(x1019,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                      x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1327
                                    Computing fullDFS: x1326
                                    Computing fullDFS: x1325
                                    Computing fullDFS: x1319
                                    cur: x1319, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1319 = FixDivSRA(b1162,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1325 = FixSLA(x1319,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1326 = FixAdd(x1325,b1315)
                                    [3.4 = max(1.4) + 2.0] x1327 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1326),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1323
                                    Computing fullDFS: x1322
                                    Computing fullDFS: x1320
                                    [0.4 = max(0.2) + 0.2] x1320 = FixSLA(x1319,Const(2))
                                    Computing fullDFS: x1321
                                    cur: x1321, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1321 = FixDivSRA(b1295,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1322 = FixAdd(x1320,x1321)
                                    [3.4 = max(1.4) + 2.0] x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1336
                                    Computing fullDFS: x1334
                                    Computing fullDFS: x1324
                                    cycle deps of x1324: Vector(x1323, x1324)
                                    [3.4 = max(3.4) + 0.0] x1324 = VecApply(x1323,0)[cycle]
                                    Computing fullDFS: x1333
                                    Computing fullDFS: x1328
                                    [3.4 = max(3.4) + 0.0] x1328 = VecApply(x1327,0)
                                    Computing fullDFS: x1332
                                    Computing fullDFS: x1331
                                    Computing fullDFS: x1330
                                    Computing fullDFS: x1329
                                    cur: x1329, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1329 = FixSLA(b1315,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1330 = FixAdd(x1329,x1321)
                                    [3.2 = max(1.2) + 2.0] x1331 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1330),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1332 = VecApply(x1331,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1333 = FixMul(x1328,x1332)
                                    cycle deps of x1334: Vector(x1323, x1324, x1334)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1334 = FixAdd(x1324,x1333)[cycle]
                                    cycle deps of x1336: Vector(x1323, x1323, x1324, x1334, x1336)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))[cycle]
                                    Computing fullDFS: x1335
                                    cycle deps of x1335: Vector(x1323, x1324, x1334, x1335)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1335 = SRAMBankedWrite(x1019,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                    Cycle #0: write: x1336, cycle: x1323, x1323, x1324, x1334, x1336
                                    x1334 = FixAdd(x1324,x1333) [10.4]
                                      [10.4 = 11.4 - 1.0] x1335 = SRAMBankedWrite(x1019,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                      [10.4 = 11.4 - 1.0] x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                      [10.4]
                                    x1324 = VecApply(x1323,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1334 = FixAdd(x1324,x1333)
                                      [9.4]
                                    x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1324 = VecApply(x1323,0)
                                      [9.4]
                                    x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1324 = VecApply(x1323,0)
                                      [9.4]
                                    Cycles: Map(x1324 -> Vector(x1323, x1324), x1336 -> Vector(x1323, x1323, x1324, x1334, x1336), x1323 -> List(x1323), x1335 -> Vector(x1323, x1324, x1334, x1335), x1334 -> Vector(x1323, x1324, x1334))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1323 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,4,Vector(4),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,4,Vector(4),Vector(0)))
                                    Pushing x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                    Access: x1336 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,4,Vector(4),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,4,Vector(4),Vector(0)))
                                    Pushing x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1323),x1018,1.0)
                                    AAACycle(Vector(x1336),x1018,1.0)
                                    WARCycle(x1323,x1336,x1018,Vector(x1323, x1323, x1324, x1334, x1336),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1319 = FixDivSRA(b1162,Const(2))
                                      [0.2] x1321 = FixDivSRA(b1295,Const(2))
                                      [0.2] x1329 = FixSLA(b1315,Const(2))
                                      [0.4] x1320 = FixSLA(x1319,Const(2))
                                      [0.4] x1325 = FixSLA(x1319,Const(4))
                                      [1.2] x1330 = FixAdd(x1329,x1321)
                                      [1.4] x1322 = FixAdd(x1320,x1321)
                                      [1.4] x1326 = FixAdd(x1325,b1315)
                                      [3.2] x1331 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1330),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1332 = VecApply(x1331,0)
                                      [3.4] x1327 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1326),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1328 = VecApply(x1327,0)
                                      [9.4] x1323 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1324 = VecApply(x1323,0)
                                      [9.4] x1333 = FixMul(x1328,x1332)
                                      [10.4] x1334 = FixAdd(x1324,x1333)
                                      [11.4] x1335 = SRAMBankedWrite(x1019,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                      [11.4] x1336 = SRAMBankedWrite(x1018,Vector(x1334),Vector(List(Const(1), Const(0))),Vector(x1322),Vector(Set(b925, b1006, b1166, b1316, b914, b1299)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1360 = UnrolledForeach(Set(b925, b1006, b1166, b1300, b914),x1312,Block(Const(())),List(List(b1338)),List(List(b1339)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1354, x1359, x1350, x1358, x1346), schedule Vector(x1342, x1343, x1344, x1345, x1346, x1347, x1348, x1349, x1350, x1351, x1352, x1353, x1354, x1355, x1356, x1357, x1358, x1359)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1346, x1359): Set()
                                    NonConflictSets(x1346, x1359): Set()
                                    Found Cycle: x1346, x1359
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                      x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1347 = VecApply(x1346,0)
                                        x1357 = FixAdd(x1347,x1356)
                                        x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1346,x1359)), Map(x1357 -> List(AccumTriple(x1018,x1346,x1359)), x1347 -> List(AccumTriple(x1018,x1346,x1359)), x1359 -> List(AccumTriple(x1018,x1346,x1359)), x1346 -> List(AccumTriple(x1018,x1346,x1359)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1342 = FixDivSRA(b1162,Const(2))
                                      x1343 = FixSLA(x1342,Const(2))
                                      x1344 = FixDivSRA(b1296,Const(2))
                                      x1345 = FixAdd(x1343,x1344)
                                      x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1347 = VecApply(x1346,0)
                                      x1348 = FixSLA(x1342,Const(4))
                                      x1349 = FixAdd(x1348,b1338)
                                      x1350 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1349),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1351 = VecApply(x1350,0)
                                      x1352 = FixSLA(b1338,Const(2))
                                      x1353 = FixAdd(x1352,x1344)
                                      x1354 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1353),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1355 = VecApply(x1354,0)
                                      x1356 = FixMul(x1351,x1355)
                                      x1357 = FixAdd(x1347,x1356)
                                      x1358 = SRAMBankedWrite(x1019,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                      x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1354
                                    Computing fullDFS: x1353
                                    Computing fullDFS: x1344
                                    cur: x1344, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1344 = FixDivSRA(b1296,Const(2))
                                    Computing fullDFS: x1352
                                    cur: x1352, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1352 = FixSLA(b1338,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1353 = FixAdd(x1352,x1344)
                                    [3.2 = max(1.2) + 2.0] x1354 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1353),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1359
                                    Computing fullDFS: x1345
                                    Computing fullDFS: x1343
                                    Computing fullDFS: x1342
                                    cur: x1342, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1342 = FixDivSRA(b1162,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1343 = FixSLA(x1342,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1345 = FixAdd(x1343,x1344)
                                    Computing fullDFS: x1346
                                    [3.4 = max(1.4) + 2.0] x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1357
                                    Computing fullDFS: x1347
                                    cycle deps of x1347: Vector(x1346, x1347)
                                    [3.4 = max(3.4) + 0.0] x1347 = VecApply(x1346,0)[cycle]
                                    Computing fullDFS: x1356
                                    Computing fullDFS: x1351
                                    Computing fullDFS: x1350
                                    Computing fullDFS: x1349
                                    Computing fullDFS: x1348
                                    [0.4 = max(0.2) + 0.2] x1348 = FixSLA(x1342,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1349 = FixAdd(x1348,b1338)
                                    [3.4 = max(1.4) + 2.0] x1350 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1349),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1351 = VecApply(x1350,0)
                                    Computing fullDFS: x1355
                                    [3.2 = max(3.2) + 0.0] x1355 = VecApply(x1354,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1356 = FixMul(x1351,x1355)
                                    cycle deps of x1357: Vector(x1346, x1347, x1357)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1357 = FixAdd(x1347,x1356)[cycle]
                                    cycle deps of x1359: Vector(x1346, x1346, x1347, x1357, x1359)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))[cycle]
                                    Computing fullDFS: x1358
                                    cycle deps of x1358: Vector(x1346, x1347, x1357, x1358)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1358 = SRAMBankedWrite(x1019,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                    Cycle #0: write: x1359, cycle: x1346, x1346, x1347, x1357, x1359
                                    x1357 = FixAdd(x1347,x1356) [10.4]
                                      [10.4 = 11.4 - 1.0] x1358 = SRAMBankedWrite(x1019,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                      [10.4 = 11.4 - 1.0] x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                      [10.4]
                                    x1347 = VecApply(x1346,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1357 = FixAdd(x1347,x1356)
                                      [9.4]
                                    x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1347 = VecApply(x1346,0)
                                      [9.4]
                                    x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1347 = VecApply(x1346,0)
                                      [9.4]
                                    Cycles: Map(x1357 -> Vector(x1346, x1347, x1357), x1347 -> Vector(x1346, x1347), x1359 -> Vector(x1346, x1346, x1347, x1357, x1359), x1346 -> List(x1346), x1358 -> Vector(x1346, x1347, x1357, x1358))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1346 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,5,Vector(5),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,5,Vector(5),Vector(0)))
                                    Pushing x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                    Access: x1359 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,5,Vector(5),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,5,Vector(5),Vector(0)))
                                    Pushing x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1346),x1018,1.0)
                                    AAACycle(Vector(x1359),x1018,1.0)
                                    WARCycle(x1346,x1359,x1018,Vector(x1346, x1346, x1347, x1357, x1359),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1342 = FixDivSRA(b1162,Const(2))
                                      [0.2] x1344 = FixDivSRA(b1296,Const(2))
                                      [0.2] x1352 = FixSLA(b1338,Const(2))
                                      [0.4] x1343 = FixSLA(x1342,Const(2))
                                      [0.4] x1348 = FixSLA(x1342,Const(4))
                                      [1.2] x1353 = FixAdd(x1352,x1344)
                                      [1.4] x1345 = FixAdd(x1343,x1344)
                                      [1.4] x1349 = FixAdd(x1348,b1338)
                                      [3.2] x1354 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1353),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1355 = VecApply(x1354,0)
                                      [3.4] x1350 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1349),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1351 = VecApply(x1350,0)
                                      [9.4] x1346 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1347 = VecApply(x1346,0)
                                      [9.4] x1356 = FixMul(x1351,x1355)
                                      [10.4] x1357 = FixAdd(x1347,x1356)
                                      [11.4] x1358 = SRAMBankedWrite(x1019,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                      [11.4] x1359 = SRAMBankedWrite(x1018,Vector(x1357),Vector(List(Const(1), Const(1))),Vector(x1345),Vector(Set(b925, b1006, b1339, b1166, b1300, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1383 = UnrolledForeach(Set(b925, b1006, b1301, b1166, b914),x1313,Block(Const(())),List(List(b1361)),List(List(b1362)),None)
                                    Working on pipeLatencies of result Vector(x1369, Const(()), x1373, x1377, x1382, x1381), schedule Vector(x1365, x1366, x1367, x1368, x1369, x1370, x1371, x1372, x1373, x1374, x1375, x1376, x1377, x1378, x1379, x1380, x1381, x1382)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1369, x1382): Set()
                                    NonConflictSets(x1369, x1382): Set()
                                    Found Cycle: x1369, x1382
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                      x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1370 = VecApply(x1369,0)
                                        x1380 = FixAdd(x1370,x1379)
                                        x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1369,x1382)), Map(x1369 -> List(AccumTriple(x1018,x1369,x1382)), x1380 -> List(AccumTriple(x1018,x1369,x1382)), x1370 -> List(AccumTriple(x1018,x1369,x1382)), x1382 -> List(AccumTriple(x1018,x1369,x1382)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1365 = FixDivSRA(b1162,Const(2))
                                      x1366 = FixSLA(x1365,Const(2))
                                      x1367 = FixDivSRA(b1297,Const(2))
                                      x1368 = FixAdd(x1366,x1367)
                                      x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1370 = VecApply(x1369,0)
                                      x1371 = FixSLA(x1365,Const(4))
                                      x1372 = FixAdd(x1371,b1361)
                                      x1373 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1372),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1374 = VecApply(x1373,0)
                                      x1375 = FixSLA(b1361,Const(2))
                                      x1376 = FixAdd(x1375,x1367)
                                      x1377 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1376),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1378 = VecApply(x1377,0)
                                      x1379 = FixMul(x1374,x1378)
                                      x1380 = FixAdd(x1370,x1379)
                                      x1381 = SRAMBankedWrite(x1019,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                      x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                    Computing fullDFS: x1369
                                    Computing fullDFS: x1368
                                    Computing fullDFS: x1366
                                    Computing fullDFS: x1365
                                    cur: x1365, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1365 = FixDivSRA(b1162,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1366 = FixSLA(x1365,Const(2))
                                    Computing fullDFS: x1367
                                    cur: x1367, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1367 = FixDivSRA(b1297,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1368 = FixAdd(x1366,x1367)
                                    [3.4 = max(1.4) + 2.0] x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1373
                                    Computing fullDFS: x1372
                                    Computing fullDFS: x1371
                                    [0.4 = max(0.2) + 0.2] x1371 = FixSLA(x1365,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1372 = FixAdd(x1371,b1361)
                                    [3.4 = max(1.4) + 2.0] x1373 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1372),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1377
                                    Computing fullDFS: x1376
                                    Computing fullDFS: x1375
                                    cur: x1375, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1375 = FixSLA(b1361,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1376 = FixAdd(x1375,x1367)
                                    [3.2 = max(1.2) + 2.0] x1377 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1376),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1382
                                    Computing fullDFS: x1380
                                    Computing fullDFS: x1370
                                    cycle deps of x1370: Vector(x1369, x1370)
                                    [3.4 = max(3.4) + 0.0] x1370 = VecApply(x1369,0)[cycle]
                                    Computing fullDFS: x1379
                                    Computing fullDFS: x1374
                                    [3.4 = max(3.4) + 0.0] x1374 = VecApply(x1373,0)
                                    Computing fullDFS: x1378
                                    [3.2 = max(3.2) + 0.0] x1378 = VecApply(x1377,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1379 = FixMul(x1374,x1378)
                                    cycle deps of x1380: Vector(x1369, x1370, x1380)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1380 = FixAdd(x1370,x1379)[cycle]
                                    cycle deps of x1382: Vector(x1369, x1369, x1370, x1380, x1382)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))[cycle]
                                    Computing fullDFS: x1381
                                    cycle deps of x1381: Vector(x1369, x1370, x1380, x1381)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1381 = SRAMBankedWrite(x1019,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                    Cycle #0: write: x1382, cycle: x1369, x1369, x1370, x1380, x1382
                                    x1380 = FixAdd(x1370,x1379) [10.4]
                                      [10.4 = 11.4 - 1.0] x1381 = SRAMBankedWrite(x1019,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                      [10.4 = 11.4 - 1.0] x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                      [10.4]
                                    x1370 = VecApply(x1369,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1380 = FixAdd(x1370,x1379)
                                      [9.4]
                                    x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1370 = VecApply(x1369,0)
                                      [9.4]
                                    x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1370 = VecApply(x1369,0)
                                      [9.4]
                                    Cycles: Map(x1369 -> List(x1369), x1381 -> Vector(x1369, x1370, x1380, x1381), x1380 -> Vector(x1369, x1370, x1380), x1370 -> Vector(x1369, x1370), x1382 -> Vector(x1369, x1369, x1370, x1380, x1382))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1369 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,6,Vector(6),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,6,Vector(6),Vector(0)))
                                    Pushing x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                    Access: x1382 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,6,Vector(6),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,6,Vector(6),Vector(0)))
                                    Pushing x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1369),x1018,1.0)
                                    AAACycle(Vector(x1382),x1018,1.0)
                                    WARCycle(x1369,x1382,x1018,Vector(x1369, x1369, x1370, x1380, x1382),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1365 = FixDivSRA(b1162,Const(2))
                                      [0.2] x1367 = FixDivSRA(b1297,Const(2))
                                      [0.2] x1375 = FixSLA(b1361,Const(2))
                                      [0.4] x1366 = FixSLA(x1365,Const(2))
                                      [0.4] x1371 = FixSLA(x1365,Const(4))
                                      [1.2] x1376 = FixAdd(x1375,x1367)
                                      [1.4] x1368 = FixAdd(x1366,x1367)
                                      [1.4] x1372 = FixAdd(x1371,b1361)
                                      [3.2] x1377 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1376),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1378 = VecApply(x1377,0)
                                      [3.4] x1373 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1372),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1374 = VecApply(x1373,0)
                                      [9.4] x1369 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1370 = VecApply(x1369,0)
                                      [9.4] x1379 = FixMul(x1374,x1378)
                                      [10.4] x1380 = FixAdd(x1370,x1379)
                                      [11.4] x1381 = SRAMBankedWrite(x1019,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                      [11.4] x1382 = SRAMBankedWrite(x1018,Vector(x1380),Vector(List(Const(1), Const(2))),Vector(x1368),Vector(Set(b1362, b925, b1006, b1301, b1166, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1406 = UnrolledForeach(Set(b1302, b925, b1006, b1166, b914),x1314,Block(Const(())),List(List(b1384)),List(List(b1385)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1405, x1392, x1396, x1400, x1404), schedule Vector(x1388, x1389, x1390, x1391, x1392, x1393, x1394, x1395, x1396, x1397, x1398, x1399, x1400, x1401, x1402, x1403, x1404, x1405)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1392, x1405): Set()
                                    NonConflictSets(x1392, x1405): Set()
                                    Found Cycle: x1392, x1405
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                      x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1393 = VecApply(x1392,0)
                                        x1403 = FixAdd(x1393,x1402)
                                        x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1392,x1405)), Map(x1393 -> List(AccumTriple(x1018,x1392,x1405)), x1405 -> List(AccumTriple(x1018,x1392,x1405)), x1392 -> List(AccumTriple(x1018,x1392,x1405)), x1403 -> List(AccumTriple(x1018,x1392,x1405)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1388 = FixDivSRA(b1162,Const(2))
                                      x1389 = FixSLA(x1388,Const(2))
                                      x1390 = FixDivSRA(b1298,Const(2))
                                      x1391 = FixAdd(x1389,x1390)
                                      x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1393 = VecApply(x1392,0)
                                      x1394 = FixSLA(x1388,Const(4))
                                      x1395 = FixAdd(x1394,b1384)
                                      x1396 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1395),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1397 = VecApply(x1396,0)
                                      x1398 = FixSLA(b1384,Const(2))
                                      x1399 = FixAdd(x1398,x1390)
                                      x1400 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1399),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1401 = VecApply(x1400,0)
                                      x1402 = FixMul(x1397,x1401)
                                      x1403 = FixAdd(x1393,x1402)
                                      x1404 = SRAMBankedWrite(x1019,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                      x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1405
                                    Computing fullDFS: x1391
                                    Computing fullDFS: x1389
                                    Computing fullDFS: x1388
                                    cur: x1388, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1388 = FixDivSRA(b1162,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1389 = FixSLA(x1388,Const(2))
                                    Computing fullDFS: x1390
                                    cur: x1390, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1390 = FixDivSRA(b1298,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1391 = FixAdd(x1389,x1390)
                                    Computing fullDFS: x1392
                                    [3.4 = max(1.4) + 2.0] x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1403
                                    Computing fullDFS: x1393
                                    cycle deps of x1393: Vector(x1392, x1393)
                                    [3.4 = max(3.4) + 0.0] x1393 = VecApply(x1392,0)[cycle]
                                    Computing fullDFS: x1402
                                    Computing fullDFS: x1397
                                    Computing fullDFS: x1396
                                    Computing fullDFS: x1395
                                    Computing fullDFS: x1394
                                    [0.4 = max(0.2) + 0.2] x1394 = FixSLA(x1388,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1395 = FixAdd(x1394,b1384)
                                    [3.4 = max(1.4) + 2.0] x1396 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1395),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1397 = VecApply(x1396,0)
                                    Computing fullDFS: x1401
                                    Computing fullDFS: x1400
                                    Computing fullDFS: x1399
                                    Computing fullDFS: x1398
                                    cur: x1398, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1398 = FixSLA(b1384,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1399 = FixAdd(x1398,x1390)
                                    [3.2 = max(1.2) + 2.0] x1400 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1399),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1401 = VecApply(x1400,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1402 = FixMul(x1397,x1401)
                                    cycle deps of x1403: Vector(x1392, x1393, x1403)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1403 = FixAdd(x1393,x1402)[cycle]
                                    cycle deps of x1405: Vector(x1392, x1392, x1393, x1403, x1405)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))[cycle]
                                    Computing fullDFS: x1404
                                    cycle deps of x1404: Vector(x1392, x1393, x1403, x1404)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1404 = SRAMBankedWrite(x1019,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                    Cycle #0: write: x1405, cycle: x1392, x1392, x1393, x1403, x1405
                                    x1403 = FixAdd(x1393,x1402) [10.4]
                                      [10.4 = 11.4 - 1.0] x1404 = SRAMBankedWrite(x1019,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                      [10.4 = 11.4 - 1.0] x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                      [10.4]
                                    x1393 = VecApply(x1392,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1403 = FixAdd(x1393,x1402)
                                      [9.4]
                                    x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1393 = VecApply(x1392,0)
                                      [9.4]
                                    x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1393 = VecApply(x1392,0)
                                      [9.4]
                                    Cycles: Map(x1393 -> Vector(x1392, x1393), x1405 -> Vector(x1392, x1392, x1393, x1403, x1405), x1392 -> List(x1392), x1404 -> Vector(x1392, x1393, x1403, x1404), x1403 -> Vector(x1392, x1393, x1403))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1392 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,7,Vector(7),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,7,Vector(7),Vector(0)))
                                    Pushing x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                    Access: x1405 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,7,Vector(7),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,7,Vector(7),Vector(0)))
                                    Pushing x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1392),x1018,1.0)
                                    AAACycle(Vector(x1405),x1018,1.0)
                                    WARCycle(x1392,x1405,x1018,Vector(x1392, x1392, x1393, x1403, x1405),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1388 = FixDivSRA(b1162,Const(2))
                                      [0.2] x1390 = FixDivSRA(b1298,Const(2))
                                      [0.2] x1398 = FixSLA(b1384,Const(2))
                                      [0.4] x1389 = FixSLA(x1388,Const(2))
                                      [0.4] x1394 = FixSLA(x1388,Const(4))
                                      [1.2] x1399 = FixAdd(x1398,x1390)
                                      [1.4] x1391 = FixAdd(x1389,x1390)
                                      [1.4] x1395 = FixAdd(x1394,b1384)
                                      [3.2] x1400 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1399),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1401 = VecApply(x1400,0)
                                      [3.4] x1396 = SRAMBankedRead(x934,Vector(List(Const(1), Const(0))),Vector(x1395),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1397 = VecApply(x1396,0)
                                      [9.4] x1392 = SRAMBankedRead(x1018,Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1393 = VecApply(x1392,0)
                                      [9.4] x1402 = FixMul(x1397,x1401)
                                      [10.4] x1403 = FixAdd(x1393,x1402)
                                      [11.4] x1404 = SRAMBankedWrite(x1019,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                      [11.4] x1405 = SRAMBankedWrite(x1018,Vector(x1403),Vector(List(Const(1), Const(3))),Vector(x1391),Vector(Set(b1302, b925, b1006, b1166, b1385, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                          x1522 = UnrolledForeach(Set(b1167, b1006, b925, b914),x1179,Block(Const(())),List(List(b1409, b1410, b1411, b1412)),List(List(b1413, b1414, b1415, b1416)),None)
                              x1521 = ParallelPipe(Set(b1167, b1006, b925, b914),Block(Const(())))
                                  x1451 = UnrolledForeach(Set(b925, b1006, b1167, b1413, b914),x1425,Block(Const(())),List(List(b1429)),List(List(b1430)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1437, x1441, x1450, x1445, x1449), schedule Vector(x1433, x1434, x1435, x1436, x1437, x1438, x1439, x1440, x1441, x1442, x1443, x1444, x1445, x1446, x1447, x1448, x1449, x1450)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1437, x1450): Set()
                                    NonConflictSets(x1437, x1450): Set()
                                    Found Cycle: x1437, x1450
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                      x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1438 = VecApply(x1437,0)
                                        x1448 = FixAdd(x1438,x1447)
                                        x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1437,x1450)), Map(x1438 -> List(AccumTriple(x1018,x1437,x1450)), x1450 -> List(AccumTriple(x1018,x1437,x1450)), x1437 -> List(AccumTriple(x1018,x1437,x1450)), x1448 -> List(AccumTriple(x1018,x1437,x1450)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1433 = FixDivSRA(b1163,Const(2))
                                      x1434 = FixSLA(x1433,Const(2))
                                      x1435 = FixDivSRA(b1409,Const(2))
                                      x1436 = FixAdd(x1434,x1435)
                                      x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1438 = VecApply(x1437,0)
                                      x1439 = FixSLA(x1433,Const(4))
                                      x1440 = FixAdd(x1439,b1429)
                                      x1441 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1440),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1442 = VecApply(x1441,0)
                                      x1443 = FixSLA(b1429,Const(2))
                                      x1444 = FixAdd(x1443,x1435)
                                      x1445 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1444),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1446 = VecApply(x1445,0)
                                      x1447 = FixMul(x1442,x1446)
                                      x1448 = FixAdd(x1438,x1447)
                                      x1449 = SRAMBankedWrite(x1019,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                      x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1437
                                    Computing fullDFS: x1436
                                    Computing fullDFS: x1434
                                    Computing fullDFS: x1433
                                    cur: x1433, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1433 = FixDivSRA(b1163,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1434 = FixSLA(x1433,Const(2))
                                    Computing fullDFS: x1435
                                    cur: x1435, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1435 = FixDivSRA(b1409,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1436 = FixAdd(x1434,x1435)
                                    [3.4 = max(1.4) + 2.0] x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1441
                                    Computing fullDFS: x1440
                                    Computing fullDFS: x1439
                                    [0.4 = max(0.2) + 0.2] x1439 = FixSLA(x1433,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1440 = FixAdd(x1439,b1429)
                                    [3.4 = max(1.4) + 2.0] x1441 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1440),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1450
                                    Computing fullDFS: x1448
                                    Computing fullDFS: x1438
                                    cycle deps of x1438: Vector(x1437, x1438)
                                    [3.4 = max(3.4) + 0.0] x1438 = VecApply(x1437,0)[cycle]
                                    Computing fullDFS: x1447
                                    Computing fullDFS: x1442
                                    [3.4 = max(3.4) + 0.0] x1442 = VecApply(x1441,0)
                                    Computing fullDFS: x1446
                                    Computing fullDFS: x1445
                                    Computing fullDFS: x1444
                                    Computing fullDFS: x1443
                                    cur: x1443, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1443 = FixSLA(b1429,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1444 = FixAdd(x1443,x1435)
                                    [3.2 = max(1.2) + 2.0] x1445 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1444),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1446 = VecApply(x1445,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1447 = FixMul(x1442,x1446)
                                    cycle deps of x1448: Vector(x1437, x1438, x1448)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1448 = FixAdd(x1438,x1447)[cycle]
                                    cycle deps of x1450: Vector(x1437, x1437, x1438, x1448, x1450)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))[cycle]
                                    Computing fullDFS: x1449
                                    cycle deps of x1449: Vector(x1437, x1438, x1448, x1449)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1449 = SRAMBankedWrite(x1019,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                    Cycle #0: write: x1450, cycle: x1437, x1437, x1438, x1448, x1450
                                    x1448 = FixAdd(x1438,x1447) [10.4]
                                      [10.4 = 11.4 - 1.0] x1449 = SRAMBankedWrite(x1019,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                      [10.4 = 11.4 - 1.0] x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                      [10.4]
                                    x1438 = VecApply(x1437,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1448 = FixAdd(x1438,x1447)
                                      [9.4]
                                    x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1438 = VecApply(x1437,0)
                                      [9.4]
                                    x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1438 = VecApply(x1437,0)
                                      [9.4]
                                    Cycles: Map(x1438 -> Vector(x1437, x1438), x1450 -> Vector(x1437, x1437, x1438, x1448, x1450), x1449 -> Vector(x1437, x1438, x1448, x1449), x1437 -> List(x1437), x1448 -> Vector(x1437, x1438, x1448))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1437 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,8,Vector(8),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,8,Vector(8),Vector(0)))
                                    Pushing x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                    Access: x1450 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,8,Vector(8),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,8,Vector(8),Vector(0)))
                                    Pushing x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1437),x1018,1.0)
                                    AAACycle(Vector(x1450),x1018,1.0)
                                    WARCycle(x1437,x1450,x1018,Vector(x1437, x1437, x1438, x1448, x1450),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1433 = FixDivSRA(b1163,Const(2))
                                      [0.2] x1435 = FixDivSRA(b1409,Const(2))
                                      [0.2] x1443 = FixSLA(b1429,Const(2))
                                      [0.4] x1434 = FixSLA(x1433,Const(2))
                                      [0.4] x1439 = FixSLA(x1433,Const(4))
                                      [1.2] x1444 = FixAdd(x1443,x1435)
                                      [1.4] x1436 = FixAdd(x1434,x1435)
                                      [1.4] x1440 = FixAdd(x1439,b1429)
                                      [3.2] x1445 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1444),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1446 = VecApply(x1445,0)
                                      [3.4] x1441 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1440),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1442 = VecApply(x1441,0)
                                      [9.4] x1437 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1438 = VecApply(x1437,0)
                                      [9.4] x1447 = FixMul(x1442,x1446)
                                      [10.4] x1448 = FixAdd(x1438,x1447)
                                      [11.4] x1449 = SRAMBankedWrite(x1019,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                      [11.4] x1450 = SRAMBankedWrite(x1018,Vector(x1448),Vector(List(Const(2), Const(0))),Vector(x1436),Vector(Set(b1430, b925, b1006, b1167, b1413, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1474 = UnrolledForeach(Set(b925, b1006, b1414, b1167, b914),x1426,Block(Const(())),List(List(b1452)),List(List(b1453)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1464, x1460, x1472, x1473, x1468), schedule Vector(x1456, x1457, x1458, x1459, x1460, x1461, x1462, x1463, x1464, x1465, x1466, x1467, x1468, x1469, x1470, x1471, x1472, x1473)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1460, x1473): Set()
                                    NonConflictSets(x1460, x1473): Set()
                                    Found Cycle: x1460, x1473
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                      x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1461 = VecApply(x1460,0)
                                        x1471 = FixAdd(x1461,x1470)
                                        x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1460,x1473)), Map(x1461 -> List(AccumTriple(x1018,x1460,x1473)), x1473 -> List(AccumTriple(x1018,x1460,x1473)), x1460 -> List(AccumTriple(x1018,x1460,x1473)), x1471 -> List(AccumTriple(x1018,x1460,x1473)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1456 = FixDivSRA(b1163,Const(2))
                                      x1457 = FixSLA(x1456,Const(2))
                                      x1458 = FixDivSRA(b1410,Const(2))
                                      x1459 = FixAdd(x1457,x1458)
                                      x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1461 = VecApply(x1460,0)
                                      x1462 = FixSLA(x1456,Const(4))
                                      x1463 = FixAdd(x1462,b1452)
                                      x1464 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1463),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1465 = VecApply(x1464,0)
                                      x1466 = FixSLA(b1452,Const(2))
                                      x1467 = FixAdd(x1466,x1458)
                                      x1468 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1467),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1469 = VecApply(x1468,0)
                                      x1470 = FixMul(x1465,x1469)
                                      x1471 = FixAdd(x1461,x1470)
                                      x1472 = SRAMBankedWrite(x1019,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                      x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1464
                                    Computing fullDFS: x1463
                                    Computing fullDFS: x1462
                                    Computing fullDFS: x1456
                                    cur: x1456, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1456 = FixDivSRA(b1163,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1462 = FixSLA(x1456,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1463 = FixAdd(x1462,b1452)
                                    [3.4 = max(1.4) + 2.0] x1464 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1463),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1460
                                    Computing fullDFS: x1459
                                    Computing fullDFS: x1457
                                    [0.4 = max(0.2) + 0.2] x1457 = FixSLA(x1456,Const(2))
                                    Computing fullDFS: x1458
                                    cur: x1458, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1458 = FixDivSRA(b1410,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1459 = FixAdd(x1457,x1458)
                                    [3.4 = max(1.4) + 2.0] x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1472
                                    Computing fullDFS: x1471
                                    Computing fullDFS: x1461
                                    cycle deps of x1461: Vector(x1460, x1461)
                                    [3.4 = max(3.4) + 0.0] x1461 = VecApply(x1460,0)[cycle]
                                    Computing fullDFS: x1470
                                    Computing fullDFS: x1465
                                    [3.4 = max(3.4) + 0.0] x1465 = VecApply(x1464,0)
                                    Computing fullDFS: x1469
                                    Computing fullDFS: x1468
                                    Computing fullDFS: x1467
                                    Computing fullDFS: x1466
                                    cur: x1466, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1466 = FixSLA(b1452,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1467 = FixAdd(x1466,x1458)
                                    [3.2 = max(1.2) + 2.0] x1468 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1467),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1469 = VecApply(x1468,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1470 = FixMul(x1465,x1469)
                                    cycle deps of x1471: Vector(x1460, x1461, x1471)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1471 = FixAdd(x1461,x1470)[cycle]
                                    cycle deps of x1472: Vector(x1460, x1461, x1471, x1472)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1472 = SRAMBankedWrite(x1019,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                    Computing fullDFS: x1473
                                    cycle deps of x1473: Vector(x1460, x1460, x1461, x1471, x1473)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))[cycle]
                                    Cycle #0: write: x1473, cycle: x1460, x1460, x1461, x1471, x1473
                                    x1471 = FixAdd(x1461,x1470) [10.4]
                                      [10.4 = 11.4 - 1.0] x1472 = SRAMBankedWrite(x1019,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                      [10.4 = 11.4 - 1.0] x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                      [10.4]
                                    x1461 = VecApply(x1460,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1471 = FixAdd(x1461,x1470)
                                      [9.4]
                                    x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1461 = VecApply(x1460,0)
                                      [9.4]
                                    x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1461 = VecApply(x1460,0)
                                      [9.4]
                                    Cycles: Map(x1461 -> Vector(x1460, x1461), x1473 -> Vector(x1460, x1460, x1461, x1471, x1473), x1472 -> Vector(x1460, x1461, x1471, x1472), x1460 -> List(x1460), x1471 -> Vector(x1460, x1461, x1471))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1460 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,9,Vector(9),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,9,Vector(9),Vector(0)))
                                    Pushing x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                    Access: x1473 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,9,Vector(9),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,9,Vector(9),Vector(0)))
                                    Pushing x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1460),x1018,1.0)
                                    AAACycle(Vector(x1473),x1018,1.0)
                                    WARCycle(x1460,x1473,x1018,Vector(x1460, x1460, x1461, x1471, x1473),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1456 = FixDivSRA(b1163,Const(2))
                                      [0.2] x1458 = FixDivSRA(b1410,Const(2))
                                      [0.2] x1466 = FixSLA(b1452,Const(2))
                                      [0.4] x1457 = FixSLA(x1456,Const(2))
                                      [0.4] x1462 = FixSLA(x1456,Const(4))
                                      [1.2] x1467 = FixAdd(x1466,x1458)
                                      [1.4] x1459 = FixAdd(x1457,x1458)
                                      [1.4] x1463 = FixAdd(x1462,b1452)
                                      [3.2] x1468 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1467),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1469 = VecApply(x1468,0)
                                      [3.4] x1464 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1463),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1465 = VecApply(x1464,0)
                                      [9.4] x1460 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1461 = VecApply(x1460,0)
                                      [9.4] x1470 = FixMul(x1465,x1469)
                                      [10.4] x1471 = FixAdd(x1461,x1470)
                                      [11.4] x1472 = SRAMBankedWrite(x1019,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                      [11.4] x1473 = SRAMBankedWrite(x1018,Vector(x1471),Vector(List(Const(2), Const(1))),Vector(x1459),Vector(Set(b925, b1006, b1414, b1167, b1453, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1497 = UnrolledForeach(Set(b1415, b925, b1006, b1167, b914),x1427,Block(Const(())),List(List(b1475)),List(List(b1476)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1487, x1483, x1496, x1491, x1495), schedule Vector(x1479, x1480, x1481, x1482, x1483, x1484, x1485, x1486, x1487, x1488, x1489, x1490, x1491, x1492, x1493, x1494, x1495, x1496)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1483, x1496): Set()
                                    NonConflictSets(x1483, x1496): Set()
                                    Found Cycle: x1483, x1496
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                      x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1484 = VecApply(x1483,0)
                                        x1494 = FixAdd(x1484,x1493)
                                        x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1483,x1496)), Map(x1483 -> List(AccumTriple(x1018,x1483,x1496)), x1494 -> List(AccumTriple(x1018,x1483,x1496)), x1484 -> List(AccumTriple(x1018,x1483,x1496)), x1496 -> List(AccumTriple(x1018,x1483,x1496)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1479 = FixDivSRA(b1163,Const(2))
                                      x1480 = FixSLA(x1479,Const(2))
                                      x1481 = FixDivSRA(b1411,Const(2))
                                      x1482 = FixAdd(x1480,x1481)
                                      x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1484 = VecApply(x1483,0)
                                      x1485 = FixSLA(x1479,Const(4))
                                      x1486 = FixAdd(x1485,b1475)
                                      x1487 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1486),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1488 = VecApply(x1487,0)
                                      x1489 = FixSLA(b1475,Const(2))
                                      x1490 = FixAdd(x1489,x1481)
                                      x1491 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1490),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1492 = VecApply(x1491,0)
                                      x1493 = FixMul(x1488,x1492)
                                      x1494 = FixAdd(x1484,x1493)
                                      x1495 = SRAMBankedWrite(x1019,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                      x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1487
                                    Computing fullDFS: x1486
                                    Computing fullDFS: x1485
                                    Computing fullDFS: x1479
                                    cur: x1479, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1479 = FixDivSRA(b1163,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1485 = FixSLA(x1479,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1486 = FixAdd(x1485,b1475)
                                    [3.4 = max(1.4) + 2.0] x1487 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1486),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1483
                                    Computing fullDFS: x1482
                                    Computing fullDFS: x1480
                                    [0.4 = max(0.2) + 0.2] x1480 = FixSLA(x1479,Const(2))
                                    Computing fullDFS: x1481
                                    cur: x1481, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1481 = FixDivSRA(b1411,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1482 = FixAdd(x1480,x1481)
                                    [3.4 = max(1.4) + 2.0] x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1496
                                    Computing fullDFS: x1494
                                    Computing fullDFS: x1484
                                    cycle deps of x1484: Vector(x1483, x1484)
                                    [3.4 = max(3.4) + 0.0] x1484 = VecApply(x1483,0)[cycle]
                                    Computing fullDFS: x1493
                                    Computing fullDFS: x1488
                                    [3.4 = max(3.4) + 0.0] x1488 = VecApply(x1487,0)
                                    Computing fullDFS: x1492
                                    Computing fullDFS: x1491
                                    Computing fullDFS: x1490
                                    Computing fullDFS: x1489
                                    cur: x1489, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1489 = FixSLA(b1475,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1490 = FixAdd(x1489,x1481)
                                    [3.2 = max(1.2) + 2.0] x1491 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1490),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1492 = VecApply(x1491,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1493 = FixMul(x1488,x1492)
                                    cycle deps of x1494: Vector(x1483, x1484, x1494)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1494 = FixAdd(x1484,x1493)[cycle]
                                    cycle deps of x1496: Vector(x1483, x1483, x1484, x1494, x1496)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))[cycle]
                                    Computing fullDFS: x1495
                                    cycle deps of x1495: Vector(x1483, x1484, x1494, x1495)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1495 = SRAMBankedWrite(x1019,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                    Cycle #0: write: x1496, cycle: x1483, x1483, x1484, x1494, x1496
                                    x1494 = FixAdd(x1484,x1493) [10.4]
                                      [10.4 = 11.4 - 1.0] x1495 = SRAMBankedWrite(x1019,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                      [10.4 = 11.4 - 1.0] x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                      [10.4]
                                    x1484 = VecApply(x1483,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1494 = FixAdd(x1484,x1493)
                                      [9.4]
                                    x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1484 = VecApply(x1483,0)
                                      [9.4]
                                    x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1484 = VecApply(x1483,0)
                                      [9.4]
                                    Cycles: Map(x1483 -> List(x1483), x1494 -> Vector(x1483, x1484, x1494), x1484 -> Vector(x1483, x1484), x1496 -> Vector(x1483, x1483, x1484, x1494, x1496), x1495 -> Vector(x1483, x1484, x1494, x1495))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1483 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,10,Vector(10),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,10,Vector(10),Vector(0)))
                                    Pushing x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                    Access: x1496 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,10,Vector(10),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,10,Vector(10),Vector(0)))
                                    Pushing x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1483),x1018,1.0)
                                    AAACycle(Vector(x1496),x1018,1.0)
                                    WARCycle(x1483,x1496,x1018,Vector(x1483, x1483, x1484, x1494, x1496),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1479 = FixDivSRA(b1163,Const(2))
                                      [0.2] x1481 = FixDivSRA(b1411,Const(2))
                                      [0.2] x1489 = FixSLA(b1475,Const(2))
                                      [0.4] x1480 = FixSLA(x1479,Const(2))
                                      [0.4] x1485 = FixSLA(x1479,Const(4))
                                      [1.2] x1490 = FixAdd(x1489,x1481)
                                      [1.4] x1482 = FixAdd(x1480,x1481)
                                      [1.4] x1486 = FixAdd(x1485,b1475)
                                      [3.2] x1491 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1490),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1492 = VecApply(x1491,0)
                                      [3.4] x1487 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1486),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1488 = VecApply(x1487,0)
                                      [9.4] x1483 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1484 = VecApply(x1483,0)
                                      [9.4] x1493 = FixMul(x1488,x1492)
                                      [10.4] x1494 = FixAdd(x1484,x1493)
                                      [11.4] x1495 = SRAMBankedWrite(x1019,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                      [11.4] x1496 = SRAMBankedWrite(x1018,Vector(x1494),Vector(List(Const(2), Const(2))),Vector(x1482),Vector(Set(b1415, b925, b1006, b1167, b1476, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1520 = UnrolledForeach(Set(b925, b1006, b1167, b914, b1416),x1428,Block(Const(())),List(List(b1498)),List(List(b1499)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1518, x1514, x1519, x1510, x1506), schedule Vector(x1502, x1503, x1504, x1505, x1506, x1507, x1508, x1509, x1510, x1511, x1512, x1513, x1514, x1515, x1516, x1517, x1518, x1519)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1506, x1519): Set()
                                    NonConflictSets(x1506, x1519): Set()
                                    Found Cycle: x1506, x1519
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                      x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                        x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                        x1507 = VecApply(x1506,0)
                                        x1517 = FixAdd(x1507,x1516)
                                        x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1506,x1519)), Map(x1519 -> List(AccumTriple(x1018,x1506,x1519)), x1506 -> List(AccumTriple(x1018,x1506,x1519)), x1517 -> List(AccumTriple(x1018,x1506,x1519)), x1507 -> List(AccumTriple(x1018,x1506,x1519)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1502 = FixDivSRA(b1163,Const(2))
                                      x1503 = FixSLA(x1502,Const(2))
                                      x1504 = FixDivSRA(b1412,Const(2))
                                      x1505 = FixAdd(x1503,x1504)
                                      x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      x1507 = VecApply(x1506,0)
                                      x1508 = FixSLA(x1502,Const(4))
                                      x1509 = FixAdd(x1508,b1498)
                                      x1510 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1509),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      x1511 = VecApply(x1510,0)
                                      x1512 = FixSLA(b1498,Const(2))
                                      x1513 = FixAdd(x1512,x1504)
                                      x1514 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1513),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      x1515 = VecApply(x1514,0)
                                      x1516 = FixMul(x1511,x1515)
                                      x1517 = FixAdd(x1507,x1516)
                                      x1518 = SRAMBankedWrite(x1019,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                      x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1518
                                    Computing fullDFS: x1505
                                    Computing fullDFS: x1503
                                    Computing fullDFS: x1502
                                    cur: x1502, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1502 = FixDivSRA(b1163,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1503 = FixSLA(x1502,Const(2))
                                    Computing fullDFS: x1504
                                    cur: x1504, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1504 = FixDivSRA(b1412,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1505 = FixAdd(x1503,x1504)
                                    Computing fullDFS: x1517
                                    Computing fullDFS: x1507
                                    Computing fullDFS: x1506
                                    [3.4 = max(1.4) + 2.0] x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    cycle deps of x1507: Vector(x1506, x1507)
                                    [3.4 = max(3.4) + 0.0] x1507 = VecApply(x1506,0)[cycle]
                                    Computing fullDFS: x1516
                                    Computing fullDFS: x1511
                                    Computing fullDFS: x1510
                                    Computing fullDFS: x1509
                                    Computing fullDFS: x1508
                                    [0.4 = max(0.2) + 0.2] x1508 = FixSLA(x1502,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1509 = FixAdd(x1508,b1498)
                                    [3.4 = max(1.4) + 2.0] x1510 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1509),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1511 = VecApply(x1510,0)
                                    Computing fullDFS: x1515
                                    Computing fullDFS: x1514
                                    Computing fullDFS: x1513
                                    Computing fullDFS: x1512
                                    cur: x1512, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1512 = FixSLA(b1498,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1513 = FixAdd(x1512,x1504)
                                    [3.2 = max(1.2) + 2.0] x1514 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1513),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1515 = VecApply(x1514,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1516 = FixMul(x1511,x1515)
                                    cycle deps of x1517: Vector(x1506, x1507, x1517)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1517 = FixAdd(x1507,x1516)[cycle]
                                    cycle deps of x1518: Vector(x1506, x1507, x1517, x1518)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1518 = SRAMBankedWrite(x1019,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                    Computing fullDFS: x1519
                                    cycle deps of x1519: Vector(x1506, x1506, x1507, x1517, x1519)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))[cycle]
                                    Cycle #0: write: x1519, cycle: x1506, x1506, x1507, x1517, x1519
                                    x1517 = FixAdd(x1507,x1516) [10.4]
                                      [10.4 = 11.4 - 1.0] x1518 = SRAMBankedWrite(x1019,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                      [10.4 = 11.4 - 1.0] x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                      [10.4]
                                    x1507 = VecApply(x1506,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1517 = FixAdd(x1507,x1516)
                                      [9.4]
                                    x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1507 = VecApply(x1506,0)
                                      [9.4]
                                    x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1507 = VecApply(x1506,0)
                                      [9.4]
                                    Cycles: Map(x1519 -> Vector(x1506, x1506, x1507, x1517, x1519), x1518 -> Vector(x1506, x1507, x1517, x1518), x1506 -> List(x1506), x1517 -> Vector(x1506, x1507, x1517), x1507 -> Vector(x1506, x1507))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1506 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,11,Vector(11),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,11,Vector(11),Vector(0)))
                                    Pushing x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                    Access: x1519 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,11,Vector(11),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,11,Vector(11),Vector(0)))
                                    Pushing x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1506),x1018,1.0)
                                    AAACycle(Vector(x1519),x1018,1.0)
                                    WARCycle(x1506,x1519,x1018,Vector(x1506, x1506, x1507, x1517, x1519),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1502 = FixDivSRA(b1163,Const(2))
                                      [0.2] x1504 = FixDivSRA(b1412,Const(2))
                                      [0.2] x1512 = FixSLA(b1498,Const(2))
                                      [0.4] x1503 = FixSLA(x1502,Const(2))
                                      [0.4] x1508 = FixSLA(x1502,Const(4))
                                      [1.2] x1513 = FixAdd(x1512,x1504)
                                      [1.4] x1505 = FixAdd(x1503,x1504)
                                      [1.4] x1509 = FixAdd(x1508,b1498)
                                      [3.2] x1514 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1513),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1515 = VecApply(x1514,0)
                                      [3.4] x1510 = SRAMBankedRead(x934,Vector(List(Const(2), Const(0))),Vector(x1509),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1511 = VecApply(x1510,0)
                                      [9.4] x1506 = SRAMBankedRead(x1018,Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1507 = VecApply(x1506,0)
                                      [9.4] x1516 = FixMul(x1511,x1515)
                                      [10.4] x1517 = FixAdd(x1507,x1516)
                                      [11.4] x1518 = SRAMBankedWrite(x1019,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                      [11.4] x1519 = SRAMBankedWrite(x1018,Vector(x1517),Vector(List(Const(2), Const(3))),Vector(x1505),Vector(Set(b925, b1006, b1167, b1499, b914, b1416)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                          x1636 = UnrolledForeach(Set(b1168, b1006, b925, b914),x1180,Block(Const(())),List(List(b1523, b1524, b1525, b1526)),List(List(b1527, b1528, b1529, b1530)),None)
                              x1635 = ParallelPipe(Set(b1168, b1006, b925, b914),Block(Const(())))
                                  x1565 = UnrolledForeach(Set(b1168, b925, b1006, b914, b1527),x1539,Block(Const(())),List(List(b1543)),List(List(b1544)),None)
                                    Working on pipeLatencies of result Vector(x1559, Const(()), x1564, x1555, x1563, x1551), schedule Vector(x1547, x1548, x1549, x1550, x1551, x1552, x1553, x1554, x1555, x1556, x1557, x1558, x1559, x1560, x1561, x1562, x1563, x1564)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1551, x1564): Set()
                                    NonConflictSets(x1551, x1564): Set()
                                    Found Cycle: x1551, x1564
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                      x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                        x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                        x1552 = VecApply(x1551,0)
                                        x1562 = FixAdd(x1552,x1561)
                                        x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1551,x1564)), Map(x1551 -> List(AccumTriple(x1018,x1551,x1564)), x1562 -> List(AccumTriple(x1018,x1551,x1564)), x1564 -> List(AccumTriple(x1018,x1551,x1564)), x1552 -> List(AccumTriple(x1018,x1551,x1564)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1547 = FixDivSRA(b1164,Const(2))
                                      x1548 = FixSLA(x1547,Const(2))
                                      x1549 = FixDivSRA(b1523,Const(2))
                                      x1550 = FixAdd(x1548,x1549)
                                      x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      x1552 = VecApply(x1551,0)
                                      x1553 = FixSLA(x1547,Const(4))
                                      x1554 = FixAdd(x1553,b1543)
                                      x1555 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1554),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      x1556 = VecApply(x1555,0)
                                      x1557 = FixSLA(b1543,Const(2))
                                      x1558 = FixAdd(x1557,x1549)
                                      x1559 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1558),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      x1560 = VecApply(x1559,0)
                                      x1561 = FixMul(x1556,x1560)
                                      x1562 = FixAdd(x1552,x1561)
                                      x1563 = SRAMBankedWrite(x1019,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                      x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                    Computing fullDFS: x1559
                                    Computing fullDFS: x1558
                                    Computing fullDFS: x1549
                                    cur: x1549, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1549 = FixDivSRA(b1523,Const(2))
                                    Computing fullDFS: x1557
                                    cur: x1557, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1557 = FixSLA(b1543,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1558 = FixAdd(x1557,x1549)
                                    [3.2 = max(1.2) + 2.0] x1559 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1558),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1564
                                    Computing fullDFS: x1550
                                    Computing fullDFS: x1548
                                    Computing fullDFS: x1547
                                    cur: x1547, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1547 = FixDivSRA(b1164,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1548 = FixSLA(x1547,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1550 = FixAdd(x1548,x1549)
                                    Computing fullDFS: x1551
                                    [3.4 = max(1.4) + 2.0] x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1562
                                    Computing fullDFS: x1552
                                    cycle deps of x1552: Vector(x1551, x1552)
                                    [3.4 = max(3.4) + 0.0] x1552 = VecApply(x1551,0)[cycle]
                                    Computing fullDFS: x1561
                                    Computing fullDFS: x1556
                                    Computing fullDFS: x1555
                                    Computing fullDFS: x1554
                                    Computing fullDFS: x1553
                                    [0.4 = max(0.2) + 0.2] x1553 = FixSLA(x1547,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1554 = FixAdd(x1553,b1543)
                                    [3.4 = max(1.4) + 2.0] x1555 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1554),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1556 = VecApply(x1555,0)
                                    Computing fullDFS: x1560
                                    [3.2 = max(3.2) + 0.0] x1560 = VecApply(x1559,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1561 = FixMul(x1556,x1560)
                                    cycle deps of x1562: Vector(x1551, x1552, x1562)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1562 = FixAdd(x1552,x1561)[cycle]
                                    cycle deps of x1564: Vector(x1551, x1551, x1552, x1562, x1564)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))[cycle]
                                    Computing fullDFS: x1563
                                    cycle deps of x1563: Vector(x1551, x1552, x1562, x1563)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1563 = SRAMBankedWrite(x1019,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                    Cycle #0: write: x1564, cycle: x1551, x1551, x1552, x1562, x1564
                                    x1562 = FixAdd(x1552,x1561) [10.4]
                                      [10.4 = 11.4 - 1.0] x1563 = SRAMBankedWrite(x1019,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                      [10.4 = 11.4 - 1.0] x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                      [10.4]
                                    x1552 = VecApply(x1551,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1562 = FixAdd(x1552,x1561)
                                      [9.4]
                                    x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1552 = VecApply(x1551,0)
                                      [9.4]
                                    x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1552 = VecApply(x1551,0)
                                      [9.4]
                                    Cycles: Map(x1563 -> Vector(x1551, x1552, x1562, x1563), x1551 -> List(x1551), x1562 -> Vector(x1551, x1552, x1562), x1564 -> Vector(x1551, x1551, x1552, x1562, x1564), x1552 -> Vector(x1551, x1552))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1551 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,12,Vector(12),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,12,Vector(12),Vector(0)))
                                    Pushing x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                    Access: x1564 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,12,Vector(12),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,12,Vector(12),Vector(0)))
                                    Pushing x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1551),x1018,1.0)
                                    AAACycle(Vector(x1564),x1018,1.0)
                                    WARCycle(x1551,x1564,x1018,Vector(x1551, x1551, x1552, x1562, x1564),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1547 = FixDivSRA(b1164,Const(2))
                                      [0.2] x1549 = FixDivSRA(b1523,Const(2))
                                      [0.2] x1557 = FixSLA(b1543,Const(2))
                                      [0.4] x1548 = FixSLA(x1547,Const(2))
                                      [0.4] x1553 = FixSLA(x1547,Const(4))
                                      [1.2] x1558 = FixAdd(x1557,x1549)
                                      [1.4] x1550 = FixAdd(x1548,x1549)
                                      [1.4] x1554 = FixAdd(x1553,b1543)
                                      [3.2] x1559 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(0))),Vector(x1558),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1560 = VecApply(x1559,0)
                                      [3.4] x1555 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1554),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1556 = VecApply(x1555,0)
                                      [9.4] x1551 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1552 = VecApply(x1551,0)
                                      [9.4] x1561 = FixMul(x1556,x1560)
                                      [10.4] x1562 = FixAdd(x1552,x1561)
                                      [11.4] x1563 = SRAMBankedWrite(x1019,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                      [11.4] x1564 = SRAMBankedWrite(x1018,Vector(x1562),Vector(List(Const(3), Const(0))),Vector(x1550),Vector(Set(b1168, b1544, b925, b1006, b914, b1527)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1588 = UnrolledForeach(Set(b1168, b925, b1006, b1528, b914),x1540,Block(Const(())),List(List(b1566)),List(List(b1567)),None)
                                    Working on pipeLatencies of result Vector(x1586, Const(()), x1587, x1574, x1578, x1582), schedule Vector(x1570, x1571, x1572, x1573, x1574, x1575, x1576, x1577, x1578, x1579, x1580, x1581, x1582, x1583, x1584, x1585, x1586, x1587)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1574, x1587): Set()
                                    NonConflictSets(x1574, x1587): Set()
                                    Found Cycle: x1574, x1587
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                      x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1575 = VecApply(x1574,0)
                                        x1585 = FixAdd(x1575,x1584)
                                        x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1574,x1587)), Map(x1587 -> List(AccumTriple(x1018,x1574,x1587)), x1575 -> List(AccumTriple(x1018,x1574,x1587)), x1574 -> List(AccumTriple(x1018,x1574,x1587)), x1585 -> List(AccumTriple(x1018,x1574,x1587)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1570 = FixDivSRA(b1164,Const(2))
                                      x1571 = FixSLA(x1570,Const(2))
                                      x1572 = FixDivSRA(b1524,Const(2))
                                      x1573 = FixAdd(x1571,x1572)
                                      x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1575 = VecApply(x1574,0)
                                      x1576 = FixSLA(x1570,Const(4))
                                      x1577 = FixAdd(x1576,b1566)
                                      x1578 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1577),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1579 = VecApply(x1578,0)
                                      x1580 = FixSLA(b1566,Const(2))
                                      x1581 = FixAdd(x1580,x1572)
                                      x1582 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1581),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1583 = VecApply(x1582,0)
                                      x1584 = FixMul(x1579,x1583)
                                      x1585 = FixAdd(x1575,x1584)
                                      x1586 = SRAMBankedWrite(x1019,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                      x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                    Computing fullDFS: x1586
                                    Computing fullDFS: x1573
                                    Computing fullDFS: x1571
                                    Computing fullDFS: x1570
                                    cur: x1570, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1570 = FixDivSRA(b1164,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1571 = FixSLA(x1570,Const(2))
                                    Computing fullDFS: x1572
                                    cur: x1572, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1572 = FixDivSRA(b1524,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1573 = FixAdd(x1571,x1572)
                                    Computing fullDFS: x1585
                                    Computing fullDFS: x1575
                                    Computing fullDFS: x1574
                                    [3.4 = max(1.4) + 2.0] x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    cycle deps of x1575: Vector(x1574, x1575)
                                    [3.4 = max(3.4) + 0.0] x1575 = VecApply(x1574,0)[cycle]
                                    Computing fullDFS: x1584
                                    Computing fullDFS: x1579
                                    Computing fullDFS: x1578
                                    Computing fullDFS: x1577
                                    Computing fullDFS: x1576
                                    [0.4 = max(0.2) + 0.2] x1576 = FixSLA(x1570,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1577 = FixAdd(x1576,b1566)
                                    [3.4 = max(1.4) + 2.0] x1578 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1577),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1579 = VecApply(x1578,0)
                                    Computing fullDFS: x1583
                                    Computing fullDFS: x1582
                                    Computing fullDFS: x1581
                                    Computing fullDFS: x1580
                                    cur: x1580, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1580 = FixSLA(b1566,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1581 = FixAdd(x1580,x1572)
                                    [3.2 = max(1.2) + 2.0] x1582 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1581),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1583 = VecApply(x1582,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1584 = FixMul(x1579,x1583)
                                    cycle deps of x1585: Vector(x1574, x1575, x1585)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1585 = FixAdd(x1575,x1584)[cycle]
                                    cycle deps of x1586: Vector(x1574, x1575, x1585, x1586)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1586 = SRAMBankedWrite(x1019,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1587
                                    cycle deps of x1587: Vector(x1574, x1574, x1575, x1585, x1587)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))[cycle]
                                    Cycle #0: write: x1587, cycle: x1574, x1574, x1575, x1585, x1587
                                    x1585 = FixAdd(x1575,x1584) [10.4]
                                      [10.4 = 11.4 - 1.0] x1586 = SRAMBankedWrite(x1019,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                      [10.4 = 11.4 - 1.0] x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                      [10.4]
                                    x1575 = VecApply(x1574,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1585 = FixAdd(x1575,x1584)
                                      [9.4]
                                    x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1575 = VecApply(x1574,0)
                                      [9.4]
                                    x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1575 = VecApply(x1574,0)
                                      [9.4]
                                    Cycles: Map(x1587 -> Vector(x1574, x1574, x1575, x1585, x1587), x1575 -> Vector(x1574, x1575), x1574 -> List(x1574), x1586 -> Vector(x1574, x1575, x1585, x1586), x1585 -> Vector(x1574, x1575, x1585))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1574 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,13,Vector(13),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,13,Vector(13),Vector(0)))
                                    Pushing x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                    Access: x1587 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,13,Vector(13),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,13,Vector(13),Vector(0)))
                                    Pushing x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1574),x1018,1.0)
                                    AAACycle(Vector(x1587),x1018,1.0)
                                    WARCycle(x1574,x1587,x1018,Vector(x1574, x1574, x1575, x1585, x1587),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1570 = FixDivSRA(b1164,Const(2))
                                      [0.2] x1572 = FixDivSRA(b1524,Const(2))
                                      [0.2] x1580 = FixSLA(b1566,Const(2))
                                      [0.4] x1571 = FixSLA(x1570,Const(2))
                                      [0.4] x1576 = FixSLA(x1570,Const(4))
                                      [1.2] x1581 = FixAdd(x1580,x1572)
                                      [1.4] x1573 = FixAdd(x1571,x1572)
                                      [1.4] x1577 = FixAdd(x1576,b1566)
                                      [3.2] x1582 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(1))),Vector(x1581),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1583 = VecApply(x1582,0)
                                      [3.4] x1578 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1577),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1579 = VecApply(x1578,0)
                                      [9.4] x1574 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1575 = VecApply(x1574,0)
                                      [9.4] x1584 = FixMul(x1579,x1583)
                                      [10.4] x1585 = FixAdd(x1575,x1584)
                                      [11.4] x1586 = SRAMBankedWrite(x1019,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                      [11.4] x1587 = SRAMBankedWrite(x1018,Vector(x1585),Vector(List(Const(3), Const(1))),Vector(x1573),Vector(Set(b1168, b925, b1006, b1567, b1528, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1611 = UnrolledForeach(Set(b1168, b1529, b925, b1006, b914),x1541,Block(Const(())),List(List(b1589)),List(List(b1590)),None)
                                    Working on pipeLatencies of result Vector(Const(()), x1601, x1609, x1605, x1610, x1597), schedule Vector(x1593, x1594, x1595, x1596, x1597, x1598, x1599, x1600, x1601, x1602, x1603, x1604, x1605, x1606, x1607, x1608, x1609, x1610)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1597, x1610): Set()
                                    NonConflictSets(x1597, x1610): Set()
                                    Found Cycle: x1597, x1610
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                      x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1598 = VecApply(x1597,0)
                                        x1608 = FixAdd(x1598,x1607)
                                        x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1597,x1610)), Map(x1608 -> List(AccumTriple(x1018,x1597,x1610)), x1610 -> List(AccumTriple(x1018,x1597,x1610)), x1598 -> List(AccumTriple(x1018,x1597,x1610)), x1597 -> List(AccumTriple(x1018,x1597,x1610)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1593 = FixDivSRA(b1164,Const(2))
                                      x1594 = FixSLA(x1593,Const(2))
                                      x1595 = FixDivSRA(b1525,Const(2))
                                      x1596 = FixAdd(x1594,x1595)
                                      x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1598 = VecApply(x1597,0)
                                      x1599 = FixSLA(x1593,Const(4))
                                      x1600 = FixAdd(x1599,b1589)
                                      x1601 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1600),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1602 = VecApply(x1601,0)
                                      x1603 = FixSLA(b1589,Const(2))
                                      x1604 = FixAdd(x1603,x1595)
                                      x1605 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1604),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1606 = VecApply(x1605,0)
                                      x1607 = FixMul(x1602,x1606)
                                      x1608 = FixAdd(x1598,x1607)
                                      x1609 = SRAMBankedWrite(x1019,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                      x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1601
                                    Computing fullDFS: x1600
                                    Computing fullDFS: x1599
                                    Computing fullDFS: x1593
                                    cur: x1593, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1593 = FixDivSRA(b1164,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1599 = FixSLA(x1593,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1600 = FixAdd(x1599,b1589)
                                    [3.4 = max(1.4) + 2.0] x1601 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1600),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Computing fullDFS: x1609
                                    Computing fullDFS: x1596
                                    Computing fullDFS: x1594
                                    [0.4 = max(0.2) + 0.2] x1594 = FixSLA(x1593,Const(2))
                                    Computing fullDFS: x1595
                                    cur: x1595, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1595 = FixDivSRA(b1525,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1596 = FixAdd(x1594,x1595)
                                    Computing fullDFS: x1608
                                    Computing fullDFS: x1598
                                    Computing fullDFS: x1597
                                    [3.4 = max(1.4) + 2.0] x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    cycle deps of x1598: Vector(x1597, x1598)
                                    [3.4 = max(3.4) + 0.0] x1598 = VecApply(x1597,0)[cycle]
                                    Computing fullDFS: x1607
                                    Computing fullDFS: x1602
                                    [3.4 = max(3.4) + 0.0] x1602 = VecApply(x1601,0)
                                    Computing fullDFS: x1606
                                    Computing fullDFS: x1605
                                    Computing fullDFS: x1604
                                    Computing fullDFS: x1603
                                    cur: x1603, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1603 = FixSLA(b1589,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1604 = FixAdd(x1603,x1595)
                                    [3.2 = max(1.2) + 2.0] x1605 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1604),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1606 = VecApply(x1605,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1607 = FixMul(x1602,x1606)
                                    cycle deps of x1608: Vector(x1597, x1598, x1608)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1608 = FixAdd(x1598,x1607)[cycle]
                                    cycle deps of x1609: Vector(x1597, x1598, x1608, x1609)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1609 = SRAMBankedWrite(x1019,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                    Computing fullDFS: x1610
                                    cycle deps of x1610: Vector(x1597, x1597, x1598, x1608, x1610)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))[cycle]
                                    Cycle #0: write: x1610, cycle: x1597, x1597, x1598, x1608, x1610
                                    x1608 = FixAdd(x1598,x1607) [10.4]
                                      [10.4 = 11.4 - 1.0] x1609 = SRAMBankedWrite(x1019,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                      [10.4 = 11.4 - 1.0] x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                      [10.4]
                                    x1598 = VecApply(x1597,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1608 = FixAdd(x1598,x1607)
                                      [9.4]
                                    x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1598 = VecApply(x1597,0)
                                      [9.4]
                                    x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1598 = VecApply(x1597,0)
                                      [9.4]
                                    Cycles: Map(x1608 -> Vector(x1597, x1598, x1608), x1610 -> Vector(x1597, x1597, x1598, x1608, x1610), x1598 -> Vector(x1597, x1598), x1597 -> List(x1597), x1609 -> Vector(x1597, x1598, x1608, x1609))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1597 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,14,Vector(14),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,14,Vector(14),Vector(0)))
                                    Pushing x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                    Access: x1610 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,14,Vector(14),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,14,Vector(14),Vector(0)))
                                    Pushing x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1597),x1018,1.0)
                                    AAACycle(Vector(x1610),x1018,1.0)
                                    WARCycle(x1597,x1610,x1018,Vector(x1597, x1597, x1598, x1608, x1610),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1593 = FixDivSRA(b1164,Const(2))
                                      [0.2] x1595 = FixDivSRA(b1525,Const(2))
                                      [0.2] x1603 = FixSLA(b1589,Const(2))
                                      [0.4] x1594 = FixSLA(x1593,Const(2))
                                      [0.4] x1599 = FixSLA(x1593,Const(4))
                                      [1.2] x1604 = FixAdd(x1603,x1595)
                                      [1.4] x1596 = FixAdd(x1594,x1595)
                                      [1.4] x1600 = FixAdd(x1599,b1589)
                                      [3.2] x1605 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(2))),Vector(x1604),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1606 = VecApply(x1605,0)
                                      [3.4] x1601 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1600),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1602 = VecApply(x1601,0)
                                      [9.4] x1597 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1598 = VecApply(x1597,0)
                                      [9.4] x1607 = FixMul(x1602,x1606)
                                      [10.4] x1608 = FixAdd(x1598,x1607)
                                      [11.4] x1609 = SRAMBankedWrite(x1019,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                      [11.4] x1610 = SRAMBankedWrite(x1018,Vector(x1608),Vector(List(Const(3), Const(2))),Vector(x1596),Vector(Set(b1168, b1529, b925, b1006, b1590, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                                  x1634 = UnrolledForeach(Set(b1168, b925, b1006, b1530, b914),x1542,Block(Const(())),List(List(b1612)),List(List(b1613)),None)
                                    Working on pipeLatencies of result Vector(x1633, Const(()), x1628, x1632, x1624, x1620), schedule Vector(x1616, x1617, x1618, x1619, x1620, x1621, x1622, x1623, x1624, x1625, x1626, x1627, x1628, x1629, x1630, x1631, x1632, x1633)
                                    Memories with both reads and writes in this scope: Set(x1018)
                                    NonConflictSets(x1620, x1633): Set()
                                    NonConflictSets(x1620, x1633): Set()
                                    Found Cycle: x1620, x1633
                                    Exclusions: Set() Set() 
                                    Found cycle between: 
                                      x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                      x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                        x1621 = VecApply(x1620,0)
                                        x1631 = FixAdd(x1621,x1630)
                                        x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                    Done finding cycles: Vector(AccumTriple(x1018,x1620,x1633)), Map(x1620 -> List(AccumTriple(x1018,x1620,x1633)), x1631 -> List(AccumTriple(x1018,x1620,x1633)), x1633 -> List(AccumTriple(x1018,x1620,x1633)), x1621 -> List(AccumTriple(x1018,x1620,x1633)))
                                    ----------------------------------
                                    Computing pipeLatencies for scope:
                                      x1616 = FixDivSRA(b1164,Const(2))
                                      x1617 = FixSLA(x1616,Const(2))
                                      x1618 = FixDivSRA(b1526,Const(2))
                                      x1619 = FixAdd(x1617,x1618)
                                      x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1621 = VecApply(x1620,0)
                                      x1622 = FixSLA(x1616,Const(4))
                                      x1623 = FixAdd(x1622,b1612)
                                      x1624 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1623),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1625 = VecApply(x1624,0)
                                      x1626 = FixSLA(b1612,Const(2))
                                      x1627 = FixAdd(x1626,x1618)
                                      x1628 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1627),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      x1629 = VecApply(x1628,0)
                                      x1630 = FixMul(x1625,x1629)
                                      x1631 = FixAdd(x1621,x1630)
                                      x1632 = SRAMBankedWrite(x1019,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                      x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                    Computing fullDFS: x1633
                                    Computing fullDFS: x1619
                                    Computing fullDFS: x1617
                                    Computing fullDFS: x1616
                                    cur: x1616, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1616 = FixDivSRA(b1164,Const(2))
                                    [0.4 = max(0.2) + 0.2] x1617 = FixSLA(x1616,Const(2))
                                    Computing fullDFS: x1618
                                    cur: x1618, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1618 = FixDivSRA(b1526,Const(2))
                                    [1.4 = max(0.4, 0.2) + 1.0] x1619 = FixAdd(x1617,x1618)
                                    Computing fullDFS: x1620
                                    [3.4 = max(1.4) + 2.0] x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])[cycle]
                                    Computing fullDFS: x1631
                                    Computing fullDFS: x1621
                                    cycle deps of x1621: Vector(x1620, x1621)
                                    [3.4 = max(3.4) + 0.0] x1621 = VecApply(x1620,0)[cycle]
                                    Computing fullDFS: x1630
                                    Computing fullDFS: x1625
                                    Computing fullDFS: x1624
                                    Computing fullDFS: x1623
                                    Computing fullDFS: x1622
                                    [0.4 = max(0.2) + 0.2] x1622 = FixSLA(x1616,Const(4))
                                    [1.4 = max(0.4) + 1.0] x1623 = FixAdd(x1622,b1612)
                                    [3.4 = max(1.4) + 2.0] x1624 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1623),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.4 = max(3.4) + 0.0] x1625 = VecApply(x1624,0)
                                    Computing fullDFS: x1629
                                    Computing fullDFS: x1628
                                    Computing fullDFS: x1627
                                    Computing fullDFS: x1626
                                    cur: x1626, inReduce: false, latency: 0.2
                                    [0.2 = max(0) + 0.2] x1626 = FixSLA(b1612,Const(2))
                                    [1.2 = max(0.2, 0.2) + 1.0] x1627 = FixAdd(x1626,x1618)
                                    [3.2 = max(1.2) + 2.0] x1628 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1627),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                    [3.2 = max(3.2) + 0.0] x1629 = VecApply(x1628,0)
                                    [9.4 = max(3.4, 3.2) + 6.0] x1630 = FixMul(x1625,x1629)
                                    cycle deps of x1631: Vector(x1620, x1621, x1631)
                                    [10.4 = max(3.4, 9.4) + 1.0] x1631 = FixAdd(x1621,x1630)[cycle]
                                    cycle deps of x1633: Vector(x1620, x1620, x1621, x1631, x1633)
                                    [11.4 = max(1.4, 3.4, 10.4) + 1.0] x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))[cycle]
                                    Computing fullDFS: Const(())
                                    Computing fullDFS: x1632
                                    cycle deps of x1632: Vector(x1620, x1621, x1631, x1632)
                                    [11.4 = max(1.4, 10.4) + 1.0] x1632 = SRAMBankedWrite(x1019,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                    Cycle #0: write: x1633, cycle: x1620, x1620, x1621, x1631, x1633
                                    x1631 = FixAdd(x1621,x1630) [10.4]
                                      [10.4 = 11.4 - 1.0] x1632 = SRAMBankedWrite(x1019,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                      [10.4 = 11.4 - 1.0] x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                      [10.4]
                                    x1621 = VecApply(x1620,0) [3.4]
                                      [9.4 = 10.4 - 1.0] x1631 = FixAdd(x1621,x1630)
                                      [9.4]
                                    x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]]) [3.4]
                                      [9.4 = 9.4 - 0.0] x1621 = VecApply(x1620,0)
                                      [9.4]
                                    x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]]) [9.4]
                                      [9.4 = 9.4 - 0.0] x1621 = VecApply(x1620,0)
                                      [9.4]
                                    Cycles: Map(x1620 -> List(x1620), x1632 -> Vector(x1620, x1621, x1631, x1632), x1631 -> Vector(x1620, x1621, x1631), x1633 -> Vector(x1620, x1620, x1621, x1631, x1633), x1621 -> Vector(x1620, x1621))
                                    pseudo cycles for x1018:
                                    Multiplexed accesses for memory x1018: 
                                      x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                    Access: x1620 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,15,Vector(15),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,15,Vector(15),Vector(0)))
                                    Pushing x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]]) by 0.0 to 9.4 due to muxing.
                                    Multiplexed accesses for memory x1018: 
                                      x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                    Access: x1633 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(1),0,15,Vector(15),Vector(0)))))
                                    First Port: Map(List() -> Port(Some(1),0,15,Vector(15),Vector(0)))
                                    Pushing x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914))) by 0.0 to 11.4 due to muxing.
                                    Found cycles: 
                                    AAACycle(Vector(x1620),x1018,1.0)
                                    AAACycle(Vector(x1633),x1018,1.0)
                                    WARCycle(x1620,x1633,x1018,Vector(x1620, x1620, x1621, x1631, x1633),4.0,spatial.node.AccumMarker$Unknown$@4bff6160,-1)
                                      Schedule after pipeLatencies calculation:
                                      [0.2] x1616 = FixDivSRA(b1164,Const(2))
                                      [0.2] x1618 = FixDivSRA(b1526,Const(2))
                                      [0.2] x1626 = FixSLA(b1612,Const(2))
                                      [0.4] x1617 = FixSLA(x1616,Const(2))
                                      [0.4] x1622 = FixSLA(x1616,Const(4))
                                      [1.2] x1627 = FixAdd(x1626,x1618)
                                      [1.4] x1619 = FixAdd(x1617,x1618)
                                      [1.4] x1623 = FixAdd(x1622,b1612)
                                      [3.2] x1628 = SRAMBankedRead(x1017,Vector(List(Const(0), Const(3))),Vector(x1627),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.2] x1629 = VecApply(x1628,0)
                                      [3.4] x1624 = SRAMBankedRead(x934,Vector(List(Const(3), Const(0))),Vector(x1623),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [3.4] x1625 = VecApply(x1624,0)
                                      [9.4] x1620 = SRAMBankedRead(x1018,Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)),Vec[Fix[TRUE,_24,_8]])
                                      [9.4] x1621 = VecApply(x1620,0)
                                      [9.4] x1630 = FixMul(x1625,x1629)
                                      [10.4] x1631 = FixAdd(x1621,x1630)
                                      [11.4] x1632 = SRAMBankedWrite(x1019,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                      [11.4] x1633 = SRAMBankedWrite(x1018,Vector(x1631),Vector(List(Const(3), Const(3))),Vector(x1619),Vector(Set(b1168, b1613, b925, b1006, b1530, b914)))
                                    Cycle #0 on x1018: 
                                      x1018 = SRAMNew(List(Const(16), Const(16)),SRAM2[Fix[TRUE,_24,_8]]) [tileC_sram_0]
                                      disjoint:     true
                                      no visible intermediates:
                                        closed cycle:     false
                                        no intermediates: true
                                        is local mem:     true
                                        number of writers:  17
                                        outer reduce:     false
                                        accum type:       Fold (if reduce, overrides no intermediates)
                  x1701 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)
                      x1700 = UnrolledForeach(Set(),x1643,Block(Const(())),List(List(b1644)),List(List(b1645)),None)
                          x1695 = UnitPipe(Set(b1645),Block(Const(())),None)
                              x1672 = UnitPipe(Set(),Block(Const(())),None)
                                Working on pipeLatencies of result Vector(Const(()), x1671, x1650, x1664, x1668, x1669, x1667, x1670, x1657), schedule Vector(x1649, x1650, x1806, x1653, x1654, x1807, x1656, x1657, x1658, x1659, x1660, x1661, x1808, x1663, x1664, x1665, x1666, x1667, x1668, x1669, x1670, x1671)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1649 = FixAdd(b924,b1644)
                                  x1650 = RegRead(x879)
                                  x1806 = FixFMA(x1649,x1650,b1005)
                                  x1653 = FixDivSRA(x1806,Const(4))
                                  x1654 = FixSLA(x1653,Const(4))
                                  x1807 = FixSLA(x1653,Const(6))
                                  x1656 = FixSub(x1806,x1654)
                                  x1657 = RegRead(x1011)
                                  x1658 = FixAdd(x1656,x1657)
                                  x1659 = FixAdd(x1658,Const(15))
                                  x1660 = FixDivSRA(x1659,Const(4))
                                  x1661 = FixSLA(x1660,Const(4))
                                  x1808 = FixSLA(x1660,Const(6))
                                  x1663 = FixToFix(x1807,TRUE,_64,_0)
                                  x1664 = DRAMAddress(x906)
                                  x1665 = FixAdd(x1663,x1664)
                                  x1666 = SimpleStruct(ArrayBuffer((offset,x1665), (size,x1808), (isLoad,Const(false))))
                                  x1667 = DRAMIsAlloc(x906)
                                  x1668 = StreamOutBankedWrite(x1639,ArrayBuffer(x1666),ArrayBuffer(Set(x1667)))
                                  x1669 = RegWrite(x1646,x1656,Set())
                                  x1670 = RegWrite(x1647,x1658,Set())
                                  x1671 = RegWrite(x1648,x1661,Set())
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1671
                                Computing fullDFS: x1661
                                Computing fullDFS: x1660
                                Computing fullDFS: x1659
                                Computing fullDFS: x1658
                                Computing fullDFS: x1656
                                Computing fullDFS: x1806
                                Computing fullDFS: x1649
                                cur: x1649, inReduce: false, latency: 1.0
                                [1.0 = max(0) + 1.0] x1649 = FixAdd(b924,b1644)
                                Computing fullDFS: x1650
                                cur: x1650, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1650 = RegRead(x879)
                                [7.0 = max(1.0, 0.0) + 6.0] x1806 = FixFMA(x1649,x1650,b1005)
                                Computing fullDFS: x1654
                                Computing fullDFS: x1653
                                [7.2 = max(7.0) + 0.2] x1653 = FixDivSRA(x1806,Const(4))
                                [7.4 = max(7.2) + 0.2] x1654 = FixSLA(x1653,Const(4))
                                [8.4 = max(7.0, 7.4) + 1.0] x1656 = FixSub(x1806,x1654)
                                Computing fullDFS: x1657
                                cur: x1657, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1657 = RegRead(x1011)
                                [9.4 = max(8.4, 0.0) + 1.0] x1658 = FixAdd(x1656,x1657)
                                [10.4 = max(9.4) + 1.0] x1659 = FixAdd(x1658,Const(15))
                                [10.6 = max(10.4) + 0.2] x1660 = FixDivSRA(x1659,Const(4))
                                [10.799999999999999 = max(10.6) + 0.2] x1661 = FixSLA(x1660,Const(4))
                                [11.8 = max(10.8) + 1.0] x1671 = RegWrite(x1648,x1661,Set())
                                Computing fullDFS: x1664
                                cur: x1664, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1664 = DRAMAddress(x906)
                                Computing fullDFS: x1668
                                Computing fullDFS: x1666
                                Computing fullDFS: x1808
                                [10.799999999999999 = max(10.6) + 0.2] x1808 = FixSLA(x1660,Const(6))
                                Computing fullDFS: x1665
                                Computing fullDFS: x1663
                                Computing fullDFS: x1807
                                [7.4 = max(7.2) + 0.2] x1807 = FixSLA(x1653,Const(6))
                                [7.4 = max(7.4) + 0.0] x1663 = FixToFix(x1807,TRUE,_64,_0)
                                [9.4 = max(7.4, 0.0) + 2.0] x1665 = FixAdd(x1663,x1664)
                                [10.8 = max(10.8, 9.4) + 0.0] x1666 = SimpleStruct(ArrayBuffer((offset,x1665), (size,x1808), (isLoad,Const(false))))
                                Computing fullDFS: x1667
                                cur: x1667, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1667 = DRAMIsAlloc(x906)
                                [10.8 = max(10.8, 0.0) + 0.0] x1668 = StreamOutBankedWrite(x1639,ArrayBuffer(x1666),ArrayBuffer(Set(x1667)))
                                Computing fullDFS: x1669
                                [9.4 = max(8.4) + 1.0] x1669 = RegWrite(x1646,x1656,Set())
                                Computing fullDFS: x1670
                                [10.4 = max(9.4) + 1.0] x1670 = RegWrite(x1647,x1658,Set())
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1650 = RegRead(x879)
                                  [0.0] x1657 = RegRead(x1011)
                                  [0.0] x1664 = DRAMAddress(x906)
                                  [0.0] x1667 = DRAMIsAlloc(x906)
                                  [1.0] x1649 = FixAdd(b924,b1644)
                                  [7.0] x1806 = FixFMA(x1649,x1650,b1005)
                                  [7.2] x1653 = FixDivSRA(x1806,Const(4))
                                  [7.4] x1654 = FixSLA(x1653,Const(4))
                                  [7.4] x1807 = FixSLA(x1653,Const(6))
                                  [7.4] x1663 = FixToFix(x1807,TRUE,_64,_0)
                                  [8.4] x1656 = FixSub(x1806,x1654)
                                  [9.4] x1658 = FixAdd(x1656,x1657)
                                  [9.4] x1665 = FixAdd(x1663,x1664)
                                  [9.4] x1669 = RegWrite(x1646,x1656,Set())
                                  [10.4] x1659 = FixAdd(x1658,Const(15))
                                  [10.4] x1670 = RegWrite(x1647,x1658,Set())
                                  [10.6] x1660 = FixDivSRA(x1659,Const(4))
                                  [10.8] x1661 = FixSLA(x1660,Const(4))
                                  [10.8] x1808 = FixSLA(x1660,Const(6))
                                  [10.8] x1666 = SimpleStruct(ArrayBuffer((offset,x1665), (size,x1808), (isLoad,Const(false))))
                                  [10.8] x1668 = StreamOutBankedWrite(x1639,ArrayBuffer(x1666),ArrayBuffer(Set(x1667)))
                                  [11.8] x1671 = RegWrite(x1648,x1661,Set())
                              x1694 = UnrolledForeach(Set(),x1675,Block(Const(())),List(List(b1676)),List(List(b1677)),None)
                                Working on pipeLatencies of result Vector(Const(()), x1680, x1690, x1678, x1693), schedule Vector(x1678, x1679, x1680, x1681, x1682, x1683, x1809, x1810, x1686, x1687, x1688, x1689, x1690, x1691, x1692, x1693)
                                Memories with both reads and writes in this scope: Set()
                                Done finding cycles: Vector(), Map()
                                ----------------------------------
                                Computing pipeLatencies for scope:
                                  x1678 = RegRead(x1646)
                                  x1679 = FixLeq(x1678,b1676)
                                  x1680 = RegRead(x1647)
                                  x1681 = FixLst(b1676,x1680)
                                  x1682 = And(x1679,x1681)
                                  x1683 = FixSub(b1676,x1678)
                                  x1809 = FixAnd(b1644,Const(3))
                                  x1810 = FixAnd(x1683,Const(3))
                                  x1686 = FixDivSRA(b1644,Const(2))
                                  x1687 = FixSLA(x1686,Const(2))
                                  x1688 = FixDivSRA(x1683,Const(2))
                                  x1689 = FixAdd(x1687,x1688)
                                  x1690 = SRAMBankedRead(x1019,Vector(List(x1809, x1810)),Vector(x1689),Vector(Set(x1682, b1677)),Vec[Fix[TRUE,_24,_8]])
                                  x1691 = VecApply(x1690,0)
                                  x1692 = SimpleStruct(ArrayBuffer((_1,x1691), (_2,x1682)))
                                  x1693 = StreamOutBankedWrite(x1640,ArrayBuffer(x1692),ArrayBuffer(Set(b1677)))
                                Computing fullDFS: Const(())
                                Computing fullDFS: x1680
                                cur: x1680, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1680 = RegRead(x1647)
                                Computing fullDFS: x1690
                                Computing fullDFS: x1682
                                Computing fullDFS: x1679
                                Computing fullDFS: x1678
                                cur: x1678, inReduce: false, latency: 0.0
                                [0.0 = max(0) + 0.0] x1678 = RegRead(x1646)
                                [0.4 = max(0.0) + 0.4] x1679 = FixLeq(x1678,b1676)
                                Computing fullDFS: x1681
                                [0.4 = max(0.0) + 0.4] x1681 = FixLst(b1676,x1680)
                                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x1682 = And(x1679,x1681)
                                Computing fullDFS: x1809
                                cur: x1809, inReduce: false, latency: 0.2
                                [0.2 = max(0) + 0.2] x1809 = FixAnd(b1644,Const(3))
                                Computing fullDFS: x1810
                                Computing fullDFS: x1683
                                [1.0 = max(0.0) + 1.0] x1683 = FixSub(b1676,x1678)
                                [1.2 = max(1.0) + 0.2] x1810 = FixAnd(x1683,Const(3))
                                Computing fullDFS: x1689
                                Computing fullDFS: x1687
                                Computing fullDFS: x1686
                                cur: x1686, inReduce: false, latency: 0.2
                                [0.2 = max(0) + 0.2] x1686 = FixDivSRA(b1644,Const(2))
                                [0.4 = max(0.2) + 0.2] x1687 = FixSLA(x1686,Const(2))
                                Computing fullDFS: x1688
                                [1.2 = max(1.0) + 0.2] x1688 = FixDivSRA(x1683,Const(2))
                                [2.2 = max(0.4, 1.2) + 1.0] x1689 = FixAdd(x1687,x1688)
                                [4.2 = max(0.6, 0.2, 1.2, 2.2) + 2.0] x1690 = SRAMBankedRead(x1019,Vector(List(x1809, x1810)),Vector(x1689),Vector(Set(x1682, b1677)),Vec[Fix[TRUE,_24,_8]])
                                Computing fullDFS: x1693
                                Computing fullDFS: x1692
                                Computing fullDFS: x1691
                                [4.2 = max(4.2) + 0.0] x1691 = VecApply(x1690,0)
                                [4.2 = max(0.6, 4.2) + 0.0] x1692 = SimpleStruct(ArrayBuffer((_1,x1691), (_2,x1682)))
                                [4.2 = max(4.2) + 0.0] x1693 = StreamOutBankedWrite(x1640,ArrayBuffer(x1692),ArrayBuffer(Set(b1677)))
                                Cycles: Map()
                                  Schedule after pipeLatencies calculation:
                                  [0.0] x1678 = RegRead(x1646)
                                  [0.0] x1680 = RegRead(x1647)
                                  [0.2] x1809 = FixAnd(b1644,Const(3))
                                  [0.2] x1686 = FixDivSRA(b1644,Const(2))
                                  [0.4] x1679 = FixLeq(x1678,b1676)
                                  [0.4] x1681 = FixLst(b1676,x1680)
                                  [0.4] x1687 = FixSLA(x1686,Const(2))
                                  [0.6] x1682 = And(x1679,x1681)
                                  [1.0] x1683 = FixSub(b1676,x1678)
                                  [1.2] x1810 = FixAnd(x1683,Const(3))
                                  [1.2] x1688 = FixDivSRA(x1683,Const(2))
                                  [2.2] x1689 = FixAdd(x1687,x1688)
                                  [4.2] x1690 = SRAMBankedRead(x1019,Vector(List(x1809, x1810)),Vector(x1689),Vector(Set(x1682, b1677)),Vec[Fix[TRUE,_24,_8]])
                                  [4.2] x1691 = VecApply(x1690,0)
                                  [4.2] x1692 = SimpleStruct(ArrayBuffer((_1,x1691), (_2,x1682)))
                                  [4.2] x1693 = StreamOutBankedWrite(x1640,ArrayBuffer(x1692),ArrayBuffer(Set(b1677)))
                          x1699 = UnitPipe(Set(b1645),Block(Const(())),None)
                            Working on pipeLatencies of result Vector(Const(()), x1697), schedule Vector(x1697)
                            Memories with both reads and writes in this scope: Set()
                            Done finding cycles: Vector(), Map()
                            ----------------------------------
                            Computing pipeLatencies for scope:
                              x1697 = StreamInBankedRead(x1641,ArrayBuffer(Set()))
                            Computing fullDFS: Const(())
                            Computing fullDFS: x1697
                            cur: x1697, inReduce: false, latency: 1.0
                            [1.0 = max(0) + 1.0] x1697 = StreamInBankedRead(x1641,ArrayBuffer(Set()))
                            Cycles: Map()
                              Schedule after pipeLatencies calculation:
                              [1.0] x1697 = StreamInBankedRead(x1641,ArrayBuffer(Set()))
  x1723 = MapIndices(x896,Block((b111) => x1722))
      x1719 = MapIndices(x1711,Block((b116) => x1718))
      x1722 = ArrayReduce(x1719,Block((x1719,b125) => x1720),Block((b126,b127) => x1721))
  x1734 = SeriesForeach(Const(0),x904,Const(1),Block((b135) => Const(())))
      x1732 = SeriesForeach(Const(0),x905,Const(1),Block((b136) => Const(())))
  x1745 = SeriesForeach(Const(0),x882,Const(1),Block((b148) => Const(())))
      x1743 = SeriesForeach(Const(0),x885,Const(1),Block((b149) => Const(())))
  x1749 = ArrayZip(x1706,x1723,Block((x1706,b159) => x1746),Block((x1723,b159) => x1747),Block((x1746,x1747) => x1748))
  x1752 = ArrayReduce(x1749,Block((x1749,b165) => x1750),Block((b166,b167) => x1751))
