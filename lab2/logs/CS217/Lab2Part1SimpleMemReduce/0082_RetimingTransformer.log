  Transforming Block Block(Const(())) [List() => false, List() => false]
    Transforming Block Block(Const(())) [List() => false, List() => false]
      Transforming Block Block((x161) => Const(())) [List() => false, List() => false]
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x175 = SRAMBankedWrite(x170,Vector(Const(1)),Vector(List(Const(0))),Vector(b173),Vector(Set(b174, b168))) (0.0)
        Working on pipeLatencies of result Vector(Const(()), x175), schedule Vector(x175)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x175
        cur: x175, inReduce: false, latency: 1.0
        Cycles: Map()
        computing delay lines for Vector(x175) Map(x175 -> 1.0) Map() List()
        [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x175 = SRAMBankedWrite(x170,Vector(Const(1)),Vector(List(Const(0))),Vector(b173),Vector(Set(b174, b168)))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b174
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 1
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b173
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 0
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b168
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x177 = SRAMBankedRead(x170,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) (0.0)
          x178 = VecApply(x177,0) (2.0)
          x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) (0.0)
          x180 = VecApply(x179,0) (2.0)
          x182 = FixEql(b166,Const(-5)) (0.0)
          x183 = FixAdd(x178,x180) (2.0)
          x184 = Mux(x182,x178,x183) (3.0)
          x185 = SRAMBankedWrite(x161,Vector(x184),Vector(List(Const(0))),Vector(b167),Vector(Set(b169))) (3.5)
        Working on pipeLatencies of result Vector(Const(()), x177, x179, x185), schedule Vector(x177, x178, x179, x180, x182, x183, x184, x185)
        Memories with both reads and writes in this scope: Set(x161)
        NonConflictSets(x179, x185): Set()
        NonConflictSets(x179, x185): Set()
        Found Cycle: x179, x185
        Exclusions: Set() Set() 
        Done finding cycles: Vector(AccumTriple(x161,x179,x185)), Map(x185 -> List(AccumTriple(x161,x179,x185)), x184 -> List(AccumTriple(x161,x179,x185)), x180 -> List(AccumTriple(x161,x179,x185)), x183 -> List(AccumTriple(x161,x179,x185)), x179 -> List(AccumTriple(x161,x179,x185)))
        Computing fullDFS: Const(())
        Computing fullDFS: x177
        cur: x177, inReduce: false, latency: 2.0
        Computing fullDFS: x179
        cur: x179, inReduce: true, latency: 2.0
        Known Cycles: List(AccumTriple(x161,x179,x185))
        Computing fullDFS: x185
        Computing fullDFS: x184
        Computing fullDFS: x178
        Computing fullDFS: x182
        cur: x182, inReduce: false, latency: 0.2
        Computing fullDFS: x183
        Computing fullDFS: x180
        Cycle #0: write: x185, cycle: x179, x179, x180, x183, x184, x185
        Cycles: Map(x185 -> Vector(x179, x179, x180, x183, x184, x185), x184 -> Vector(x179, x180, x183, x184), x180 -> Vector(x179, x180), x183 -> Vector(x179, x180, x183), x179 -> List(x179))
        pseudo cycles for x161:
        Access: x179 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
        First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
        Pushing x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]]) by 0.0 to 2.0 due to muxing.
        Access: x185 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
        First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
        Pushing x185 = SRAMBankedWrite(x161,Vector(x184),Vector(List(Const(0))),Vector(b167),Vector(Set(b169))) by 0.0 to 4.5 due to muxing.
        computing delay lines for Vector(x177, x178, x179, x180, x182, x183, x184, x185) Map(x185 -> 4.5, x184 -> 3.5, x179 -> 2.0, x180 -> 2.0, x177 -> 2.0, x182 -> 0.2, x175 -> 1.0, x183 -> 3.0, x178 -> 2.0) Map() List(x179, x185, x179, x179, x180, x183, x184, x185)
        [Arrive = Dly - Lat: 0.0 = 2.0 - 2.0] x177 = SRAMBankedRead(x170,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]])
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 0
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b167
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b169
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x178 = VecApply(x177,0)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x177 = SRAMBankedRead(x170,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]])
        [Arrive = Dly - Lat: 0.0 = 2.0 - 2.0] x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]])
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 0
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b167
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b169
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x180 = VecApply(x179,0)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x179 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b167),Vector(Set(b169)),Vec[Fix[TRUE,_32,_0]])
        [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x182 = FixEql(b166,Const(-5))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b166
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] -5
        [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x183 = FixAdd(x178,x180)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x178 = VecApply(x177,0)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x180 = VecApply(x179,0)
        [Arrive = Dly - Lat: 3.0 = 3.5 - 0.5] x184 = Mux(x182,x178,x183)
        ..[2.8 (-> 3) = 3.0 - (0.2 - 0.0) (-> 3 - 0)] x182 = FixEql(b166,Const(-5))
        ..[1.0 (-> 1) = 3.0 - (2.0 - 0.0) (-> 3 - 2)] x178 = VecApply(x177,0)
        ..[0.0 (-> 0) = 3.0 - (3.0 - 0.0) (-> 3 - 3)] x183 = FixAdd(x178,x180)
        [Arrive = Dly - Lat: 3.5 = 4.5 - 1.0] x185 = SRAMBankedWrite(x161,Vector(x184),Vector(List(Const(0))),Vector(b167),Vector(Set(b169)))
        ..[0.5 (-> 0) = 3.5 - (3.5 - 0.5) (-> 3 - 3)] x184 = Mux(x182,x178,x183)
        ..[3.5 (-> 3) = 3.5 - (0.0 - 0.0) (-> 3 - 0)] b169
        ..[3.5 (-> 3) = 3.5 - (0.0 - 0.0) (-> 3 - 0)] 0
        ..[3.5 (-> 3) = 3.5 - (0.0 - 0.0) (-> 3 - 0)] b167
          Creating value delay on b169 for reader x185 with delay 3: 
          Creating value delay on Const(0) for reader x185 with delay 3: 
          Creating value delay on b167 for reader x185 with delay 3: 
          Creating value delay on x182 for reader x184 with delay 3: 
          Creating value delay on x178 for reader x184 with delay 1: 
      Transforming Block Block(Const(())) [List() => false, List() => false]
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x191 = DRAMAddress(x160) (0.0)
          x192 = SimpleStruct(ArrayBuffer((offset,x191), (size,Const(64)), (isLoad,Const(false)))) (0.0)
          x193 = DRAMIsAlloc(x160) (0.0)
          x194 = StreamOutBankedWrite(x188,ArrayBuffer(x192),ArrayBuffer(Set(x193))) (0.0)
        Working on pipeLatencies of result Vector(Const(()), x191, x193, x194), schedule Vector(x191, x192, x193, x194)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x191
        cur: x191, inReduce: false, latency: 0.0
        Computing fullDFS: x193
        cur: x193, inReduce: false, latency: 0.0
        Computing fullDFS: x194
        Computing fullDFS: x192
        Cycles: Map()
        computing delay lines for Vector(x191, x192, x193, x194) Map(x185 -> 4.5, x184 -> 3.5, x179 -> 2.0, x192 -> 0.0, x193 -> 0.0, x180 -> 2.0, x191 -> 0.0, x194 -> 0.0, x177 -> 2.0, x182 -> 0.2, x175 -> 1.0, x183 -> 3.0, x178 -> 2.0) Map() List(x179, x185, x179, x179, x180, x183, x184, x185)
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x191 = DRAMAddress(x160)
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x192 = SimpleStruct(ArrayBuffer((offset,x191), (size,Const(64)), (isLoad,Const(false))))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x191 = DRAMAddress(x160)
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 64
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] false
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x193 = DRAMIsAlloc(x160)
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x194 = StreamOutBankedWrite(x188,ArrayBuffer(x192),ArrayBuffer(Set(x193)))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x192 = SimpleStruct(ArrayBuffer((offset,x191), (size,Const(64)), (isLoad,Const(false))))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x193 = DRAMIsAlloc(x160)
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x200 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b198),Vector(Set(b199)),Vec[Fix[TRUE,_32,_0]]) (0.0)
          x201 = VecApply(x200,0) (2.0)
          x202 = SimpleStruct(ArrayBuffer((_1,x201), (_2,Const(true)))) (2.0)
          x203 = StreamOutBankedWrite(x189,ArrayBuffer(x202),ArrayBuffer(Set(b199))) (2.0)
        Working on pipeLatencies of result Vector(Const(()), x200, x203), schedule Vector(x200, x201, x202, x203)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x200
        cur: x200, inReduce: false, latency: 2.0
        Computing fullDFS: x203
        Computing fullDFS: x202
        Computing fullDFS: x201
        Cycles: Map()
        computing delay lines for Vector(x200, x201, x202, x203) Map(x202 -> 2.0, x185 -> 4.5, x184 -> 3.5, x179 -> 2.0, x201 -> 2.0, x192 -> 0.0, x193 -> 0.0, x180 -> 2.0, x191 -> 0.0, x194 -> 0.0, x177 -> 2.0, x182 -> 0.2, x175 -> 1.0, x203 -> 2.0, x183 -> 3.0, x200 -> 2.0, x178 -> 2.0) Map() List(x179, x185, x179, x179, x180, x183, x184, x185)
        [Arrive = Dly - Lat: 0.0 = 2.0 - 2.0] x200 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b198),Vector(Set(b199)),Vec[Fix[TRUE,_32,_0]])
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 0
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b198
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b199
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x201 = VecApply(x200,0)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x200 = SRAMBankedRead(x161,Vector(List(Const(0))),Vector(b198),Vector(Set(b199)),Vec[Fix[TRUE,_32,_0]])
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x202 = SimpleStruct(ArrayBuffer((_1,x201), (_2,Const(true))))
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x201 = VecApply(x200,0)
        ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] true
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x203 = StreamOutBankedWrite(x189,ArrayBuffer(x202),ArrayBuffer(Set(b199)))
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x202 = SimpleStruct(ArrayBuffer((_1,x201), (_2,Const(true))))
        ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b199
          Creating value delay on Const(true) for reader x202 with delay 2: 
          Creating value delay on b199 for reader x203 with delay 2: 
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x206 = StreamInBankedRead(x190,ArrayBuffer(Set())) (0.0)
        Working on pipeLatencies of result Vector(Const(()), x206), schedule Vector(x206)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x206
        cur: x206, inReduce: false, latency: 1.0
        Cycles: Map()
        computing delay lines for Vector(x206) Map(x202 -> 2.0, x185 -> 4.5, x184 -> 3.5, x179 -> 2.0, x206 -> 1.0, x201 -> 2.0, x192 -> 0.0, x193 -> 0.0, x180 -> 2.0, x191 -> 0.0, x194 -> 0.0, x177 -> 2.0, x182 -> 0.2, x175 -> 1.0, x203 -> 2.0, x183 -> 3.0, x200 -> 2.0, x178 -> 2.0) Map() List(x179, x185, x179, x179, x180, x183, x184, x185)
        [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x206 = StreamInBankedRead(x190,ArrayBuffer(Set()))
    Transforming Block Block((b26) => Const(10)) [List() => false, List() => false]
    Transforming Block Block((b31) => Const(())) [List() => false, List() => false]
    Transforming Block Block((b41) => Const(())) [List() => false, List() => false]
    Transforming Block Block((x212,b48) => x231) [List() => false, List() => false]
    Transforming Block Block((x210,b48) => x232) [List() => false, List() => false]
    Transforming Block Block((x231,x232) => x233) [List() => false, List() => false]
    Transforming Block Block((x234,b53) => x235) [List() => false, List() => false]
    Transforming Block Block((b54,b55) => x236) [List() => false, List() => false]
