  Transforming Block Block(Const(())) [List() => false, List() => false]
    Transforming Block Block(Const(())) [List() => false, List() => false]
      Transforming Block Block(Const(())) [List() => true, List() => false]
      Retiming block Block(Const(())):
        x213 = RegWrite(x212,Const(16),Set()) (0.0)
      Working on pipeLatencies of result Vector(Const(()), x213), schedule Vector(x213)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x213
      cur: x213, inReduce: false, latency: 1.0
      Cycles: Map()
      computing delay lines for Vector(x213) Map(x213 -> 1.0) Map() List()
      [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x213 = RegWrite(x212,Const(16),Set())
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 16
      Transforming Block Block((b5) => x215) [List(true, true) => true, List(true, false) => false]
      Retiming block Block((b5) => x215):
        x215 = FixLst(b5,Const(32)) (0.0)
      Working on pipeLatencies of result Vector(x215), schedule Vector(x215)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: x215
      cur: x215, inReduce: false, latency: 0.4
      Cycles: Map()
      computing delay lines for Vector(x215) Map(x213 -> 1.0, x215 -> 0.4) Map() List()
      [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x215 = FixLst(b5,Const(32))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 32
      Transforming Block Block((b5) => Const(())) [List(true) => true, List(false) => true]
      Retiming block Block((b5) => Const(())):
        x216 = FixLst(b5,Const(16)) (0.0)
        x217 = Not(x216) (0.4)
        x218 = FixLst(b5,Const(8)) (0.0)
        x219 = Not(x218) (0.4)
        x220 = FixSub(Const(31),b5) (0.0)
        x221 = SRAMBankedWrite(x211,Vector(b5),Vector(List(Const(0))),Vector(x220),Vector(Set(x216, x218))) (1.0)
        x224 = FixAdd(b5,Const(1)) (0.0)
        x225 = SRAMBankedWrite(x211,Vector(x224),Vector(List(Const(0))),Vector(x220),Vector(Set(x216, x219))) (2.0)
        x229 = FixSub(b5,Const(16)) (0.0)
        x230 = FixEql(b5,Const(16)) (0.0)
        x231 = Not(x230) (0.2)
        x232 = FixEql(b5,Const(17)) (0.0)
        x233 = And(x232,x231) (0.4)
        x234 = Not(x232) (0.2)
        x235 = And(x234,x231) (0.4)
        x237 = RegRead(x212) (0.0)
        x302 = OneHotMux(List(x230, x233, x235),Vector(Const(17), x237, b5)) (0.6)
        x241 = SRAMBankedWrite(x211,Vector(x302),Vector(List(Const(0))),Vector(x229),Vector(Set(x217))) (3.0)
      Working on pipeLatencies of result Vector(Const(()), x221, x225, x237, x241), schedule Vector(x216, x217, x218, x219, x220, x221, x224, x225, x229, x230, x231, x232, x233, x234, x235, x237, x302, x241)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x221
      Computing fullDFS: x216
      cur: x216, inReduce: false, latency: 0.4
      Computing fullDFS: x218
      cur: x218, inReduce: false, latency: 0.4
      Computing fullDFS: x220
      cur: x220, inReduce: false, latency: 1.0
      Computing fullDFS: x225
      Computing fullDFS: x219
      Computing fullDFS: x224
      cur: x224, inReduce: false, latency: 1.0
      Computing fullDFS: x237
      cur: x237, inReduce: false, latency: 0.0
      Computing fullDFS: x241
      Computing fullDFS: x217
      Computing fullDFS: x229
      cur: x229, inReduce: false, latency: 1.0
      Computing fullDFS: x302
      Computing fullDFS: x230
      cur: x230, inReduce: false, latency: 0.2
      Computing fullDFS: x233
      Computing fullDFS: x231
      Computing fullDFS: x232
      cur: x232, inReduce: false, latency: 0.2
      Computing fullDFS: x235
      Computing fullDFS: x234
      Cycles: Map()
      computing delay lines for Vector(x216, x217, x218, x219, x220, x221, x224, x225, x229, x230, x231, x232, x233, x234, x235, x237, x302, x241) Map(x234 -> 0.4, x217 -> 0.6000000000000001, x216 -> 0.4, x221 -> 2.0, x233 -> 0.6000000000000001, x220 -> 1.0, x302 -> 2.6, x229 -> 1.0, x224 -> 1.0, x225 -> 3.0, x237 -> 0.0, x219 -> 0.6000000000000001, x230 -> 0.2, x213 -> 1.0, x241 -> 4.0, x231 -> 0.4, x218 -> 0.4, x235 -> 0.6000000000000001, x215 -> 0.4, x232 -> 0.2) Map() List()
      [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x216 = FixLst(b5,Const(16))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 16
      [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x217 = Not(x216)
      ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x216 = FixLst(b5,Const(16))
      [Arrive = Dly - Lat: 0.0 = 0.4 - 0.4] x218 = FixLst(b5,Const(8))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 8
      [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x219 = Not(x218)
      ..[0.0 (-> 0) = 0.4 - (0.4 - 0.0) (-> 0 - 0)] x218 = FixLst(b5,Const(8))
      [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x220 = FixSub(Const(31),b5)
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 31
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      [Arrive = Dly - Lat: 1.0 = 2.0 - 1.0] x221 = SRAMBankedWrite(x211,Vector(b5),Vector(List(Const(0))),Vector(x220),Vector(Set(x216, x218)))
      ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] b5
      ..[0.6 (-> 1) = 1.0 - (0.4 - 0.0) (-> 1 - 0)] x216 = FixLst(b5,Const(16))
      ..[0.0 (-> 0) = 1.0 - (1.0 - 0.0) (-> 1 - 1)] x220 = FixSub(Const(31),b5)
      ..[1.0 (-> 1) = 1.0 - (0.0 - 0.0) (-> 1 - 0)] 0
      ..[0.6 (-> 1) = 1.0 - (0.4 - 0.0) (-> 1 - 0)] x218 = FixLst(b5,Const(8))
      [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x224 = FixAdd(b5,Const(1))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 1
      [Arrive = Dly - Lat: 2.0 = 3.0 - 1.0] x225 = SRAMBankedWrite(x211,Vector(x224),Vector(List(Const(0))),Vector(x220),Vector(Set(x216, x219)))
      ..[1.6 (-> 2) = 2.0 - (0.4 - 0.0) (-> 2 - 0)] x216 = FixLst(b5,Const(16))
      ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x220 = FixSub(Const(31),b5)
      ..[1.0 (-> 1) = 2.0 - (1.0 - 0.0) (-> 2 - 1)] x224 = FixAdd(b5,Const(1))
      ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] 0
      ..[1.6 (-> 2) = 2.0 - (0.6 - 0.2) (-> 2 - 0)] x219 = Not(x218)
      [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x229 = FixSub(b5,Const(16))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 16
      [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x230 = FixEql(b5,Const(16))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 16
      [Arrive = Dly - Lat: 0.2 = 0.4 - 0.2] x231 = Not(x230)
      ..[0.0 (-> 0) = 0.2 - (0.2 - 0.0) (-> 0 - 0)] x230 = FixEql(b5,Const(16))
      [Arrive = Dly - Lat: 0.0 = 0.2 - 0.2] x232 = FixEql(b5,Const(17))
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 17
      [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x233 = And(x232,x231)
      ..[0.2 (-> 0) = 0.4 - (0.2 - 0.0) (-> 0 - 0)] x232 = FixEql(b5,Const(17))
      ..[0.2 (-> 0) = 0.4 - (0.4 - 0.2) (-> 0 - 0)] x231 = Not(x230)
      [Arrive = Dly - Lat: 0.2 = 0.4 - 0.2] x234 = Not(x232)
      ..[0.0 (-> 0) = 0.2 - (0.2 - 0.0) (-> 0 - 0)] x232 = FixEql(b5,Const(17))
      [Arrive = Dly - Lat: 0.4 = 0.6000000000000001 - 0.2] x235 = And(x234,x231)
      ..[0.2 (-> 0) = 0.4 - (0.4 - 0.2) (-> 0 - 0)] x234 = Not(x232)
      ..[0.2 (-> 0) = 0.4 - (0.4 - 0.2) (-> 0 - 0)] x231 = Not(x230)
      [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x237 = RegRead(x212)
      [Arrive = Dly - Lat: 0.6 = 2.6 - 2.0] x302 = OneHotMux(List(x230, x233, x235),Vector(Const(17), x237, b5))
      ..[0.6 (-> 0) = 0.6 - (0.0 - 0.0) (-> 0 - 0)] b5
      ..[0.19999999999999996 (-> 0) = 0.6 - (0.6 - 0.2) (-> 0 - 0)] x233 = And(x232,x231)
      ..[0.6 (-> 0) = 0.6 - (0.0 - 0.0) (-> 0 - 0)] 17
      ..[0.6 (-> 0) = 0.6 - (0.0 - 0.0) (-> 0 - 0)] x237 = RegRead(x212)
      ..[0.39999999999999997 (-> 0) = 0.6 - (0.2 - 0.0) (-> 0 - 0)] x230 = FixEql(b5,Const(16))
      ..[0.19999999999999996 (-> 0) = 0.6 - (0.6 - 0.2) (-> 0 - 0)] x235 = And(x234,x231)
      [Arrive = Dly - Lat: 3.0 = 4.0 - 1.0] x241 = SRAMBankedWrite(x211,Vector(x302),Vector(List(Const(0))),Vector(x229),Vector(Set(x217)))
      ..[2.6 (-> 3) = 3.0 - (0.6 - 0.2) (-> 3 - 0)] x217 = Not(x216)
      ..[2.4 (-> 3) = 3.0 - (2.6 - 2.0) (-> 3 - 0)] x302 = OneHotMux(List(x230, x233, x235),Vector(Const(17), x237, b5))
      ..[2.0 (-> 2) = 3.0 - (1.0 - 0.0) (-> 3 - 1)] x229 = FixSub(b5,Const(16))
      ..[3.0 (-> 3) = 3.0 - (0.0 - 0.0) (-> 3 - 0)] 0
        Creating value delay on x217 for reader x241 with delay 3: 
        Creating value delay on b5 for reader x221 with delay 1: 
        Creating value delay on x216 for reader x221 with delay 1: 
        Creating value delay on x216 for reader x225 with delay 2: 
        Creating value delay on x220 for reader x225 with delay 1: 
        Creating value delay on x302 for reader x241 with delay 3: 
        Creating value delay on x229 for reader x241 with delay 2: 
        Creating value delay on x224 for reader x225 with delay 1: 
        Creating value delay on Const(0) for reader x221 with delay 1: 
        Creating value delay on Const(0) for reader x225 with delay 2: 
        Creating value delay on Const(0) for reader x241 with delay 3: 
        Creating value delay on x219 for reader x225 with delay 2: 
        Creating value delay on x218 for reader x221 with delay 1: 
      Transforming Block Block((b5) => x244) [List() => true, List() => false]
      Retiming block Block((b5) => x244):
        x244 = FixAdd(b5,Const(1)) (4.0)
      Working on pipeLatencies of result Vector(x244), schedule Vector(x244)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: x244
      cur: x244, inReduce: false, latency: 1.0
      Cycles: Map()
      computing delay lines for Vector(x244) Map(x234 -> 0.4, x217 -> 0.6000000000000001, x216 -> 0.4, x221 -> 2.0, x233 -> 0.6000000000000001, x220 -> 1.0, x302 -> 2.6, x229 -> 1.0, x224 -> 1.0, x225 -> 3.0, x237 -> 0.0, x244 -> 5.0, x219 -> 0.6000000000000001, x230 -> 0.2, x213 -> 1.0, x241 -> 4.0, x231 -> 0.4, x218 -> 0.4, x235 -> 0.6000000000000001, x215 -> 0.4, x232 -> 0.2) Map() List()
      [Arrive = Dly - Lat: 4.0 = 5.0 - 1.0] x244 = FixAdd(b5,Const(1))
      ..[4.0 (-> 4) = 4.0 - (0.0 - 0.0) (-> 4 - 0)] b5
      ..[4.0 (-> 4) = 4.0 - (0.0 - 0.0) (-> 4 - 0)] 1
        Creating value delay on Const(1) for reader x244 with delay 4: 
        Creating value delay on b5 for reader x244 with delay 4: 
      Transforming Block Block(Const(())) [List() => false, List() => false]
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x249 = DRAMAddress(x210) (0.0)
          x250 = SimpleStruct(ArrayBuffer((offset,x249), (size,Const(128)), (isLoad,Const(false)))) (0.0)
          x251 = DRAMIsAlloc(x210) (0.0)
          x252 = StreamOutBankedWrite(x246,ArrayBuffer(x250),ArrayBuffer(Set(x251))) (0.0)
        Working on pipeLatencies of result Vector(Const(()), x249, x251, x252), schedule Vector(x249, x250, x251, x252)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x249
        cur: x249, inReduce: false, latency: 0.0
        Computing fullDFS: x251
        cur: x251, inReduce: false, latency: 0.0
        Computing fullDFS: x252
        Computing fullDFS: x250
        Cycles: Map()
        computing delay lines for Vector(x249, x250, x251, x252) Map(x249 -> 0.0, x234 -> 0.4, x217 -> 0.6000000000000001, x216 -> 0.4, x221 -> 2.0, x233 -> 0.6000000000000001, x220 -> 1.0, x302 -> 2.6, x229 -> 1.0, x252 -> 0.0, x224 -> 1.0, x225 -> 3.0, x237 -> 0.0, x244 -> 5.0, x219 -> 0.6000000000000001, x230 -> 0.2, x213 -> 1.0, x251 -> 0.0, x241 -> 4.0, x250 -> 0.0, x231 -> 0.4, x218 -> 0.4, x235 -> 0.6000000000000001, x215 -> 0.4, x232 -> 0.2) Map() List()
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x249 = DRAMAddress(x210)
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x250 = SimpleStruct(ArrayBuffer((offset,x249), (size,Const(128)), (isLoad,Const(false))))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x249 = DRAMAddress(x210)
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 128
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] false
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x251 = DRAMIsAlloc(x210)
        [Arrive = Dly - Lat: 0.0 = 0.0 - 0.0] x252 = StreamOutBankedWrite(x246,ArrayBuffer(x250),ArrayBuffer(Set(x251)))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x250 = SimpleStruct(ArrayBuffer((offset,x249), (size,Const(128)), (isLoad,Const(false))))
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] x251 = DRAMIsAlloc(x210)
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x258 = SRAMBankedRead(x211,Vector(List(Const(0))),Vector(b256),Vector(Set(b257)),Vec[Fix[TRUE,_32,_0]]) (0.0)
          x259 = VecApply(x258,0) (2.0)
          x260 = SimpleStruct(ArrayBuffer((_1,x259), (_2,Const(true)))) (2.0)
          x261 = StreamOutBankedWrite(x247,ArrayBuffer(x260),ArrayBuffer(Set(b257))) (2.0)
        Working on pipeLatencies of result Vector(Const(()), x258, x261), schedule Vector(x258, x259, x260, x261)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x258
        cur: x258, inReduce: false, latency: 2.0
        Computing fullDFS: x261
        Computing fullDFS: x260
        Computing fullDFS: x259
        Cycles: Map()
        computing delay lines for Vector(x258, x259, x260, x261) Map(x249 -> 0.0, x234 -> 0.4, x217 -> 0.6000000000000001, x261 -> 2.0, x216 -> 0.4, x221 -> 2.0, x233 -> 0.6000000000000001, x220 -> 1.0, x302 -> 2.6, x260 -> 2.0, x229 -> 1.0, x252 -> 0.0, x224 -> 1.0, x225 -> 3.0, x237 -> 0.0, x244 -> 5.0, x259 -> 2.0, x219 -> 0.6000000000000001, x230 -> 0.2, x213 -> 1.0, x251 -> 0.0, x241 -> 4.0, x250 -> 0.0, x231 -> 0.4, x218 -> 0.4, x258 -> 2.0, x235 -> 0.6000000000000001, x215 -> 0.4, x232 -> 0.2) Map() List()
        [Arrive = Dly - Lat: 0.0 = 2.0 - 2.0] x258 = SRAMBankedRead(x211,Vector(List(Const(0))),Vector(b256),Vector(Set(b257)),Vec[Fix[TRUE,_32,_0]])
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] 0
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b256
        ..[0.0 (-> 0) = 0.0 - (0.0 - 0.0) (-> 0 - 0)] b257
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x259 = VecApply(x258,0)
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x258 = SRAMBankedRead(x211,Vector(List(Const(0))),Vector(b256),Vector(Set(b257)),Vec[Fix[TRUE,_32,_0]])
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x260 = SimpleStruct(ArrayBuffer((_1,x259), (_2,Const(true))))
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x259 = VecApply(x258,0)
        ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] true
        [Arrive = Dly - Lat: 2.0 = 2.0 - 0.0] x261 = StreamOutBankedWrite(x247,ArrayBuffer(x260),ArrayBuffer(Set(b257)))
        ..[0.0 (-> 0) = 2.0 - (2.0 - 0.0) (-> 2 - 2)] x260 = SimpleStruct(ArrayBuffer((_1,x259), (_2,Const(true))))
        ..[2.0 (-> 2) = 2.0 - (0.0 - 0.0) (-> 2 - 0)] b257
          Creating value delay on Const(true) for reader x260 with delay 2: 
          Creating value delay on b257 for reader x261 with delay 2: 
        Transforming Block Block(Const(())) [List() => true, List() => false]
        Retiming block Block(Const(())):
          x264 = StreamInBankedRead(x248,ArrayBuffer(Set())) (0.0)
        Working on pipeLatencies of result Vector(Const(()), x264), schedule Vector(x264)
        Memories with both reads and writes in this scope: Set()
        Done finding cycles: Vector(), Map()
        Computing fullDFS: Const(())
        Computing fullDFS: x264
        cur: x264, inReduce: false, latency: 1.0
        Cycles: Map()
        computing delay lines for Vector(x264) Map(x249 -> 0.0, x234 -> 0.4, x217 -> 0.6000000000000001, x261 -> 2.0, x216 -> 0.4, x221 -> 2.0, x233 -> 0.6000000000000001, x220 -> 1.0, x302 -> 2.6, x260 -> 2.0, x229 -> 1.0, x252 -> 0.0, x224 -> 1.0, x225 -> 3.0, x237 -> 0.0, x244 -> 5.0, x264 -> 1.0, x259 -> 2.0, x219 -> 0.6000000000000001, x230 -> 0.2, x213 -> 1.0, x251 -> 0.0, x241 -> 4.0, x250 -> 0.0, x231 -> 0.4, x218 -> 0.4, x258 -> 2.0, x235 -> 0.6000000000000001, x215 -> 0.4, x232 -> 0.2) Map() List()
        [Arrive = Dly - Lat: 0.0 = 1.0 - 1.0] x264 = StreamInBankedRead(x248,ArrayBuffer(Set()))
    Transforming Block Block((b34) => Const(())) [List() => false, List() => false]
    Transforming Block Block((b44) => Const(())) [List() => false, List() => false]
    Transforming Block Block((x270,b51) => x289) [List() => false, List() => false]
    Transforming Block Block((x268,b51) => x290) [List() => false, List() => false]
    Transforming Block Block((x289,x290) => x291) [List() => false, List() => false]
    Transforming Block Block((x292,b56) => x293) [List() => false, List() => false]
    Transforming Block Block((b57,b58) => x294) [List() => false, List() => false]
