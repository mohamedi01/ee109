  x168 = AccelScope(Block(Const(())))
    x214 = UnitPipe(Set(),Block(Const(())),None)
    Working on pipeLatencies of result Vector(Const(()), x213), schedule Vector(x213)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: Const(())
    Computing fullDFS: x213
    cur: x213, inReduce: false, latency: 1.0
    Cycles: Map()
    cycles are Vector()
       stm: x213, None
     - Latency:  1.0
     - Interval: 1.0 (1.0 bbox)
     - Iter Diff: None (from ArrayBuffer())
    x245 = StateMachine(Set(),Const(0),Block((b5) => x215),Block((b5) => Const(())),Block((b5) => x244),Fix[TRUE,_32,_0])
    Working on pipeLatencies of result Vector(x215), schedule Vector(x215)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: x215
    cur: x215, inReduce: false, latency: 0.4
    Cycles: Map()
    cycles are Vector()
    Working on pipeLatencies of result Vector(x244), schedule Vector(x313, x244)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: x244
    Computing fullDFS: x313
    cur: x313, inReduce: false, latency: 0.0
    Cycles: Map()
    cycles are Vector()
    Working on pipeLatencies of result Vector(Const(()), x221, x225, x237, x241), schedule Vector(x216, x217, x218, x219, x220, x303, x304, x305, x221, x224, x306, x307, x308, x309, x225, x229, x230, x231, x232, x233, x234, x235, x237, x302, x310, x311, x312, x241)
    Memories with both reads and writes in this scope: Set()
    Done finding cycles: Vector(), Map()
    Computing fullDFS: Const(())
    Computing fullDFS: x221
    Computing fullDFS: x220
    cur: x220, inReduce: false, latency: 1.0
    Computing fullDFS: x303
    Computing fullDFS: x218
    cur: x218, inReduce: false, latency: 0.4
    Computing fullDFS: x304
    Computing fullDFS: x216
    cur: x216, inReduce: false, latency: 0.4
    Computing fullDFS: x305
    cur: x305, inReduce: false, latency: 0.0
    Computing fullDFS: x225
    Computing fullDFS: x306
    Computing fullDFS: x307
    Computing fullDFS: x308
    Computing fullDFS: x224
    cur: x224, inReduce: false, latency: 1.0
    Computing fullDFS: x309
    Computing fullDFS: x219
    Computing fullDFS: x237
    cur: x237, inReduce: false, latency: 0.0
    Computing fullDFS: x241
    Computing fullDFS: x310
    Computing fullDFS: x229
    cur: x229, inReduce: false, latency: 1.0
    Computing fullDFS: x311
    Computing fullDFS: x302
    Computing fullDFS: x230
    cur: x230, inReduce: false, latency: 0.2
    Computing fullDFS: x233
    Computing fullDFS: x231
    Computing fullDFS: x232
    cur: x232, inReduce: false, latency: 0.2
    Computing fullDFS: x235
    Computing fullDFS: x234
    Computing fullDFS: x312
    Computing fullDFS: x217
    Cycles: Map()
    Written memories: 
    Read memories: 
    Intersection: 
     - Latency:  5.4
     - Interval: 2.0
    x267 = UnitPipe(Set(),Block(Const(())),None)
      x253 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x249, x251, x252), schedule Vector(x249, x250, x251, x252)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x249
      cur: x249, inReduce: false, latency: 0.0
      Computing fullDFS: x251
      cur: x251, inReduce: false, latency: 0.0
      Computing fullDFS: x252
      Computing fullDFS: x250
      Cycles: Map()
      cycles are Vector()
         stm: x249, None
         stm: x250, None
         stm: x251, None
         stm: x252, None
       - Latency:  0.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x262 = UnrolledForeach(Set(),x255,Block(Const(())),List(List(b256)),List(List(b257)),None)
      Working on pipeLatencies of result Vector(Const(()), x258, x261), schedule Vector(x258, x259, x260, x314, x261)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x258
      cur: x258, inReduce: false, latency: 2.0
      Computing fullDFS: x261
      Computing fullDFS: x260
      Computing fullDFS: x259
      Computing fullDFS: x314
      cur: x314, inReduce: false, latency: 0.0
      Cycles: Map()
      cycles are Vector()
         stm: x258, None
         stm: x259, None
         stm: x260, None
         stm: x314, None
         stm: x261, None
       - Latency:  2.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
      x266 = UnitPipe(Set(),Block(Const(())),None)
      Working on pipeLatencies of result Vector(Const(()), x264), schedule Vector(x264)
      Memories with both reads and writes in this scope: Set()
      Done finding cycles: Vector(), Map()
      Computing fullDFS: Const(())
      Computing fullDFS: x264
      cur: x264, inReduce: false, latency: 1.0
      Cycles: Map()
      cycles are Vector()
         stm: x264, None
       - Latency:  1.0
       - Interval: 1.0 (1.0 bbox)
       - Iter Diff: None (from ArrayBuffer())
     - Interval: 1.0
   - Interval: 2.0
