package model
import models.Runtime._

object AppRuntimeModel_final extends App {
  def build_model(): ControllerModel = {
    val x810 = new ControllerModel(810, OuterControl, Left(Sequenced), CChainModel(Seq()), 0, 1, Ctx("x810", "113", "Accel {", "x810 = AccelScope(Block(Const(())))"))
    val x911 = CtrModel(0, Ask(880, "ArgIn x880 (ctr stop)", Ctx("x911", "114", "Foreach(K by tileK){kk =>", "x911 = CounterNew(Const(0),x1758,Const(16),Const(1))")), 16, 1)
    val x912 = CChainModel(List[CtrModel[_,_,_,_]](x911), Ctx("x912", "114", "Foreach(K by tileK){kk =>", "List(x911 = CounterNew(Const(0),x1758,Const(16),Const(1)))"))
    val x1704 = new ControllerModel(1704, OuterControl, Left(Pipelined), x912, 0, 1, Ctx("x1704", "114", "Foreach(K by tileK){kk =>", "x1704 = UnrolledForeach(Set(),x912,Block(Const(())),List(List(b913)),List(List(b914)),None)"))
    val x921 = new ControllerModel(921, InnerControl, Left(Sequenced), CChainModel(Seq()), 2, 1, Ctx("x921", "189", "Pipe {", "x921 = UnitPipe(Set(b914),Block(Const(())),None)"))
    val x922 = CtrModel(0, Ask(878, "ArgIn x878 (ctr stop)", Ctx("x922", "116", "Foreach(M by tileM){mm =>", "x922 = CounterNew(Const(0),x1759,Const(16),Const(1))")), 16, 1)
    val x923 = CChainModel(List[CtrModel[_,_,_,_]](x922), Ctx("x923", "116", "Foreach(M by tileM){mm =>", "List(x922 = CounterNew(Const(0),x1759,Const(16),Const(1)))"))
    val x1703 = new ControllerModel(1703, OuterControl, Left(Pipelined), x923, 0, 1, Ctx("x1703", "116", "Foreach(M by tileM){mm =>", "x1703 = UnrolledForeach(Set(b914),x923,Block(Const(())),List(List(b924)),List(List(b925)),None)"))
    val x932 = new ControllerModel(932, InnerControl, Left(Sequenced), CChainModel(Seq()), 2, 1, Ctx("x932", "189", "Pipe {", "x932 = UnitPipe(Set(b925, b914),Block(Const(())),None)"))
    val x1002_ctrlast = CtrModel(0, Ask(54, "length of dim #last", Ctx("x1002_ctrlast", "119", "tileA_sram load a(mm::mm+numel_m, kk::kk+numel_k)", "x1002 = UnitPipe(Set(b925, b914),Block(Const(())),None)")), 1, 1)
    val x1002 = new ControllerModel(1002, OuterControl, Left(DenseLoad), List(CChainModel(Seq()), CChainModel(Seq(x1002_ctrlast))), 0, 1, Ctx("x1002", "119", "tileA_sram load a(mm::mm+numel_m, kk::kk+numel_k)", "x1002 = UnitPipe(Set(b925, b914),Block(Const(())),None)"), bitsPerCycle = 32.toDouble)
    val x1003 = CtrModel(0, Ask(879, "ArgIn x879 (ctr stop)", Ctx("x1003", "120", "Foreach(N by tileN){nn =>", "x1003 = CounterNew(Const(0),x1763,Const(16),Const(1))")), 16, 1)
    val x1004 = CChainModel(List[CtrModel[_,_,_,_]](x1003), Ctx("x1004", "120", "Foreach(N by tileN){nn =>", "List(x1003 = CounterNew(Const(0),x1763,Const(16),Const(1)))"))
    val x1812 = new ControllerModel(1812, OuterControl, Left(Pipelined), x1004, 0, 1, Ctx("x1812", "120", "Foreach(N by tileN){nn =>", "x1812 = UnrolledForeach(Set(b925, b914),x1004,Block(Const(())),List(List(b1005)),List(List(b1006)),None)"))
    val x1016 = new ControllerModel(1016, InnerControl, Left(Sequenced), CChainModel(Seq()), 2, 1, Ctx("x1016", "189", "Pipe {", "x1016 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)"))
    val x1811 = new ControllerModel(1811, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1811", "82", "stage(ParallelPipe(scala.collection.immutable.Set[Bit](), stageBlock(bundledStms.foreach(visit))))", "x1811 = ParallelPipe(Set(),Block(Const(())))"))
    val x1087_ctrlast = CtrModel(0, Ask(73, "length of dim #last", Ctx("x1087_ctrlast", "124", "tileB_sram load b(kk::kk+numel_k, nn::nn+numel_n) // DRAM -> SRAM", "x1087 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)")), 1, 1)
    val x1087 = new ControllerModel(1087, OuterControl, Left(DenseLoad), List(CChainModel(Seq()), CChainModel(Seq(x1087_ctrlast))), 0, 1, Ctx("x1087", "124", "tileB_sram load b(kk::kk+numel_k, nn::nn+numel_n) // DRAM -> SRAM", "x1087 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)"), bitsPerCycle = 32.toDouble)
    val x1158_ctrlast = CtrModel(0, Ask(73, "length of dim #last", Ctx("x1158_ctrlast", "125", "tileC_sram load c(mm::mm+numel_m, nn::nn+numel_n) // DRAM -> SRAM", "x1158 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)")), 1, 1)
    val x1158 = new ControllerModel(1158, OuterControl, Left(DenseLoad), List(CChainModel(Seq()), CChainModel(Seq(x1158_ctrlast))), 0, 1, Ctx("x1158", "125", "tileC_sram load c(mm::mm+numel_m, nn::nn+numel_n) // DRAM -> SRAM", "x1158 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)"), bitsPerCycle = 32.toDouble)
    x1811.registerChild(x1087)
    x1811.registerChild(x1158)
    val x1159 = CtrModel(0, Ask(1770, "ctr stop", Ctx("x1159", "130", "Foreach(numel_m by 1 par 4) { m =>", "x1159 = CounterNew(Const(0),x1770,Const(1),Const(4))")), 1, 4)
    val x1160 = CChainModel(List[CtrModel[_,_,_,_]](x1159), Ctx("x1160", "130", "Foreach(numel_m by 1 par 4) { m =>", "List(x1159 = CounterNew(Const(0),x1770,Const(1),Const(4)))"))
    val x1638 = new ControllerModel(1638, OuterControl, Left(Sequenced), x1160, 0, 1, Ctx("x1638", "130", "Foreach(numel_m by 1 par 4) { m =>", "x1638 = UnrolledForeach(Set(b1006, b925, b914),x1160,Block(Const(())),List(List(b1161, b1162, b1163, b1164)),List(List(b1165, b1166, b1167, b1168)),None)"))
    val x1173 = CtrModel(0, Ask(1771, "ctr stop", Ctx("x1173", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1173 = CounterNew(Const(0),x1771,Const(1),Const(4))")), 1, 4)
    val x1174 = CtrModel(0, Ask(1772, "ctr stop", Ctx("x1174", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1174 = CounterNew(Const(0),x1772,Const(1),Const(4))")), 1, 4)
    val x1175 = CtrModel(0, Ask(1773, "ctr stop", Ctx("x1175", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1175 = CounterNew(Const(0),x1773,Const(1),Const(4))")), 1, 4)
    val x1176 = CtrModel(0, Ask(1774, "ctr stop", Ctx("x1176", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1176 = CounterNew(Const(0),x1774,Const(1),Const(4))")), 1, 4)
    val x1177 = CChainModel(List[CtrModel[_,_,_,_]](x1173), Ctx("x1177", "131", "Foreach(numel_n by 1 par 4) { n =>", "List(x1173 = CounterNew(Const(0),x1771,Const(1),Const(4)))"))
    val x1178 = CChainModel(List[CtrModel[_,_,_,_]](x1174), Ctx("x1178", "131", "Foreach(numel_n by 1 par 4) { n =>", "List(x1174 = CounterNew(Const(0),x1772,Const(1),Const(4)))"))
    val x1179 = CChainModel(List[CtrModel[_,_,_,_]](x1175), Ctx("x1179", "131", "Foreach(numel_n by 1 par 4) { n =>", "List(x1175 = CounterNew(Const(0),x1773,Const(1),Const(4)))"))
    val x1180 = CChainModel(List[CtrModel[_,_,_,_]](x1176), Ctx("x1180", "131", "Foreach(numel_n by 1 par 4) { n =>", "List(x1176 = CounterNew(Const(0),x1774,Const(1),Const(4)))"))
    val x1637 = new ControllerModel(1637, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1637", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1637 = ParallelPipe(Set(b1006, b925, b914),Block(Const(())))"))
    val x1294 = new ControllerModel(1294, OuterControl, Left(Sequenced), x1177, 0, 1, Ctx("x1294", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1294 = UnrolledForeach(Set(b1165, b1006, b925, b914),x1177,Block(Const(())),List(List(b1181, b1182, b1183, b1184)),List(List(b1185, b1186, b1187, b1188)),None)"))
    val x1193 = CtrModel(0, Ask(1775, "ctr stop", Ctx("x1193", "132", "Foreach(numel_k by 1) { k =>", "x1193 = CounterNew(Const(0),x1775,Const(1),Const(1))")), 1, 1)
    val x1194 = CtrModel(0, Ask(1776, "ctr stop", Ctx("x1194", "132", "Foreach(numel_k by 1) { k =>", "x1194 = CounterNew(Const(0),x1776,Const(1),Const(1))")), 1, 1)
    val x1195 = CtrModel(0, Ask(1777, "ctr stop", Ctx("x1195", "132", "Foreach(numel_k by 1) { k =>", "x1195 = CounterNew(Const(0),x1777,Const(1),Const(1))")), 1, 1)
    val x1196 = CtrModel(0, Ask(1778, "ctr stop", Ctx("x1196", "132", "Foreach(numel_k by 1) { k =>", "x1196 = CounterNew(Const(0),x1778,Const(1),Const(1))")), 1, 1)
    val x1197 = CChainModel(List[CtrModel[_,_,_,_]](x1193), Ctx("x1197", "132", "Foreach(numel_k by 1) { k =>", "List(x1193 = CounterNew(Const(0),x1775,Const(1),Const(1)))"))
    val x1198 = CChainModel(List[CtrModel[_,_,_,_]](x1194), Ctx("x1198", "132", "Foreach(numel_k by 1) { k =>", "List(x1194 = CounterNew(Const(0),x1776,Const(1),Const(1)))"))
    val x1199 = CChainModel(List[CtrModel[_,_,_,_]](x1195), Ctx("x1199", "132", "Foreach(numel_k by 1) { k =>", "List(x1195 = CounterNew(Const(0),x1777,Const(1),Const(1)))"))
    val x1200 = CChainModel(List[CtrModel[_,_,_,_]](x1196), Ctx("x1200", "132", "Foreach(numel_k by 1) { k =>", "List(x1196 = CounterNew(Const(0),x1778,Const(1),Const(1)))"))
    val x1293 = new ControllerModel(1293, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1293", "132", "Foreach(numel_k by 1) { k =>", "x1293 = ParallelPipe(Set(b1165, b1006, b925, b914),Block(Const(())))"))
    val x1223 = new ControllerModel(1223, InnerControl, Left(Pipelined), x1197, 11, 4, Ctx("x1223", "132", "Foreach(numel_k by 1) { k =>", "x1223 = UnrolledForeach(Set(b925, b1006, b1185, b914, b1165),x1197,Block(Const(())),List(List(b1201)),List(List(b1202)),None)"))
    val x1246 = new ControllerModel(1246, InnerControl, Left(Pipelined), x1198, 11, 4, Ctx("x1246", "132", "Foreach(numel_k by 1) { k =>", "x1246 = UnrolledForeach(Set(b925, b1006, b1186, b914, b1165),x1198,Block(Const(())),List(List(b1224)),List(List(b1225)),None)"))
    val x1269 = new ControllerModel(1269, InnerControl, Left(Pipelined), x1199, 11, 4, Ctx("x1269", "132", "Foreach(numel_k by 1) { k =>", "x1269 = UnrolledForeach(Set(b925, b1006, b1187, b914, b1165),x1199,Block(Const(())),List(List(b1247)),List(List(b1248)),None)"))
    val x1292 = new ControllerModel(1292, InnerControl, Left(Pipelined), x1200, 11, 4, Ctx("x1292", "132", "Foreach(numel_k by 1) { k =>", "x1292 = UnrolledForeach(Set(b925, b1006, b1188, b914, b1165),x1200,Block(Const(())),List(List(b1270)),List(List(b1271)),None)"))
    x1293.registerChild(x1223)
    x1293.registerChild(x1246)
    x1293.registerChild(x1269)
    x1293.registerChild(x1292)
    x1294.registerChild(x1293)
    val x1408 = new ControllerModel(1408, OuterControl, Left(Sequenced), x1178, 0, 1, Ctx("x1408", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1408 = UnrolledForeach(Set(b1166, b1006, b925, b914),x1178,Block(Const(())),List(List(b1295, b1296, b1297, b1298)),List(List(b1299, b1300, b1301, b1302)),None)"))
    val x1307 = CtrModel(0, Ask(1779, "ctr stop", Ctx("x1307", "132", "Foreach(numel_k by 1) { k =>", "x1307 = CounterNew(Const(0),x1779,Const(1),Const(1))")), 1, 1)
    val x1308 = CtrModel(0, Ask(1780, "ctr stop", Ctx("x1308", "132", "Foreach(numel_k by 1) { k =>", "x1308 = CounterNew(Const(0),x1780,Const(1),Const(1))")), 1, 1)
    val x1309 = CtrModel(0, Ask(1781, "ctr stop", Ctx("x1309", "132", "Foreach(numel_k by 1) { k =>", "x1309 = CounterNew(Const(0),x1781,Const(1),Const(1))")), 1, 1)
    val x1310 = CtrModel(0, Ask(1782, "ctr stop", Ctx("x1310", "132", "Foreach(numel_k by 1) { k =>", "x1310 = CounterNew(Const(0),x1782,Const(1),Const(1))")), 1, 1)
    val x1311 = CChainModel(List[CtrModel[_,_,_,_]](x1307), Ctx("x1311", "132", "Foreach(numel_k by 1) { k =>", "List(x1307 = CounterNew(Const(0),x1779,Const(1),Const(1)))"))
    val x1312 = CChainModel(List[CtrModel[_,_,_,_]](x1308), Ctx("x1312", "132", "Foreach(numel_k by 1) { k =>", "List(x1308 = CounterNew(Const(0),x1780,Const(1),Const(1)))"))
    val x1313 = CChainModel(List[CtrModel[_,_,_,_]](x1309), Ctx("x1313", "132", "Foreach(numel_k by 1) { k =>", "List(x1309 = CounterNew(Const(0),x1781,Const(1),Const(1)))"))
    val x1314 = CChainModel(List[CtrModel[_,_,_,_]](x1310), Ctx("x1314", "132", "Foreach(numel_k by 1) { k =>", "List(x1310 = CounterNew(Const(0),x1782,Const(1),Const(1)))"))
    val x1407 = new ControllerModel(1407, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1407", "132", "Foreach(numel_k by 1) { k =>", "x1407 = ParallelPipe(Set(b1166, b1006, b925, b914),Block(Const(())))"))
    val x1337 = new ControllerModel(1337, InnerControl, Left(Pipelined), x1311, 11, 4, Ctx("x1337", "132", "Foreach(numel_k by 1) { k =>", "x1337 = UnrolledForeach(Set(b925, b1006, b1166, b914, b1299),x1311,Block(Const(())),List(List(b1315)),List(List(b1316)),None)"))
    val x1360 = new ControllerModel(1360, InnerControl, Left(Pipelined), x1312, 11, 4, Ctx("x1360", "132", "Foreach(numel_k by 1) { k =>", "x1360 = UnrolledForeach(Set(b925, b1006, b1166, b1300, b914),x1312,Block(Const(())),List(List(b1338)),List(List(b1339)),None)"))
    val x1383 = new ControllerModel(1383, InnerControl, Left(Pipelined), x1313, 11, 4, Ctx("x1383", "132", "Foreach(numel_k by 1) { k =>", "x1383 = UnrolledForeach(Set(b925, b1006, b1301, b1166, b914),x1313,Block(Const(())),List(List(b1361)),List(List(b1362)),None)"))
    val x1406 = new ControllerModel(1406, InnerControl, Left(Pipelined), x1314, 11, 4, Ctx("x1406", "132", "Foreach(numel_k by 1) { k =>", "x1406 = UnrolledForeach(Set(b1302, b925, b1006, b1166, b914),x1314,Block(Const(())),List(List(b1384)),List(List(b1385)),None)"))
    x1407.registerChild(x1337)
    x1407.registerChild(x1360)
    x1407.registerChild(x1383)
    x1407.registerChild(x1406)
    x1408.registerChild(x1407)
    val x1522 = new ControllerModel(1522, OuterControl, Left(Sequenced), x1179, 0, 1, Ctx("x1522", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1522 = UnrolledForeach(Set(b1167, b1006, b925, b914),x1179,Block(Const(())),List(List(b1409, b1410, b1411, b1412)),List(List(b1413, b1414, b1415, b1416)),None)"))
    val x1421 = CtrModel(0, Ask(1783, "ctr stop", Ctx("x1421", "132", "Foreach(numel_k by 1) { k =>", "x1421 = CounterNew(Const(0),x1783,Const(1),Const(1))")), 1, 1)
    val x1422 = CtrModel(0, Ask(1784, "ctr stop", Ctx("x1422", "132", "Foreach(numel_k by 1) { k =>", "x1422 = CounterNew(Const(0),x1784,Const(1),Const(1))")), 1, 1)
    val x1423 = CtrModel(0, Ask(1785, "ctr stop", Ctx("x1423", "132", "Foreach(numel_k by 1) { k =>", "x1423 = CounterNew(Const(0),x1785,Const(1),Const(1))")), 1, 1)
    val x1424 = CtrModel(0, Ask(1786, "ctr stop", Ctx("x1424", "132", "Foreach(numel_k by 1) { k =>", "x1424 = CounterNew(Const(0),x1786,Const(1),Const(1))")), 1, 1)
    val x1425 = CChainModel(List[CtrModel[_,_,_,_]](x1421), Ctx("x1425", "132", "Foreach(numel_k by 1) { k =>", "List(x1421 = CounterNew(Const(0),x1783,Const(1),Const(1)))"))
    val x1426 = CChainModel(List[CtrModel[_,_,_,_]](x1422), Ctx("x1426", "132", "Foreach(numel_k by 1) { k =>", "List(x1422 = CounterNew(Const(0),x1784,Const(1),Const(1)))"))
    val x1427 = CChainModel(List[CtrModel[_,_,_,_]](x1423), Ctx("x1427", "132", "Foreach(numel_k by 1) { k =>", "List(x1423 = CounterNew(Const(0),x1785,Const(1),Const(1)))"))
    val x1428 = CChainModel(List[CtrModel[_,_,_,_]](x1424), Ctx("x1428", "132", "Foreach(numel_k by 1) { k =>", "List(x1424 = CounterNew(Const(0),x1786,Const(1),Const(1)))"))
    val x1521 = new ControllerModel(1521, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1521", "132", "Foreach(numel_k by 1) { k =>", "x1521 = ParallelPipe(Set(b1167, b1006, b925, b914),Block(Const(())))"))
    val x1451 = new ControllerModel(1451, InnerControl, Left(Pipelined), x1425, 11, 4, Ctx("x1451", "132", "Foreach(numel_k by 1) { k =>", "x1451 = UnrolledForeach(Set(b925, b1006, b1167, b1413, b914),x1425,Block(Const(())),List(List(b1429)),List(List(b1430)),None)"))
    val x1474 = new ControllerModel(1474, InnerControl, Left(Pipelined), x1426, 11, 4, Ctx("x1474", "132", "Foreach(numel_k by 1) { k =>", "x1474 = UnrolledForeach(Set(b925, b1006, b1414, b1167, b914),x1426,Block(Const(())),List(List(b1452)),List(List(b1453)),None)"))
    val x1497 = new ControllerModel(1497, InnerControl, Left(Pipelined), x1427, 11, 4, Ctx("x1497", "132", "Foreach(numel_k by 1) { k =>", "x1497 = UnrolledForeach(Set(b1415, b925, b1006, b1167, b914),x1427,Block(Const(())),List(List(b1475)),List(List(b1476)),None)"))
    val x1520 = new ControllerModel(1520, InnerControl, Left(Pipelined), x1428, 11, 4, Ctx("x1520", "132", "Foreach(numel_k by 1) { k =>", "x1520 = UnrolledForeach(Set(b925, b1006, b1167, b914, b1416),x1428,Block(Const(())),List(List(b1498)),List(List(b1499)),None)"))
    x1521.registerChild(x1451)
    x1521.registerChild(x1474)
    x1521.registerChild(x1497)
    x1521.registerChild(x1520)
    x1522.registerChild(x1521)
    val x1636 = new ControllerModel(1636, OuterControl, Left(Sequenced), x1180, 0, 1, Ctx("x1636", "131", "Foreach(numel_n by 1 par 4) { n =>", "x1636 = UnrolledForeach(Set(b1168, b1006, b925, b914),x1180,Block(Const(())),List(List(b1523, b1524, b1525, b1526)),List(List(b1527, b1528, b1529, b1530)),None)"))
    val x1535 = CtrModel(0, Ask(1787, "ctr stop", Ctx("x1535", "132", "Foreach(numel_k by 1) { k =>", "x1535 = CounterNew(Const(0),x1787,Const(1),Const(1))")), 1, 1)
    val x1536 = CtrModel(0, Ask(1788, "ctr stop", Ctx("x1536", "132", "Foreach(numel_k by 1) { k =>", "x1536 = CounterNew(Const(0),x1788,Const(1),Const(1))")), 1, 1)
    val x1537 = CtrModel(0, Ask(1789, "ctr stop", Ctx("x1537", "132", "Foreach(numel_k by 1) { k =>", "x1537 = CounterNew(Const(0),x1789,Const(1),Const(1))")), 1, 1)
    val x1538 = CtrModel(0, Ask(1790, "ctr stop", Ctx("x1538", "132", "Foreach(numel_k by 1) { k =>", "x1538 = CounterNew(Const(0),x1790,Const(1),Const(1))")), 1, 1)
    val x1539 = CChainModel(List[CtrModel[_,_,_,_]](x1535), Ctx("x1539", "132", "Foreach(numel_k by 1) { k =>", "List(x1535 = CounterNew(Const(0),x1787,Const(1),Const(1)))"))
    val x1540 = CChainModel(List[CtrModel[_,_,_,_]](x1536), Ctx("x1540", "132", "Foreach(numel_k by 1) { k =>", "List(x1536 = CounterNew(Const(0),x1788,Const(1),Const(1)))"))
    val x1541 = CChainModel(List[CtrModel[_,_,_,_]](x1537), Ctx("x1541", "132", "Foreach(numel_k by 1) { k =>", "List(x1537 = CounterNew(Const(0),x1789,Const(1),Const(1)))"))
    val x1542 = CChainModel(List[CtrModel[_,_,_,_]](x1538), Ctx("x1542", "132", "Foreach(numel_k by 1) { k =>", "List(x1538 = CounterNew(Const(0),x1790,Const(1),Const(1)))"))
    val x1635 = new ControllerModel(1635, OuterControl, Left(ForkJoin), CChainModel(Seq()), 0, 0, Ctx("x1635", "132", "Foreach(numel_k by 1) { k =>", "x1635 = ParallelPipe(Set(b1168, b1006, b925, b914),Block(Const(())))"))
    val x1565 = new ControllerModel(1565, InnerControl, Left(Pipelined), x1539, 11, 4, Ctx("x1565", "132", "Foreach(numel_k by 1) { k =>", "x1565 = UnrolledForeach(Set(b1168, b925, b1006, b914, b1527),x1539,Block(Const(())),List(List(b1543)),List(List(b1544)),None)"))
    val x1588 = new ControllerModel(1588, InnerControl, Left(Pipelined), x1540, 11, 4, Ctx("x1588", "132", "Foreach(numel_k by 1) { k =>", "x1588 = UnrolledForeach(Set(b1168, b925, b1006, b1528, b914),x1540,Block(Const(())),List(List(b1566)),List(List(b1567)),None)"))
    val x1611 = new ControllerModel(1611, InnerControl, Left(Pipelined), x1541, 11, 4, Ctx("x1611", "132", "Foreach(numel_k by 1) { k =>", "x1611 = UnrolledForeach(Set(b1168, b1529, b925, b1006, b914),x1541,Block(Const(())),List(List(b1589)),List(List(b1590)),None)"))
    val x1634 = new ControllerModel(1634, InnerControl, Left(Pipelined), x1542, 11, 4, Ctx("x1634", "132", "Foreach(numel_k by 1) { k =>", "x1634 = UnrolledForeach(Set(b1168, b925, b1006, b1530, b914),x1542,Block(Const(())),List(List(b1612)),List(List(b1613)),None)"))
    x1635.registerChild(x1565)
    x1635.registerChild(x1588)
    x1635.registerChild(x1611)
    x1635.registerChild(x1634)
    x1636.registerChild(x1635)
    x1637.registerChild(x1294)
    x1637.registerChild(x1408)
    x1637.registerChild(x1522)
    x1637.registerChild(x1636)
    x1638.registerChild(x1637)
    val x1701_ctrlast = CtrModel(0, Ask(73, "length of dim #last", Ctx("x1701_ctrlast", "137", "c(mm::mm+numel_m, nn::nn+numel_n) store tileC_sram // SRAM -> DRAM", "x1701 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)")), 1, 1)
    val x1701 = new ControllerModel(1701, OuterControl, Left(GatedDenseStore), List(CChainModel(Seq()), CChainModel(Seq(x1701_ctrlast))), 0, 1, Ctx("x1701", "137", "c(mm::mm+numel_m, nn::nn+numel_n) store tileC_sram // SRAM -> DRAM", "x1701 = UnitPipe(Set(b1006, b925, b914),Block(Const(())),None)"), bitsPerCycle = 32.toDouble)
    x1812.registerChild(x1016)
    x1812.registerChild(x1811)
    x1812.registerChild(x1638)
    x1812.registerChild(x1701)
    x1703.registerChild(x932)
    x1703.registerChild(x1002)
    x1703.registerChild(x1812)
    x1704.registerChild(x921)
    x1704.registerChild(x1703)
    x810.registerChild(x1704)
    return x810
  }
  
  override def main(args: Array[String]): Unit = {
    begin("/Users/mohamedismail/Desktop/EE109/ee109/lab2/./gen/CS217/Lab2Part6GEMM///results_final")
    if (args.size >= 1 && (args.contains("noninteractive") || args.contains("ni"))) {
        interactive = false
        val idx = {0 max args.indexOf("noninteractive")} + {0 max args.indexOf("ni")}
        cliParams = args.drop(idx+1).takeWhile{_ != "tune"}.map(_.toInt)
        emit(s"Noninteractive Args: ${cliParams.mkString(" ")}") 
    }
    else {
      println(s"Suggested args: List()")
    }
    val allTuneParams: Seq[Map[String, Any]] = if (args.size >= 1 && (args.contains("tune"))) {
        retune = true
        val indices: Seq[Int] = args.zipWithIndex.filter(_._1 == "tune").map(_._2)
        indices.map{idx => args.drop(idx+1).takeWhile{x => x != "noninteractive" && x != "ni" && x != "tune"}.grouped(2).map{x => (x(0) -> {try {x(1).toInt} catch {case _: Throwable => x(1)}} )}.toMap}
    } else {Seq(Map[String, Any]())}
    isFinal = true
    val root = build_model()
    root.initializeAskMap(AskMap.map)
    root.loadPreviousAskMap(PreviousAskMap.map) // Load previous run's askmap
    emit(s"[final] Structure for app Lab2Part6GEMM")
    allTuneParams.foreach{tuneTo => 
        tuneParams = tuneTo
        root.printStructure()
        root.execute()
        emit(s"[final] Runtime results for app Lab2Part6GEMM")
        root.printResults()
        root.storeAskMap("/Users/mohamedismail/Desktop/EE109/ee109/lab2/./gen/CS217/Lab2Part6GEMM///model/PreviousAskMap.scala") // Store this run's askmap
        emit(s"[final] Total Cycles for App Lab2Part6GEMM: ${root.totalCycles()}")
    }
    end()
  }
}
