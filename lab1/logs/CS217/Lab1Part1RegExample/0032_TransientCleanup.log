  Advancing blk
     From: Host
     To: Host
    x0 = InputArguments() [Host]
    Updating x0 since there are no subst rules for it
    x1 = ArrayApply(x0,Const(0)) [Host]
    Updating x1 since there are no subst rules for it
    x2 = TextToFix(x1,TRUE,_32,_0) [Host]
    Updating x2 since there are no subst rules for it
    x3 = ArrayApply(x0,Const(1)) [Host]
    Updating x3 since there are no subst rules for it
    x4 = TextToFix(x3,TRUE,_32,_0) [Host]
    Updating x4 since there are no subst rules for it
    x5 = ArrayApply(x0,Const(2)) [Host]
    Updating x5 since there are no subst rules for it
    x6 = TextToFix(x5,TRUE,_32,_0) [Host]
    Updating x6 since there are no subst rules for it
    x7 = ArgInNew(Const(0)) [Host]
    Updating x7 since there are no subst rules for it
    x8 = ArgInNew(Const(0)) [Host]
    Updating x8 since there are no subst rules for it
    x9 = ArgInNew(Const(0)) [Host]
    Updating x9 since there are no subst rules for it
    x10 = SetReg(x7,x2) [Host]
    Updating x10 since there are no subst rules for it
    x11 = SetReg(x8,x4) [Host]
    Updating x11 since there are no subst rules for it
    x12 = SetReg(x9,x6) [Host]
    Updating x12 since there are no subst rules for it
    x13 = ArgOutNew(Const(0)) [Host]
    Updating x13 since there are no subst rules for it
    x20 = AccelScope(Block(Const(()))) [x20 (block: -1)]
    Updating x20 since there are no subst rules for it
    Advancing blk
       From: x20 (block: -1)
       To: x20 (block: 0)
    node: (x20,x20 (block: -1)), block: (x20,x20 (block: 0))
      
      Transforming node that is primitive, is inHw, and is transient
      x14 = RegRead(x7) [stateless]
       - users: Set(User(x17,x20 (block: 0)))
       - ctrl:  x20 (block: 0)
      x14 = RegRead(x7) [x20 (block: 0)]
      Updating x14 since there are no subst rules for it
      
      Transforming node that is primitive, is inHw, and is transient
      x15 = RegRead(x8) [stateless]
       - users: Set(User(x17,x20 (block: 0)))
       - ctrl:  x20 (block: 0)
      x15 = RegRead(x8) [x20 (block: 0)]
      Updating x15 since there are no subst rules for it
      
      Transforming node that is primitive, is inHw, and is transient
      x16 = RegRead(x9) [stateless]
       - users: Set(User(x18,x20 (block: 0)))
       - ctrl:  x20 (block: 0)
      x16 = RegRead(x9) [x20 (block: 0)]
      Updating x16 since there are no subst rules for it
      x17 = FixAdd(x14,x15) [x20 (block: 0)]
      Updating x17 since there are no subst rules for it
      x18 = FixAdd(x17,x16) [x20 (block: 0)]
      Updating x18 since there are no subst rules for it
      
      x19 = RegWrite(x13,x18,Set()) [reg write]
      x19 = RegWrite(x13,x18,Set()) [x20 (block: 0)]
      Updating x19 since there are no subst rules for it
    x21 = GetReg(x13) [Host]
    Updating x21 since there are no subst rules for it
    x22 = FixToText(x21,None) [Host]
    Updating x22 since there are no subst rules for it
    x23 = TextConcat(List(Const("Result = "), x22)) [Host]
    Updating x23 since there are no subst rules for it
    x24 = TextConcat(List(x23, Const("\n"))) [Host]
    Updating x24 since there are no subst rules for it
    x25 = PrintIf(Set(),x24) [Host]
    Updating x25 since there are no subst rules for it
    x26 = FixAdd(x4,x2) [Host]
    Updating x26 since there are no subst rules for it
    x27 = FixAdd(x26,x6) [Host]
    Updating x27 since there are no subst rules for it
    x28 = FixToText(x27,None) [Host]
    Updating x28 since there are no subst rules for it
    x29 = TextConcat(List(Const("Gold = "), x28)) [Host]
    Updating x29 since there are no subst rules for it
    x30 = TextConcat(List(x29, Const("\n"))) [Host]
    Updating x30 since there are no subst rules for it
    x31 = PrintIf(Set(),x30) [Host]
    Updating x31 since there are no subst rules for it
    x32 = FixEql(x27,x21) [Host]
    Updating x32 since there are no subst rules for it
    x33 = BitToText(x32) [Host]
    Updating x33 since there are no subst rules for it
    x34 = TextConcat(List(Const("PASS = "), x33)) [Host]
    Updating x34 since there are no subst rules for it
    x35 = TextConcat(List(x34, Const("\n"))) [Host]
    Updating x35 since there are no subst rules for it
    x36 = PrintIf(Set(),x35) [Host]
    Updating x36 since there are no subst rules for it
    x38 = AssertIf(Set(),x32,Some(Const("Lab1.scala:62:15: Assertion failure"))) [Host]
    Updating x38 since there are no subst rules for it
