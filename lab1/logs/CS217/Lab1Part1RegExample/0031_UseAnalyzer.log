  x0 = InputArguments() [ctrl: Host, inner: false]
  x1 = ArrayApply(x0,Const(0)) [ctrl: Host, inner: false]
  x2 = TextToFix(x1,TRUE,_32,_0) [ctrl: Host, inner: false]
  x3 = ArrayApply(x0,Const(1)) [ctrl: Host, inner: false]
  x4 = TextToFix(x3,TRUE,_32,_0) [ctrl: Host, inner: false]
  x5 = ArrayApply(x0,Const(2)) [ctrl: Host, inner: false]
  x6 = TextToFix(x5,TRUE,_32,_0) [ctrl: Host, inner: false]
  x7 = ArgInNew(Const(0)) [ctrl: Host, inner: false]
  x8 = ArgInNew(Const(0)) [ctrl: Host, inner: false]
  x9 = ArgInNew(Const(0)) [ctrl: Host, inner: false]
  x10 = SetReg(x7,x2) [ctrl: Host, inner: false]
  x11 = SetReg(x8,x4) [ctrl: Host, inner: false]
  x12 = SetReg(x9,x6) [ctrl: Host, inner: false]
  x13 = ArgOutNew(Const(0)) [ctrl: Host, inner: false]
  x20 = AccelScope(Block(Const(()))) [ctrl: x20 (stage: -1), inner: true]
    Pending: 
    Inputs:  
    Uses:    
    Transient: false
    Outer: true
    x14 = RegRead(x7) [ctrl: x20 (stage: -1), inner: true]
      Pending: 
      Inputs:  x7
      Uses:    
      Transient: true
      Outer: false
      Adding pending: x14 [ctrl: x20 (stage: -1), block: x20 (block: 0)]
    x15 = RegRead(x8) [ctrl: x20 (stage: -1), inner: true]
      Pending: x14 -> Set(x14)
      Inputs:  x8
      Uses:    
      Transient: true
      Outer: false
      Adding pending: x15 [ctrl: x20 (stage: -1), block: x20 (block: 0)]
    x16 = RegRead(x9) [ctrl: x20 (stage: -1), inner: true]
      Pending: x14 -> Set(x14), x15 -> Set(x15)
      Inputs:  x9
      Uses:    
      Transient: true
      Outer: false
      Adding pending: x16 [ctrl: x20 (stage: -1), block: x20 (block: 0)]
    x17 = FixAdd(x14,x15) [ctrl: x20 (stage: -1), inner: true]
      Pending: x14 -> Set(x14), x16 -> Set(x16), x15 -> Set(x15)
      Inputs:  x14, x15
      Uses:    x14, x15
      Transient: false
      Outer: false
      Uses [Block: x20 (block: 0)]:
        consumer x17
        used Set(x14, x15)
        
      - x14 = RegRead(x7)
      - x15 = RegRead(x8)
      Adding direct (x17 x20 (block: 0)) to uses for x14
      Adding direct (x17 x20 (block: 0)) to uses for x15
    x18 = FixAdd(x17,x16) [ctrl: x20 (stage: -1), inner: true]
      Pending: x14 -> Set(x14), x16 -> Set(x16), x15 -> Set(x15)
      Inputs:  x17, x16
      Uses:    x16
      Transient: false
      Outer: false
      Uses [Block: x20 (block: 0)]:
        consumer x18
        used Set(x16)
        
      - x16 = RegRead(x9)
      Adding direct (x18 x20 (block: 0)) to uses for x16
    x19 = RegWrite(x13,x18,Set()) [ctrl: x20 (stage: -1), inner: true]
      Pending: x14 -> Set(x14), x16 -> Set(x16), x15 -> Set(x15)
      Inputs:  x13, x18
      Uses:    
      Transient: false
      Outer: false
  x21 = GetReg(x13) [ctrl: Host, inner: false]
  x22 = FixToText(x21,None) [ctrl: Host, inner: false]
  x23 = TextConcat(List(Const("Result = "), x22)) [ctrl: Host, inner: false]
  x24 = TextConcat(List(x23, Const("\n"))) [ctrl: Host, inner: false]
  x25 = PrintIf(Set(),x24) [ctrl: Host, inner: false]
  x26 = FixAdd(x4,x2) [ctrl: Host, inner: false]
  x27 = FixAdd(x26,x6) [ctrl: Host, inner: false]
  x28 = FixToText(x27,None) [ctrl: Host, inner: false]
  x29 = TextConcat(List(Const("Gold = "), x28)) [ctrl: Host, inner: false]
  x30 = TextConcat(List(x29, Const("\n"))) [ctrl: Host, inner: false]
  x31 = PrintIf(Set(),x30) [ctrl: Host, inner: false]
  x32 = FixEql(x27,x21) [ctrl: Host, inner: false]
  x33 = BitToText(x32) [ctrl: Host, inner: false]
  x34 = TextConcat(List(Const("PASS = "), x33)) [ctrl: Host, inner: false]
  x35 = TextConcat(List(x34, Const("\n"))) [ctrl: Host, inner: false]
  x36 = PrintIf(Set(),x35) [ctrl: Host, inner: false]
  x38 = AssertIf(Set(),x32,Some(Const("Lab1.scala:62:15: Assertion failure"))) [ctrl: Host, inner: false]
