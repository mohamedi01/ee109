---------------------------
Estimated Total Memories: 
---------------------------
---------------------------



---------------------------------------------------------------------
Name: argRegIn0 (x90)
Type: Reg[Fix[TRUE,_32,_0]]
Src:  Lab1.scala:21:30
Src:          val argRegIn0 = ArgIn[T]
---------------------------------------------------------------------
Symbol:     x90 = ArgInNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x93 = SetReg(x90,x85) {}
             setArg(argRegIn0, N) (Lab1.scala:26:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x97 = RegRead(x90) {}
             val argRegIn0Value = argRegIn0.value (Lab1.scala:39:44)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: argRegIn1 (x91)
Type: Reg[Fix[TRUE,_32,_0]]
Src:  Lab1.scala:22:30
Src:          val argRegIn1 = ArgIn[T]
---------------------------------------------------------------------
Symbol:     x91 = ArgInNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x94 = SetReg(x91,x87) {}
             setArg(argRegIn1, M) (Lab1.scala:27:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x98 = RegRead(x91) {}
             val argRegIn1Value = argRegIn1.value (Lab1.scala:40:44)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: argRegIn2 (x92)
Type: Reg[Fix[TRUE,_32,_0]]
Src:  Lab1.scala:23:30
Src:          val argRegIn2 = ArgIn[T]
---------------------------------------------------------------------
Symbol:     x92 = ArgInNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x95 = SetReg(x92,x89) {}
             setArg(argRegIn2, K) (Lab1.scala:28:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x99 = RegRead(x92) {}
             val argRegIn2Value = argRegIn2.value (Lab1.scala:41:44)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: argRegOut (x96)
Type: Reg[Fix[TRUE,_32,_0]]
Src:  Lab1.scala:32:31
Src:          val argRegOut = ArgOut[T]
---------------------------------------------------------------------
Symbol:     x96 = ArgOutNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x102 = RegWrite(x96,x101,Set()) {}
             argRegOut := argRegIn0Value + argRegIn1Value + argRegIn2Value (Lab1.scala:44:23)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x103 = GetReg(x96) {}
             val argRegOutResult = getArg(argRegOut) (Lab1.scala:48:37)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




