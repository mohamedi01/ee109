---------------------------
Estimated Total Memories: 
---------------------------
  RAM36: 4.0
---------------------------



---------------------------------------------------------------------
Name: x697
Type: StreamIn[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x697 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x741 = StreamInBankedRead(x697,ArrayBuffer(Set(b734))) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x744: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x741: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: outFr_0 (x617)
Type: SRAM1[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:45:33
Src:        val outFr    = SRAM[Float](N_MELS)
---------------------------------------------------------------------
Symbol:     x617 = SRAMNew(List(Const(80)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x805 = SRAMBankedWrite(x617,Vector(x804),Vector(List(Const(0))),Vector(b792),Vector(Set(x794, b793))) {}
             outFr(i)   = (clamp+4f)/4f (MelLogScaleKernel.scala:69:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x854 = SRAMBankedRead(x617,Vector(List(Const(0))),Vector(x853),Vector(Set(x852, b847)),Vec[Flt[_24,_8]]) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x806: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x805: SRAMBankedWrite
  x865: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x864: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x858: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x854: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x639
Type: FIFO[IssuedCmd]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x639 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x658 = FIFOBankedEnq(x639,ArrayBuffer(x657),ArrayBuffer(Set(Const(true)))) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x664 = FIFOBankedDeq(x639,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x689: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x659: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x658: FIFOBankedEnq
  x688: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x672: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x664: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x662
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x662 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x669 = RegWrite(x662,x668,Set()) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x680 = RegRead(x662) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x688: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x672: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x669: RegWrite
  x687: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x680: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x720
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x720 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x728 = RegWrite(x720,x727,Set()) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x879 = RegRead(x720) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x745: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x729: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x728: RegWrite
  x744: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x879: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x638
Type: StreamOut[BurstCmd]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x638 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x656 = StreamOutBankedWrite(x638,ArrayBuffer(x654),ArrayBuffer(Set(x655))) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x659: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x656: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: melRow_0 (x615)
Type: SRAM1[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:43:33
Src:        val melRow   = SRAM[Float](N_BINS)
---------------------------------------------------------------------
Symbol:     x615 = SRAMNew(List(Const(201)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x743 = SRAMBankedWrite(x615,Vector(x742),Vector(List(Const(0))),Vector(x740),Vector(Set(x739, b734))) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x756 = SRAMBankedRead(x615,Vector(List(Const(0))),Vector(b751),Vector(Set(x753, b752, b693)),Vec[Flt[_24,_8]]) {}
             powerCol(i)*melRow(i) (MelLogScaleKernel.scala:56:33)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x772: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x746: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x745: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x744: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x743: SRAMBankedWrite
  x767: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x756: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: powerCol_0 (x614)
Type: SRAM1[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:42:33
Src:        val powerCol = SRAM[Float](N_BINS)
---------------------------------------------------------------------
Symbol:     x614 = SRAMNew(List(Const(201)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x686 = SRAMBankedWrite(x614,Vector(x685),Vector(List(Const(0))),Vector(x683),Vector(Set(x682, b677))) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x754 = SRAMBankedRead(x614,Vector(List(Const(0))),Vector(b751),Vector(Set(x753, b752, b693)),Vec[Flt[_24,_8]]) {}
             powerCol(i)*melRow(i) (MelLogScaleKernel.scala:56:23)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x689: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x688: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x687: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x686: SRAMBankedWrite
  x772: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x767: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x754: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x821
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x821 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x841 = RegWrite(x821,x831,Set()) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x883 = RegRead(x821) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x841: RegWrite
  x858: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x883: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x640
Type: StreamIn[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x640 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x684 = StreamInBankedRead(x640,ArrayBuffer(Set(b677))) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x687: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x684: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x808
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)
---------------------------------------------------------------------
Symbol:     x808 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x814 = RegWrite(x808,x812,Set()) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)(Pass 12) (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x827 = RegRead(x808) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)(Pass 12) (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x815: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x814: RegWrite
  x865: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x864: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
          x827: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x696
Type: FIFO[IssuedCmd]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x696 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x715 = FIFOBankedEnq(x696,ArrayBuffer(x714),ArrayBuffer(Set(Const(true)))) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x721 = FIFOBankedDeq(x696,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x746: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x716: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x715: FIFOBankedEnq
  x745: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x729: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x721: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x819
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x819 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x839 = RegWrite(x819,x826,Set()) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x848 = RegRead(x819) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x839: RegWrite
  x858: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x848: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x695
Type: StreamOut[BurstCmd]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x695 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x713 = StreamOutBankedWrite(x695,ArrayBuffer(x711),ArrayBuffer(Set(x712))) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x716: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x713: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: maxVal_0 (x773)
Type: Reg[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:62:41
Src:            val maxVal = Reduce(Reg[Float](0f))(0 until N_MELS){ i =>
---------------------------------------------------------------------
Symbol:     x773 = RegNew(Const(0.0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x788 = RegWrite(x773,x786,Set(x778)) {}
             }{ (a,b)=>mux(a>b,a,b) } (MelLogScaleKernel.scala:64:12)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x782 = RegRead(x773) {}
             }{ (a,b)=>mux(a>b,a,b) } (MelLogScaleKernel.scala:64:12)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x800 = RegRead(x773) {}
             val clamp  = max(log10, maxVal-8f) (MelLogScaleKernel.scala:68:37)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x789: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x782: RegRead
    x788: RegWrite
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x806: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x800: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x663
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x663 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x671 = RegWrite(x663,x670,Set()) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x877 = RegRead(x663) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x688: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x672: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x671: RegWrite
  x687: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x877: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x622
Type: Reg[Bit]
Src:  MelLogScaleKernel.scala:48:15
Src:          if (t < nFramesHost) {                    // runtime guard(Pass 12)
---------------------------------------------------------------------
Symbol:     x622 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x626 = RegWrite(x622,x624,Set()) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x769 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 6, castgroup: (6), broadcast: (0)>

             x881 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 2, castgroup: (2), broadcast: (0)>

             x880 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x794 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 5, castgroup: (5), broadcast: (0)>

             x875 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 10, castgroup: (10), broadcast: (0)>

             x878 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 3, castgroup: (3), broadcast: (0)>

             x882 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 8, castgroup: (8), broadcast: (0)>

             x753 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x778 = RegRead(x622) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:15)
               Directly Banked: false
               Port: <offset: 4, castgroup: (4), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x870: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x628: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x626: RegWrite
  x869: Switch (-1) [Level: OuterControl, Loop: Single, Schedule: Fork]
    x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x772: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x767: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x753: RegRead
          x880: RegRead
        x771: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
          x769: RegRead
      x789: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x881: RegRead
        x778: RegRead
      x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
        x806: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x794: RegRead
          x882: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x818
Type: StreamIn[Bit]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x818 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x861 = StreamInBankedRead(x818,ArrayBuffer(Set())) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x863: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x861: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: acc_0 (x747)
Type: Reg[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:55:40
Src:              val acc = Reduce(Reg[Float](0f))(0 until N_BINS){ i =>
---------------------------------------------------------------------
Symbol:     x747 = RegNew(Const(0.0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:



Control Tree: 
x767: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x899: RegAccumFMA
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: acc_1 (x748)
Type: Reg[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:55:40
Src:              val acc = Reduce(Reg[Float](0f))(0 until N_BINS){ i =>
---------------------------------------------------------------------
Symbol:     x748 = RegNew(Const(0.0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x766 = RegWrite(x748,x899,Set(x753)) {}
             }{ _+_ } (MelLogScaleKernel.scala:57:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x768 = RegRead(x748) {}
             melFr(m) = acc.value (MelLogScaleKernel.scala:58:28)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x772: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x767: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x766: RegWrite
  x771: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x768: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x623
Type: Reg[Bit]
Src:  MelLogScaleKernel.scala:48:9
Src:          if (t < nFramesHost) {                    // runtime guard(Pass 12)
---------------------------------------------------------------------
Symbol:     x623 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x627 = RegWrite(x623,x625,Set()) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x876 = RegRead(x623) {}
             if (t < nFramesHost) {                    // runtime guard(Pass 12)(Pass 12) (MelLogScaleKernel.scala:48:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x870: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x628: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x627: RegWrite
  x869: Switch (-1) [Level: OuterControl, Loop: Single, Schedule: Fork]
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x634
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:49:24
Src:            val base = t * N_BINS(Pass 12)
---------------------------------------------------------------------
Symbol:     x634 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x636 = RegWrite(x634,x635,Set()) {}
             val base = t * N_BINS(Pass 12)(Pass 12) (MelLogScaleKernel.scala:49:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x641 = RegRead(x634) {}
             val base = t * N_BINS(Pass 12)(Pass 12) (MelLogScaleKernel.scala:49:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x637: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x636: RegWrite
  x689: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x659: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x641: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x807
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:73:20
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)
---------------------------------------------------------------------
Symbol:     x807 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x813 = RegWrite(x807,x891,Set()) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)(Pass 12) (MelLogScaleKernel.scala:73:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x822 = RegRead(x807) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr(Pass 12)(Pass 12) (MelLogScaleKernel.scala:73:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x815: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x813: RegWrite
  x865: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x864: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
          x822: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x816
Type: StreamOut[BurstCmd]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x816 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x838 = StreamOutBankedWrite(x816,ArrayBuffer(x836),ArrayBuffer(Set(x837))) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x838: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x719
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x719 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x726 = RegWrite(x719,x725,Set()) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x737 = RegRead(x719) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x745: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x729: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x726: RegWrite
  x744: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x737: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x820
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x820 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x840 = RegWrite(x820,x828,Set()) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x850 = RegRead(x820) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x859: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x842: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x840: RegWrite
  x858: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x850: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x817
Type: StreamOut[Tup2[Flt[_24,_8],Bit]]
Src:  MelLogScaleKernel.scala:73:45
Src:            outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr
---------------------------------------------------------------------
Symbol:     x817 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x857 = StreamOutBankedWrite(x817,ArrayBuffer(x856),ArrayBuffer(Set(b847))) {}
             outDRAM(t*N_MELS :: (t+1)*N_MELS) store outFr (MelLogScaleKernel.scala:73:45)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x858: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x857: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x661
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:50:20
Src:            powerCol load inDRAM(base :: base + N_BINS)
---------------------------------------------------------------------
Symbol:     x661 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x667 = RegWrite(x661,x666,Set()) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x678 = RegRead(x661) {}
             powerCol load inDRAM(base :: base + N_BINS) (MelLogScaleKernel.scala:50:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x688: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x672: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x667: RegWrite
  x687: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x678: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x718
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelLogScaleKernel.scala:54:20
Src:              melRow load melDRAM(m, 0 :: N_BINS)
---------------------------------------------------------------------
Symbol:     x718 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x724 = RegWrite(x718,x723,Set()) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x735 = RegRead(x718) {}
             melRow load melDRAM(m, 0 :: N_BINS) (MelLogScaleKernel.scala:54:20)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x745: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x729: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x724: RegWrite
  x744: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x735: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: melFr_0 (x616)
Type: SRAM1[Flt[_24,_8]]
Src:  MelLogScaleKernel.scala:44:33
Src:        val melFr    = SRAM[Float](N_MELS)
---------------------------------------------------------------------
Symbol:     x616 = SRAMNew(List(Const(80)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x770 = SRAMBankedWrite(x616,Vector(x768),Vector(List(Const(0))),Vector(b692),Vector(Set(x769))) {}
             melFr(m) = acc.value (MelLogScaleKernel.scala:58:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x795 = SRAMBankedRead(x616,Vector(List(Const(0))),Vector(b792),Vector(Set(x794, b793)),Vec[Flt[_24,_8]]) {}
             val log10  = ln(max(melFr(i), EPS))*INV_LN10 (MelLogScaleKernel.scala:67:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x779 = SRAMBankedRead(x616,Vector(List(Const(0))),Vector(b776),Vector(Set(x778, b777)),Vec[Flt[_24,_8]]) {}
             max(melFr(i), EPS) (MelLogScaleKernel.scala:63:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x898: SwitchCase (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x772: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x771: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x770: SRAMBankedWrite
  x789: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x779: SRAMBankedRead
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x806: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x795: SRAMBankedRead
---------------------------------------------------------------------




