---------------------------
Estimated Total Memories: 
---------------------------
  RAM36: 24.0
---------------------------



---------------------------------------------------------------------
Name: x385
Type: StreamIn[Flt[_24,_8]]
Src:  LogCompress.scala:50:18
Src:        Ktable     load constDram
---------------------------------------------------------------------
Symbol:     x385 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x396 = StreamInBankedRead(x385,ArrayBuffer(Set(b395))) {}
             Ktable     load constDram (LogCompress.scala:50:18)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x399: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x396: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x345
Type: FIFO[IssuedCmd]
Src:  LogCompress.scala:49:11
Src:        buf load inDram
---------------------------------------------------------------------
Symbol:     x345 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x357 = FIFOBankedEnq(x345,ArrayBuffer(x356),ArrayBuffer(Set(Const(true)))) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x362 = FIFOBankedDeq(x345,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x383: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x358: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x357: FIFOBankedEnq
  x382: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x362: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x448
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompress.scala:81:15
Src:        outDram store outSram(0 :: Accel_n - 1)
---------------------------------------------------------------------
Symbol:     x448 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x459 = RegWrite(x448,x450,Set()) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x468 = RegRead(x448) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x476: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x461: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x459: RegWrite
  x475: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x468: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x337
Type: Reg[Flt[_24,_8]]
Src:  FriendlyTransformer.scala:19:28
Src:      val arg: Reg[A] = stage(ArgInNew[A](bA.zero))
---------------------------------------------------------------------
Symbol:     x337 = ArgInNew(Const(0.0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x338 = SetReg(x337,x323) {}
             setArg(arg,x.unbox) (FriendlyTransformer.scala:21:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x439 = RegRead(x337) {}
             arg.value (FriendlyTransformer.scala:22:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x346
Type: StreamIn[Flt[_24,_8]]
Src:  LogCompress.scala:49:11
Src:        buf load inDram
---------------------------------------------------------------------
Symbol:     x346 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x378 = StreamInBankedRead(x346,ArrayBuffer(Set(b373))) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x381: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x378: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x445
Type: StreamOut[BurstCmd]
Src:  LogCompress.scala:81:15
Src:        outDram store outSram(0 :: Accel_n - 1)
---------------------------------------------------------------------
Symbol:     x445 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x458 = StreamOutBankedWrite(x445,ArrayBuffer(x456),ArrayBuffer(Set(x512))) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x461: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x458: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: buf_0 (x341)
Type: SRAM1[Flt[_24,_8]]
Src:  LogCompress.scala:43:35
Src:        val buf        = SRAM[Float](MAX_N_ELEMENTS)
---------------------------------------------------------------------
Symbol:     x341 = SRAMNew(List(Const(400000)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 11.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x380 = SRAMBankedWrite(x341,Vector(x379),Vector(List(Const(0))),Vector(x498),Vector(Set(x497, x496))) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x442 = SRAMBankedWrite(x341,Vector(x441),Vector(List(Const(0))),Vector(x509),Vector(Set(x510))) {}
             Foreach(Accel_n by 1) { i => buf(i) = max(buf(i), mx - dynRange) } (LogCompress.scala:59:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x436 = SRAMBankedRead(x341,Vector(List(Const(0))),Vector(x507),Vector(Set(x508)),Vec[Flt[_24,_8]]) {}
             Foreach(Accel_n by 1) { i => buf(i) = max(buf(i), mx - dynRange) } (LogCompress.scala:59:52)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x423 = SRAMBankedRead(x341,Vector(List(Const(0))),Vector(b421),Vector(Set(b422)),Vec[Flt[_24,_8]]) {}
             Reduce(maxReg)(0 until Accel_n) { i => buf(i) } { (a, b) => mux(a > b, a, b) } (LogCompress.scala:55:49)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x491: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x489: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x383: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
      x382: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x381: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x380: SRAMBankedWrite
  x431: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x423: SRAMBankedRead
  x490: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x443: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x436: SRAMBankedRead
      x442: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x384
Type: StreamOut[BurstCmd]
Src:  LogCompress.scala:50:18
Src:        Ktable     load constDram
---------------------------------------------------------------------
Symbol:     x384 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x389 = StreamOutBankedWrite(x384,ArrayBuffer(x387),ArrayBuffer(Set(x388))) {}
             Ktable     load constDram (LogCompress.scala:50:18)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x390: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x389: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x447
Type: StreamIn[Bit]
Src:  LogCompress.scala:81:15
Src:        outDram store outSram(0 :: Accel_n - 1)
---------------------------------------------------------------------
Symbol:     x447 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x478 = StreamInBankedRead(x447,ArrayBuffer(Set())) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x480: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x478: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x446
Type: StreamOut[Tup2[Flt[_24,_8],Bit]]
Src:  LogCompress.scala:81:15
Src:        outDram store outSram(0 :: Accel_n - 1)
---------------------------------------------------------------------
Symbol:     x446 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x474 = StreamOutBankedWrite(x446,ArrayBuffer(x473),ArrayBuffer(Set(x514))) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x475: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x474: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: outSram_0 (x444)
Type: SRAM1[Flt[_24,_8]]
Src:  LogCompress.scala:62:32
Src:        val outSram = SRAM[Float](MAX_N_ELEMENTS)
---------------------------------------------------------------------
Symbol:     x444 = SRAMNew(List(Const(400000)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 11.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x471 = SRAMBankedRead(x444,Vector(List(Const(0))),Vector(b465),Vector(Set(x470, Const(true), b466)),Vec[Flt[_24,_8]]) {}
             mem.__read(addr2, ens + c) (MemoryDealiasing.scala:32:17)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x475: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x471: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: Accel_n (x335)
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompress.scala:37:24
Src:      val Accel_n = ArgIn[I32]
---------------------------------------------------------------------
Symbol:     x335 = ArgInNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x336 = SetReg(x335,x321) {}
             setArg(Accel_n, n_runtime) (LogCompress.scala:38:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x484 = RegRead(x335) {}
             Reduce(maxReg)(0 until Accel_n) { i => buf(i) } { (a, b) => mux(a > b, a, b) } (LogCompress.scala:55:30)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x485 = RegRead(x335) {}
             Foreach(Accel_n by 1) { i => buf(i) = max(buf(i), mx - dynRange) } (LogCompress.scala:59:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (1)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: twoNegSram_0 (x343)
Type: SRAM1[Flt[_24,_8]]
Src:  LogCompress.scala:45:35
Src:        val twoNegSram = SRAM[Float](N)
---------------------------------------------------------------------
Symbol:     x343 = SRAMNew(List(Const(16)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x415 = SRAMBankedWrite(x343,Vector(x414),Vector(List(Const(0))),Vector(x503),Vector(Set(x504))) {}
             twoNegSram load twoNegDram (LogCompress.scala:51:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x416: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x415: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x344
Type: StreamOut[BurstCmd]
Src:  LogCompress.scala:49:11
Src:        buf load inDram
---------------------------------------------------------------------
Symbol:     x344 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x355 = StreamOutBankedWrite(x344,ArrayBuffer(x353),ArrayBuffer(Set(x493))) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x358: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x355: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x401
Type: StreamOut[BurstCmd]
Src:  LogCompress.scala:51:18
Src:        twoNegSram load twoNegDram
---------------------------------------------------------------------
Symbol:     x401 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x406 = StreamOutBankedWrite(x401,ArrayBuffer(x404),ArrayBuffer(Set(x405))) {}
             twoNegSram load twoNegDram (LogCompress.scala:51:18)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x407: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x406: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x326
Type: Reg[Fix[TRUE,_32,_0]]
Src:  FriendlyTransformer.scala:19:28
Src:      val arg: Reg[A] = stage(ArgInNew[A](bA.zero))
---------------------------------------------------------------------
Symbol:     x326 = ArgInNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x327 = SetReg(x326,x321) {}
             setArg(arg,x.unbox) (FriendlyTransformer.scala:21:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x347 = RegRead(x326) {}
             arg.value (FriendlyTransformer.scala:22:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (1)>

             x450 = RegRead(x326) {}
             arg.value (FriendlyTransformer.scala:22:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x328 = RegRead(x326) {}
             arg.value (FriendlyTransformer.scala:22:9)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
Host
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x402
Type: StreamIn[Flt[_24,_8]]
Src:  LogCompress.scala:51:18
Src:        twoNegSram load twoNegDram
---------------------------------------------------------------------
Symbol:     x402 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x413 = StreamInBankedRead(x402,ArrayBuffer(Set(b412))) {}
             twoNegSram load twoNegDram (LogCompress.scala:51:18)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x416: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x413: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x360
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompress.scala:49:11
Src:        buf load inDram
---------------------------------------------------------------------
Symbol:     x360 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x365 = RegWrite(x360,x364,Set()) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x375 = RegRead(x360) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x382: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x365: RegWrite
  x381: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x375: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: Ktable_0 (x342)
Type: SRAM1[Flt[_24,_8]]
Src:  LogCompress.scala:44:35
Src:        val Ktable     = SRAM[Float](N)
---------------------------------------------------------------------
Symbol:     x342 = SRAMNew(List(Const(16)),SRAM1[Flt[_24,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x398 = SRAMBankedWrite(x342,Vector(x397),Vector(List(Const(0))),Vector(x501),Vector(Set(x500))) {}
             Ktable     load constDram (LogCompress.scala:50:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x399: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x398: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x449
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompress.scala:81:15
Src:        outDram store outSram(0 :: Accel_n - 1)
---------------------------------------------------------------------
Symbol:     x449 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x460 = RegWrite(x449,x453,Set()) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x486 = RegRead(x449) {}
             outDram store outSram(0 :: Accel_n - 1) (LogCompress.scala:81:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x476: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x461: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x460: RegWrite
  x475: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x486: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: maxReg_0 (x418)
Type: Reg[Flt[_24,_8]]
Src:  LogCompress.scala:54:30
Src:        val maxReg = Reg[Float](0.to[Float])
---------------------------------------------------------------------
Symbol:     x418 = RegNew(Const(0.0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x430 = RegWrite(x418,x506,Set()) {}
             Reduce(maxReg)(0 until Accel_n) { i => buf(i) } { (a, b) => mux(a > b, a, b) } (LogCompress.scala:55:55)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x425 = RegRead(x418) {}
             Reduce(maxReg)(0 until Accel_n) { i => buf(i) } { (a, b) => mux(a > b, a, b) } (LogCompress.scala:55:55)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x438 = RegRead(x418) {}
             val mx = maxReg.value (LogCompress.scala:56:23)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>




Control Tree: 
x491: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x431: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x425: RegRead
    x430: RegWrite
  x490: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x443: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x438: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x361
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompress.scala:49:11
Src:        buf load inDram
---------------------------------------------------------------------
Symbol:     x361 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x367 = RegWrite(x361,x366,Set()) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x483 = RegRead(x361) {}
             buf load inDram (LogCompress.scala:49:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x382: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x367: RegWrite
  x381: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x483: RegRead
---------------------------------------------------------------------




