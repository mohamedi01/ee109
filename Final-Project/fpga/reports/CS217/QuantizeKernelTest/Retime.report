x249 = ArrayFromSeq(ArrayBuffer(Const(-1), Const(-0.75), Const(-0.5), Const(-0.25), Const(0), Const(0.25), Const(0.5), Const(0.75), Const(1)))
 - Name: input
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x250 = DRAMHostNew(List(Const(9)),Const(0))
 - Name: inDRAM
 - Type: DRAM1[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x251 = DRAMHostNew(List(Const(9)),Const(0))
 - Name: outDRAM
 - Type: DRAM1[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x252 = SetMem(x250,x249)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x213 = AccelScope(Block(Const(()))) {
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(Const(())) {
    x253 = SRAMNew(List(Const(9)),SRAM1[Fix[TRUE,_16,_8]])
     - Name: inSRAM_0
     - Type: SRAM1[Fix[TRUE,_16,_8]]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x254 = SRAMNew(List(Const(9)),SRAM1[Fix[TRUE,_16,_8]])
     - Name: outSRAM_0
     - Type: SRAM1[Fix[TRUE,_16,_8]]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x289 = UnitPipe(Set(),Block(Const(())),None) {
     - Name: DenseTransfer
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x255 = StreamOutNew(BurstCmdBus)
         - Type: StreamOut[BurstCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x256 = FIFONew(Const(16))
         - Type: FIFO[IssuedCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x257 = StreamInNew(BurstDataBus())
         - Type: StreamIn[Fix[TRUE,_16,_8]]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x264 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x258 = DRAMAddress(x250)
             - Type: Fix[TRUE,_64,_0]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x259 = SimpleStruct(ArrayBuffer((offset,x258), (size,Const(63)), (isLoad,Const(true))))
             - Type: BurstCmd
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x260 = DRAMIsAlloc(x250)
             - Type: Bit
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x261 = StreamOutBankedWrite(x255,ArrayBuffer(x259),ArrayBuffer(Set(x260)))
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x262 = SimpleStruct(ArrayBuffer((size,Const(21)), (start,Const(0)), (end,Const(9))))
             - Type: IssuedCmd
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x263 = FIFOBankedEnq(x256,ArrayBuffer(x262),ArrayBuffer(Set(Const(true))))
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          1.0
             - Reduce Latency:   1.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
          } // End of x264 block #0
        } // End of x264
        x265 = FringeDenseLoad(x250,x255,x257)
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x288 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x266 = RegNew(Const(0))
             - Type: Reg[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x267 = RegNew(Const(0))
             - Type: Reg[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x274 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x268 = FIFOBankedDeq(x256,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                 - Type: Vec[IssuedCmd]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x269 = VecApply(x268,0)
                 - Type: IssuedCmd
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x270 = FieldApply(x269,end)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x271 = RegWrite(x266,x270,Set())
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x272 = FieldApply(x269,size)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x273 = RegWrite(x267,x272,Set())
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x274 block #0
            } // End of x274
            x371 = RegRead(x267)
             - Type: Fix[TRUE,_32,_0]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x276 = CounterNew(Const(0),x371,Const(1),Const(1))
             - Type: Counter[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x277 = CounterChainNew(List(x276))
             - Type: CounterChain
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x287 = UnrolledForeach(Set(),x277,Block(Const(())),List(List(b278)),List(List(b279)),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x280 = FixLeq(Const(0),b278)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.4
                 - Reduce Latency:   0.4
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x281 = RegRead(x266)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x282 = FixLst(b278,x281)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.4
                 - Reduce Latency:   0.4
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x283 = And(x280,x282)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.2
                 - Reduce Latency:   0.2
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x284 = StreamInBankedRead(x257,ArrayBuffer(Set(b279)))
                 - Type: Vec[Fix[TRUE,_16,_8]]
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x376 = DelayLine(1,x284)
                 - Type: Vec[Fix[TRUE,_16,_8]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x285 = VecApply(x376,0)
                 - Type: Fix[TRUE,_16,_8]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x377 = DelayLine(1,x283)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x378 = DelayLine(1,b278)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x379 = DelayLine(1,b279)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x286 = SRAMBankedWrite(x253,Vector(x285),Vector(List(Const(0))),Vector(x378),Vector(Set(x377, x379)))
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x287 block #0
            } // End of x287
          } // End of x288 block #0
        } // End of x288
      } // End of x289 block #0
    } // End of x289
    x290 = CounterNew(Const(0),Const(9),Const(1),Const(1))
     - Type: Counter[Fix[TRUE,_32,_0]]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x291 = CounterChainNew(List(x290))
     - Type: CounterChain
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x308 = UnrolledForeach(Set(),x291,Block(Const(())),List(List(b292)),List(List(b293)),None) {
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x294 = SRAMBankedRead(x253,Vector(List(Const(0))),Vector(b292),Vector(Set(b293)),Vec[Fix[TRUE,_16,_8]])
         - Type: Vec[Fix[TRUE,_16,_8]]
         - Cycle: <no cycle>
         - Latency:          2.0
         - Reduce Latency:   2.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x295 = VecApply(x294,0)
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x373 = FixNeg(x295)
         - Name: x
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.1
         - Reduce Latency:   0.1
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x374 = FixSLA(x373,Const(-1))
         - Name: x
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.2
         - Reduce Latency:   0.2
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x375 = FixSub(x374,x295)
         - Name: x
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x297 = FixLst(x375,Const(-32768))
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.4
         - Reduce Latency:   0.4
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x298 = FixLst(Const(32767),x375)
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.4
         - Reduce Latency:   0.4
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x299 = Mux(x298,Const(32767),x375)
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.5
         - Reduce Latency:   0.5
         - Requires Regs:    true
         - Built-In Latency: 0.0
         - Delays: <none>
        x300 = Mux(x297,Const(-32768),x299)
         - Name: clipped
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.5
         - Reduce Latency:   0.5
         - Requires Regs:    true
         - Built-In Latency: 0.0
         - Delays: <none>
        x380 = DelayLine(1,x300)
         - Name: clipped_d1
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x301 = FixLst(x380,Const(0))
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.4
         - Reduce Latency:   0.4
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x302 = FixSub(x380,Const(0.5))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x303 = FixAdd(x380,Const(0.5))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x381 = DelayLine(1,x301)
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x304 = Mux(x381,x302,x303)
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.5
         - Reduce Latency:   0.5
         - Requires Regs:    true
         - Built-In Latency: 0.0
         - Delays: <none>
        x305 = FixNeg(x304)
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.1
         - Reduce Latency:   0.1
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x306 = FixDivSRA(x305,Const(-1))
         - Name: quantized
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.2
         - Reduce Latency:   0.2
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x382 = DelayLine(6,b292)
         - Type: Fix[TRUE,_32,_0]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x383 = DelayLine(6,b293)
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x307 = SRAMBankedWrite(x254,Vector(x306),Vector(List(Const(0))),Vector(x382),Vector(Set(x383)))
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          1.0
         - Reduce Latency:   1.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
      } // End of x308 block #0
    } // End of x308
    x341 = UnitPipe(Set(),Block(Const(())),None) {
     - Name: DenseTransfer
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x309 = StreamOutNew(BurstCmdBus)
         - Type: StreamOut[BurstCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x310 = StreamOutNew(BurstFullDataBus())
         - Type: StreamOut[Tup2[Fix[TRUE,_16,_8],Bit]]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x311 = StreamInNew(BurstAckBus)
         - Type: StreamIn[Bit]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x340 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x335 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x312 = RegNew(Const(0))
                 - Type: Reg[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x313 = RegNew(Const(0))
                 - Type: Reg[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x320 = UnitPipe(Set(),Block(Const(())),None) {
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                  block 0: Block(Const(())) {
                    x314 = DRAMAddress(x251)
                     - Type: Fix[TRUE,_64,_0]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x315 = SimpleStruct(ArrayBuffer((offset,x314), (size,Const(63)), (isLoad,Const(false))))
                     - Type: BurstCmd
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x316 = DRAMIsAlloc(x251)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x317 = StreamOutBankedWrite(x309,ArrayBuffer(x315),ArrayBuffer(Set(x316)))
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x318 = RegWrite(x312,Const(9),Set())
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          1.0
                     - Reduce Latency:   1.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x319 = RegWrite(x313,Const(21),Set())
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          1.0
                     - Reduce Latency:   1.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                  } // End of x320 block #0
                } // End of x320
                x372 = RegRead(x313)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x322 = CounterNew(Const(0),x372,Const(1),Const(1))
                 - Type: Counter[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x323 = CounterChainNew(List(x322))
                 - Type: CounterChain
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x334 = UnrolledForeach(Set(),x323,Block(Const(())),List(List(b324)),List(List(b325)),None) {
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                  block 0: Block(Const(())) {
                    x326 = FixLeq(Const(0),b324)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.4
                     - Reduce Latency:   0.4
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x327 = RegRead(x312)
                     - Type: Fix[TRUE,_32,_0]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x328 = FixLst(b324,x327)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.4
                     - Reduce Latency:   0.4
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x329 = And(x326,x328)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.2
                     - Reduce Latency:   0.2
                     - Requires Regs:    true
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x330 = SRAMBankedRead(x254,Vector(List(Const(0))),Vector(b324),Vector(Set(x329, b325)),Vec[Fix[TRUE,_16,_8]])
                     - Type: Vec[Fix[TRUE,_16,_8]]
                     - Cycle: <no cycle>
                     - Latency:          2.0
                     - Reduce Latency:   2.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x331 = VecApply(x330,0)
                     - Type: Fix[TRUE,_16,_8]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x384 = DelayLine(2,x329)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x332 = SimpleStruct(ArrayBuffer((_1,x331), (_2,x384)))
                     - Type: Tup2[Fix[TRUE,_16,_8],Bit]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x385 = DelayLine(2,b325)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x333 = StreamOutBankedWrite(x310,ArrayBuffer(x332),ArrayBuffer(Set(x385)))
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                  } // End of x334 block #0
                } // End of x334
              } // End of x335 block #0
            } // End of x335
            x336 = FringeDenseStore(x251,x309,x310,x311)
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x339 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x337 = StreamInBankedRead(x311,ArrayBuffer(Set()))
                 - Type: Vec[Bit]
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x339 block #0
            } // End of x339
          } // End of x340 block #0
        } // End of x340
      } // End of x341 block #0
    } // End of x341
  } // End of x213 block #0
} // End of x213
x342 = ArrayNew(Const(9))
 - Name: result
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x343 = GetMem(x251,x342)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x356 = ArrayMap(x249,Block((x249,b29) => x344),Block((x344) => x355)) {
 - Name: gold
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block((x249,b29) => x344) {
    x344 = ArrayApply(x249,b29)
     - Name: x
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x356 block #0
  block 1: Block((x344) => x355) {
    x345 = FixMul(x344,Const(32767))
     - Name: scaled
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          4.5
     - Reduce Latency:   4.5
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x346 = FixLst(x345,Const(-32768))
     - Type: Bit
     - Cycle: <no cycle>
     - Latency:          0.4
     - Reduce Latency:   0.4
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x349 = IfThenElse(x346,Block(Const(-32768)),Block(x348)) {
     - Name: clipped
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(-32768)) {
      } // End of x349 block #0
      block 1: Block(x348) {
        x347 = FixLst(Const(32767),x345)
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.4
         - Reduce Latency:   0.4
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x348 = IfThenElse(x347,Block(Const(32767)),Block(x345)) {
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(32767)) {
          } // End of x348 block #0
          block 1: Block(x345) {
          } // End of x348 block #1
        } // End of x348
      } // End of x349 block #1
    } // End of x349
    x350 = FixLst(x349,Const(0))
     - Type: Bit
     - Cycle: <no cycle>
     - Latency:          0.4
     - Reduce Latency:   0.4
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x353 = IfThenElse(x350,Block(x351),Block(x352)) {
     - Name: rounded
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(x351) {
        x351 = FixSub(x349,Const(0.5))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
      } // End of x353 block #0
      block 1: Block(x352) {
        x352 = FixAdd(x349,Const(0.5))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
      } // End of x353 block #1
    } // End of x353
    x354 = FixNeg(x353)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.1
     - Reduce Latency:   0.1
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x355 = FixDivSRA(x354,Const(-1))
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.2
     - Reduce Latency:   0.2
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x356 block #1
} // End of x356
x362 = ArrayZip(x356,x342,Block((x356,b43) => x357),Block((x342,b43) => x358),Block((x357,x358) => x361)) {
 - Type: Array[Bit]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block((x356,b43) => x357) {
    x357 = ArrayApply(x356,b43)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x362 block #0
  block 1: Block((x342,b43) => x358) {
    x358 = ArrayApply(x342,b43)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x362 block #1
  block 2: Block((x357,x358) => x361) {
    x359 = FixSub(x357,x358)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.75
     - Reduce Latency:   0.75
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x360 = FixAbs(x359)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.5
     - Reduce Latency:   0.5
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x361 = FixLst(x360,Const(0.0078125))
     - Type: Bit
     - Cycle: <no cycle>
     - Latency:          0.4
     - Reduce Latency:   0.4
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x362 block #2
} // End of x362
x365 = ArrayReduce(x362,Block((x362,b50) => x363),Block((b51,b52) => x364)) {
 - Name: cksum
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block((x362,b50) => x363) {
    x363 = ArrayApply(x362,b50)
     - Type: Bit
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x365 block #0
  block 1: Block((b51,b52) => x364) {
    x364 = And(b51,b52)
     - Type: Bit
     - Cycle: <no cycle>
     - Latency:          0.2
     - Reduce Latency:   0.2
     - Requires Regs:    true
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x365 block #1
} // End of x365
x366 = BitToText(x365)
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x367 = TextConcat(List(Const("PASS: "), x366))
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x368 = TextConcat(List(x367, Const("\n")))
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x369 = PrintIf(Set(),x368)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x370 = AssertIf(Set(),x365,Some(Const("QuantizeKernelTest.scala:50:11: Assertion failure")))
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
