---------------------------
Estimated Total Memories: 
---------------------------
  RAM36: 2.0
---------------------------



---------------------------------------------------------------------
Name: x297
Type: FIFO[IssuedCmd]
Src:  LogCompressTest.scala:22:11
Src:        buf load inDRAM
---------------------------------------------------------------------
Symbol:     x297 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x304 = FIFOBankedEnq(x297,ArrayBuffer(x303),ArrayBuffer(Set(Const(true)))) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x309 = FIFOBankedDeq(x297,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x330: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x305: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x304: FIFOBankedEnq
  x329: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x315: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x309: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x308
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompressTest.scala:22:11
Src:        buf load inDRAM
---------------------------------------------------------------------
Symbol:     x308 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x314 = RegWrite(x308,x313,Set()) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x436 = RegRead(x308) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x329: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x315: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x314: RegWrite
  x328: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x436: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x371
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompressTest.scala:39:15
Src:        outDRAM store out
---------------------------------------------------------------------
Symbol:     x371 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x377 = RegWrite(x371,Const(21),Set()) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x437 = RegRead(x371) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x393: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x378: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x377: RegWrite
  x392: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x437: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x368
Type: StreamOut[Tup2[Fix[TRUE,_16,_8],Bit]]
Src:  LogCompressTest.scala:39:15
Src:        outDRAM store out
---------------------------------------------------------------------
Symbol:     x368 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x391 = StreamOutBankedWrite(x368,ArrayBuffer(x390),ArrayBuffer(Set(x452))) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x392: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x391: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x369
Type: StreamIn[Bit]
Src:  LogCompressTest.scala:39:15
Src:        outDRAM store out
---------------------------------------------------------------------
Symbol:     x369 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x395 = StreamInBankedRead(x369,ArrayBuffer(Set())) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x397: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x395: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: out_0 (x295)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  LogCompressTest.scala:20:24
Src:        val out = SRAM[T](N)
---------------------------------------------------------------------
Symbol:     x295 = SRAMNew(List(Const(2)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x361 = SRAMBankedWrite(x295,Vector(Const(1)),Vector(List(Const(0))),Vector(b357),Vector(Set(x359))) {}
             out(i) = 1.to[T]  // fake log10(10) (LogCompressTest.scala:33:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x363 = SRAMBankedWrite(x295,Vector(Const(-2)),Vector(List(Const(0))),Vector(x449),Vector(Set(x450))) {}
             out(i) = -2.to[T] // fake log10(0.01) (LogCompressTest.scala:35:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x388 = SRAMBankedRead(x295,Vector(List(Const(0))),Vector(b382),Vector(Set(x387, b383)),Vec[Fix[TRUE,_16,_8]]) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x439: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x438: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x366: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x361: SRAMBankedWrite
      x363: SRAMBankedWrite
  x399: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x398: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x393: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x392: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x388: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x296
Type: StreamOut[BurstCmd]
Src:  LogCompressTest.scala:22:11
Src:        buf load inDRAM
---------------------------------------------------------------------
Symbol:     x296 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x302 = StreamOutBankedWrite(x296,ArrayBuffer(x300),ArrayBuffer(Set(x301))) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x305: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x302: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x298
Type: StreamIn[Fix[TRUE,_16,_8]]
Src:  LogCompressTest.scala:22:11
Src:        buf load inDRAM
---------------------------------------------------------------------
Symbol:     x298 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x325 = StreamInBankedRead(x298,ArrayBuffer(Set(b320))) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x328: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x325: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x307
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompressTest.scala:22:11
Src:        buf load inDRAM
---------------------------------------------------------------------
Symbol:     x307 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x312 = RegWrite(x307,x311,Set()) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x322 = RegRead(x307) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x329: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x315: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x312: RegWrite
  x328: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x322: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x370
Type: Reg[Fix[TRUE,_32,_0]]
Src:  LogCompressTest.scala:39:15
Src:        outDRAM store out
---------------------------------------------------------------------
Symbol:     x370 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x376 = RegWrite(x370,Const(2),Set()) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x385 = RegRead(x370) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x393: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x378: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x376: RegWrite
  x392: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x385: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x367
Type: StreamOut[BurstCmd]
Src:  LogCompressTest.scala:39:15
Src:        outDRAM store out
---------------------------------------------------------------------
Symbol:     x367 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x375 = StreamOutBankedWrite(x367,ArrayBuffer(x373),ArrayBuffer(Set(x374))) {}
             outDRAM store out (LogCompressTest.scala:39:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x378: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x375: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: mx_0 (x331)
Type: Reg[Fix[TRUE,_16,_8]]
Src:  LogCompressTest.scala:24:26
Src:        val mx = Reduce(Reg[T])(N by 1){ i => buf(i) }{ (a,b) => max(a,b) }
---------------------------------------------------------------------
Symbol:     x331 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x350 = RegRead(x331) {}
             buf(i) = max(buf(i), mx.value - dynRange) (LogCompressTest.scala:27:33)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x439: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x343: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x440: RegAccumOp
  x438: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x354: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x350: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: buf_0 (x294)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  LogCompressTest.scala:19:24
Src:        val buf = SRAM[T](N)
---------------------------------------------------------------------
Symbol:     x294 = SRAMNew(List(Const(2)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x327 = SRAMBankedWrite(x294,Vector(x326),Vector(List(Const(0))),Vector(x442),Vector(Set(x443, x444))) {}
             buf load inDRAM (LogCompressTest.scala:22:11)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x353 = SRAMBankedWrite(x294,Vector(x352),Vector(List(Const(0))),Vector(x448),Vector(Set(x447))) {}
             buf(i) = max(buf(i), mx.value - dynRange) (LogCompressTest.scala:27:16)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x348 = SRAMBankedRead(x294,Vector(List(Const(0))),Vector(b346),Vector(Set(b347)),Vec[Fix[TRUE,_16,_8]]) {}
             buf(i) = max(buf(i), mx.value - dynRange) (LogCompressTest.scala:27:25)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

           - Mux Port #1: 
             x336 = SRAMBankedRead(x294,Vector(List(Const(0))),Vector(b334),Vector(Set(b335)),Vec[Fix[TRUE,_16,_8]]) {}
             val mx = Reduce(Reg[T])(N by 1){ i => buf(i) }{ (a,b) => max(a,b) } (LogCompressTest.scala:24:48)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x439: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x330: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x329: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x328: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x327: SRAMBankedWrite
  x343: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x336: SRAMBankedRead
  x438: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x354: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x348: SRAMBankedRead
      x353: SRAMBankedWrite
---------------------------------------------------------------------




