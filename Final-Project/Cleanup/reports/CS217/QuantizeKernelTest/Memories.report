---------------------------
Estimated Total Memories: 
---------------------------
  RAM36: 2.0
---------------------------



---------------------------------------------------------------------
Name: x310
Type: StreamOut[Tup2[Fix[TRUE,_16,_8],Bit]]
Src:  QuantizeKernelTest.scala:36:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x310 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x333 = StreamOutBankedWrite(x310,ArrayBuffer(x332),ArrayBuffer(Set(x385))) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x334: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x333: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x313
Type: Reg[Fix[TRUE,_32,_0]]
Src:  QuantizeKernelTest.scala:36:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x313 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x319 = RegWrite(x313,Const(21),Set()) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x372 = RegRead(x313) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x335: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x320: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x319: RegWrite
  x334: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x372: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x309
Type: StreamOut[BurstCmd]
Src:  QuantizeKernelTest.scala:36:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x309 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x317 = StreamOutBankedWrite(x309,ArrayBuffer(x315),ArrayBuffer(Set(x316))) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x320: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x317: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x255
Type: StreamOut[BurstCmd]
Src:  QuantizeKernelTest.scala:25:14
Src:        inSRAM load inDRAM
---------------------------------------------------------------------
Symbol:     x255 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x261 = StreamOutBankedWrite(x255,ArrayBuffer(x259),ArrayBuffer(Set(x260))) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x264: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x261: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: outSRAM_0 (x254)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  QuantizeKernelTest.scala:23:28
Src:        val outSRAM = SRAM[T](N)
---------------------------------------------------------------------
Symbol:     x254 = SRAMNew(List(Const(9)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x307 = SRAMBankedWrite(x254,Vector(x306),Vector(List(Const(0))),Vector(x382),Vector(Set(x383))) {}
             outSRAM(i) = quantized (QuantizeKernelTest.scala:33:20)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x330 = SRAMBankedRead(x254,Vector(List(Const(0))),Vector(b324),Vector(Set(x329, b325)),Vec[Fix[TRUE,_16,_8]]) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x213: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x308: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x307: SRAMBankedWrite
  x341: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x340: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x335: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x334: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x330: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x257
Type: StreamIn[Fix[TRUE,_16,_8]]
Src:  QuantizeKernelTest.scala:25:14
Src:        inSRAM load inDRAM
---------------------------------------------------------------------
Symbol:     x257 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x284 = StreamInBankedRead(x257,ArrayBuffer(Set(b279))) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x287: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x284: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x256
Type: FIFO[IssuedCmd]
Src:  QuantizeKernelTest.scala:25:14
Src:        inSRAM load inDRAM
---------------------------------------------------------------------
Symbol:     x256 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x263 = FIFOBankedEnq(x256,ArrayBuffer(x262),ArrayBuffer(Set(Const(true)))) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x268 = FIFOBankedDeq(x256,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x289: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x264: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x263: FIFOBankedEnq
  x288: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x274: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x268: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x266
Type: Reg[Fix[TRUE,_32,_0]]
Src:  QuantizeKernelTest.scala:25:14
Src:        inSRAM load inDRAM
---------------------------------------------------------------------
Symbol:     x266 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x271 = RegWrite(x266,x270,Set()) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x281 = RegRead(x266) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x288: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x274: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x271: RegWrite
  x287: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x281: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x311
Type: StreamIn[Bit]
Src:  QuantizeKernelTest.scala:36:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x311 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x337 = StreamInBankedRead(x311,ArrayBuffer(Set())) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x339: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x337: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: inSRAM_0 (x253)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  QuantizeKernelTest.scala:22:27
Src:        val inSRAM = SRAM[T](N)
---------------------------------------------------------------------
Symbol:     x253 = SRAMNew(List(Const(9)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x286 = SRAMBankedWrite(x253,Vector(x285),Vector(List(Const(0))),Vector(x378),Vector(Set(x377, x379))) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x294 = SRAMBankedRead(x253,Vector(List(Const(0))),Vector(b292),Vector(Set(b293)),Vec[Fix[TRUE,_16,_8]]) {}
             val x = inSRAM(i) * 32767.to[T] (QuantizeKernelTest.scala:28:23)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x213: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x289: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x288: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x287: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x286: SRAMBankedWrite
  x308: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x294: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x312
Type: Reg[Fix[TRUE,_32,_0]]
Src:  QuantizeKernelTest.scala:36:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x312 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x318 = RegWrite(x312,Const(9),Set()) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x327 = RegRead(x312) {}
             outDRAM store outSRAM (QuantizeKernelTest.scala:36:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x335: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x320: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x318: RegWrite
  x334: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x327: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x267
Type: Reg[Fix[TRUE,_32,_0]]
Src:  QuantizeKernelTest.scala:25:14
Src:        inSRAM load inDRAM
---------------------------------------------------------------------
Symbol:     x267 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x273 = RegWrite(x267,x272,Set()) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x371 = RegRead(x267) {}
             inSRAM load inDRAM (QuantizeKernelTest.scala:25:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x288: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x274: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x273: RegWrite
  x287: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x371: RegRead
---------------------------------------------------------------------




