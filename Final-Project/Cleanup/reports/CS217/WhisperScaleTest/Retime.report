x248 = ArrayFromSeq(ArrayBuffer(Const(0), Const(-4), Const(4), Const(-2)))
 - Name: input
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x249 = ArrayFromSeq(ArrayBuffer(Const(1), Const(0), Const(2), Const(0.5)))
 - Name: expected
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x250 = DRAMHostNew(List(Const(4)),Const(0))
 - Name: inDRAM
 - Type: DRAM1[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x251 = DRAMHostNew(List(Const(4)),Const(0))
 - Name: outDRAM
 - Type: DRAM1[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x252 = SetMem(x250,x248)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x201 = AccelScope(Block(Const(()))) {
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(Const(())) {
    x253 = SRAMNew(List(Const(4)),SRAM1[Fix[TRUE,_16,_8]])
     - Name: buf_0
     - Type: SRAM1[Fix[TRUE,_16,_8]]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x288 = UnitPipe(Set(),Block(Const(())),None) {
     - Name: DenseTransfer
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x254 = StreamOutNew(BurstCmdBus)
         - Type: StreamOut[BurstCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x255 = FIFONew(Const(16))
         - Type: FIFO[IssuedCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x256 = StreamInNew(BurstDataBus())
         - Type: StreamIn[Fix[TRUE,_16,_8]]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x263 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x257 = DRAMAddress(x250)
             - Type: Fix[TRUE,_64,_0]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x258 = SimpleStruct(ArrayBuffer((offset,x257), (size,Const(63)), (isLoad,Const(true))))
             - Type: BurstCmd
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x259 = DRAMIsAlloc(x250)
             - Type: Bit
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x260 = StreamOutBankedWrite(x254,ArrayBuffer(x258),ArrayBuffer(Set(x259)))
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x261 = SimpleStruct(ArrayBuffer((size,Const(21)), (start,Const(0)), (end,Const(4))))
             - Type: IssuedCmd
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x262 = FIFOBankedEnq(x255,ArrayBuffer(x261),ArrayBuffer(Set(Const(true))))
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          1.0
             - Reduce Latency:   1.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
          } // End of x263 block #0
        } // End of x263
        x264 = FringeDenseLoad(x250,x254,x256)
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x287 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x265 = RegNew(Const(0))
             - Type: Reg[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x266 = RegNew(Const(0))
             - Type: Reg[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x273 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x267 = FIFOBankedDeq(x255,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                 - Type: Vec[IssuedCmd]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x268 = VecApply(x267,0)
                 - Type: IssuedCmd
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x269 = FieldApply(x268,end)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x270 = RegWrite(x265,x269,Set())
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x271 = FieldApply(x268,size)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x272 = RegWrite(x266,x271,Set())
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x273 block #0
            } // End of x273
            x372 = RegRead(x266)
             - Type: Fix[TRUE,_32,_0]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x275 = CounterNew(Const(0),x372,Const(1),Const(1))
             - Type: Counter[Fix[TRUE,_32,_0]]
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x276 = CounterChainNew(List(x275))
             - Type: CounterChain
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x286 = UnrolledForeach(Set(),x276,Block(Const(())),List(List(b277)),List(List(b278)),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x279 = FixLeq(Const(0),b277)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.4
                 - Reduce Latency:   0.4
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x280 = RegRead(x265)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x281 = FixLst(b277,x280)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.4
                 - Reduce Latency:   0.4
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x282 = And(x279,x281)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.2
                 - Reduce Latency:   0.2
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x283 = StreamInBankedRead(x256,ArrayBuffer(Set(b278)))
                 - Type: Vec[Fix[TRUE,_16,_8]]
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x374 = DelayLine(1,x283)
                 - Type: Vec[Fix[TRUE,_16,_8]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x284 = VecApply(x374,0)
                 - Type: Fix[TRUE,_16,_8]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x375 = DelayLine(1,b277)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x376 = DelayLine(1,x282)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x377 = DelayLine(1,b278)
                 - Type: Bit
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x285 = SRAMBankedWrite(x253,Vector(x284),Vector(List(Const(0))),Vector(x375),Vector(Set(x376, x377)))
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x286 block #0
            } // End of x286
          } // End of x287 block #0
        } // End of x287
      } // End of x288 block #0
    } // End of x288
    x289 = CounterNew(Const(0),Const(4),Const(1),Const(1))
     - Type: Counter[Fix[TRUE,_32,_0]]
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x290 = CounterChainNew(List(x289))
     - Type: CounterChain
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
    x298 = UnrolledForeach(Set(),x290,Block(Const(())),List(List(b291)),List(List(b292)),None) {
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x293 = SRAMBankedRead(x253,Vector(List(Const(0))),Vector(b291),Vector(Set(b292)),Vec[Fix[TRUE,_16,_8]])
         - Type: Vec[Fix[TRUE,_16,_8]]
         - Cycle: <no cycle>
         - Latency:          2.0
         - Reduce Latency:   2.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x294 = VecApply(x293,0)
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x295 = FixAdd(x294,Const(4))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.75
         - Reduce Latency:   0.75
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x296 = FixDivSRA(x295,Const(2))
         - Type: Fix[TRUE,_16,_8]
         - Cycle: <no cycle>
         - Latency:          0.2
         - Reduce Latency:   0.2
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x378 = DelayLine(2,b291)
         - Type: Fix[TRUE,_32,_0]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x379 = DelayLine(2,b292)
         - Type: Bit
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x297 = SRAMBankedWrite(x253,Vector(x296),Vector(List(Const(0))),Vector(x378),Vector(Set(x379)))
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          1.0
         - Reduce Latency:   1.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
      } // End of x298 block #0
    } // End of x298
    x331 = UnitPipe(Set(),Block(Const(())),None) {
     - Name: DenseTransfer
     - Type: Void
     - Cycle: <no cycle>
     - Latency:          0.0
     - Reduce Latency:   0.0
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
      block 0: Block(Const(())) {
        x299 = StreamOutNew(BurstCmdBus)
         - Type: StreamOut[BurstCmd]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x300 = StreamOutNew(BurstFullDataBus())
         - Type: StreamOut[Tup2[Fix[TRUE,_16,_8],Bit]]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x301 = StreamInNew(BurstAckBus)
         - Type: StreamIn[Bit]
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
        x330 = UnitPipe(Set(),Block(Const(())),None) {
         - Type: Void
         - Cycle: <no cycle>
         - Latency:          0.0
         - Reduce Latency:   0.0
         - Requires Regs:    false
         - Built-In Latency: 0.0
         - Delays: <none>
          block 0: Block(Const(())) {
            x325 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x302 = RegNew(Const(0))
                 - Type: Reg[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x303 = RegNew(Const(0))
                 - Type: Reg[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x310 = UnitPipe(Set(),Block(Const(())),None) {
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                  block 0: Block(Const(())) {
                    x304 = DRAMAddress(x251)
                     - Type: Fix[TRUE,_64,_0]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x305 = SimpleStruct(ArrayBuffer((offset,x304), (size,Const(63)), (isLoad,Const(false))))
                     - Type: BurstCmd
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x306 = DRAMIsAlloc(x251)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x307 = StreamOutBankedWrite(x299,ArrayBuffer(x305),ArrayBuffer(Set(x306)))
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x308 = RegWrite(x302,Const(4),Set())
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          1.0
                     - Reduce Latency:   1.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x309 = RegWrite(x303,Const(21),Set())
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          1.0
                     - Reduce Latency:   1.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                  } // End of x310 block #0
                } // End of x310
                x373 = RegRead(x303)
                 - Type: Fix[TRUE,_32,_0]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x312 = CounterNew(Const(0),x373,Const(1),Const(1))
                 - Type: Counter[Fix[TRUE,_32,_0]]
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x313 = CounterChainNew(List(x312))
                 - Type: CounterChain
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                x324 = UnrolledForeach(Set(),x313,Block(Const(())),List(List(b314)),List(List(b315)),None) {
                 - Type: Void
                 - Cycle: <no cycle>
                 - Latency:          0.0
                 - Reduce Latency:   0.0
                 - Requires Regs:    false
                 - Built-In Latency: 0.0
                 - Delays: <none>
                  block 0: Block(Const(())) {
                    x316 = FixLeq(Const(0),b314)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.4
                     - Reduce Latency:   0.4
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x317 = RegRead(x302)
                     - Type: Fix[TRUE,_32,_0]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x318 = FixLst(b314,x317)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.4
                     - Reduce Latency:   0.4
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x319 = And(x316,x318)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.2
                     - Reduce Latency:   0.2
                     - Requires Regs:    true
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x320 = SRAMBankedRead(x253,Vector(List(Const(0))),Vector(b314),Vector(Set(x319, b315)),Vec[Fix[TRUE,_16,_8]])
                     - Type: Vec[Fix[TRUE,_16,_8]]
                     - Cycle: <no cycle>
                     - Latency:          2.0
                     - Reduce Latency:   2.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x321 = VecApply(x320,0)
                     - Type: Fix[TRUE,_16,_8]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x380 = DelayLine(2,x319)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x322 = SimpleStruct(ArrayBuffer((_1,x321), (_2,x380)))
                     - Type: Tup2[Fix[TRUE,_16,_8],Bit]
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x381 = DelayLine(2,b315)
                     - Type: Bit
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                    x323 = StreamOutBankedWrite(x300,ArrayBuffer(x322),ArrayBuffer(Set(x381)))
                     - Type: Void
                     - Cycle: <no cycle>
                     - Latency:          0.0
                     - Reduce Latency:   0.0
                     - Requires Regs:    false
                     - Built-In Latency: 0.0
                     - Delays: <none>
                  } // End of x324 block #0
                } // End of x324
              } // End of x325 block #0
            } // End of x325
            x326 = FringeDenseStore(x251,x299,x300,x301)
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
            x329 = UnitPipe(Set(),Block(Const(())),None) {
             - Type: Void
             - Cycle: <no cycle>
             - Latency:          0.0
             - Reduce Latency:   0.0
             - Requires Regs:    false
             - Built-In Latency: 0.0
             - Delays: <none>
              block 0: Block(Const(())) {
                x327 = StreamInBankedRead(x301,ArrayBuffer(Set()))
                 - Type: Vec[Bit]
                 - Cycle: <no cycle>
                 - Latency:          1.0
                 - Reduce Latency:   1.0
                 - Requires Regs:    true
                 - Built-In Latency: 0.0
                 - Delays: <none>
              } // End of x329 block #0
            } // End of x329
          } // End of x330 block #0
        } // End of x330
      } // End of x331 block #0
    } // End of x331
  } // End of x201 block #0
} // End of x201
x332 = ArrayNew(Const(4))
 - Name: result
 - Type: Array[Fix[TRUE,_16,_8]]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x333 = GetMem(x251,x332)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x334 = ArrayApply(x332,Const(0))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x335 = ArrayApply(x249,Const(0))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x336 = FixSub(x334,x335)
 - Name: d0
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.75
 - Reduce Latency:   0.75
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x337 = ArrayApply(x332,Const(1))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x338 = ArrayApply(x249,Const(1))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x339 = FixSub(x337,x338)
 - Name: d1
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.75
 - Reduce Latency:   0.75
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x340 = ArrayApply(x332,Const(2))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x341 = ArrayApply(x249,Const(2))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x342 = FixSub(x340,x341)
 - Name: d2
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.75
 - Reduce Latency:   0.75
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x343 = ArrayApply(x332,Const(3))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x344 = ArrayApply(x249,Const(3))
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x345 = FixSub(x343,x344)
 - Name: d3
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.75
 - Reduce Latency:   0.75
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x346 = FixLst(x336,Const(0))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x348 = IfThenElse(x346,Block(x347),Block(x336)) {
 - Name: e0
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(x347) {
    x347 = FixNeg(x336)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.1
     - Reduce Latency:   0.1
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x348 block #0
  block 1: Block(x336) {
  } // End of x348 block #1
} // End of x348
x349 = FixLst(x339,Const(0))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x351 = IfThenElse(x349,Block(x350),Block(x339)) {
 - Name: e1
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(x350) {
    x350 = FixNeg(x339)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.1
     - Reduce Latency:   0.1
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x351 block #0
  block 1: Block(x339) {
  } // End of x351 block #1
} // End of x351
x352 = FixLst(x342,Const(0))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x354 = IfThenElse(x352,Block(x353),Block(x342)) {
 - Name: e2
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(x353) {
    x353 = FixNeg(x342)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.1
     - Reduce Latency:   0.1
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x354 block #0
  block 1: Block(x342) {
  } // End of x354 block #1
} // End of x354
x355 = FixLst(x345,Const(0))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x357 = IfThenElse(x355,Block(x356),Block(x345)) {
 - Name: e3
 - Type: Fix[TRUE,_16,_8]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(x356) {
    x356 = FixNeg(x345)
     - Type: Fix[TRUE,_16,_8]
     - Cycle: <no cycle>
     - Latency:          0.1
     - Reduce Latency:   0.1
     - Requires Regs:    false
     - Built-In Latency: 0.0
     - Delays: <none>
  } // End of x357 block #0
  block 1: Block(x345) {
  } // End of x357 block #1
} // End of x357
x358 = FixLst(x348,Const(0.0078125))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x359 = FixLst(x351,Const(0.0078125))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x360 = And(x358,x359)
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.2
 - Reduce Latency:   0.2
 - Requires Regs:    true
 - Built-In Latency: 0.0
 - Delays: <none>
x361 = FixLst(x354,Const(0.0078125))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x362 = And(x360,x361)
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.2
 - Reduce Latency:   0.2
 - Requires Regs:    true
 - Built-In Latency: 0.0
 - Delays: <none>
x363 = FixLst(x357,Const(0.0078125))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.4
 - Reduce Latency:   0.4
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x364 = And(x362,x363)
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.2
 - Reduce Latency:   0.2
 - Requires Regs:    true
 - Built-In Latency: 0.0
 - Delays: <none>
x365 = IfThenElse(x364,Block(Const(1)),Block(Const(0))) {
 - Name: pass
 - Type: Fix[TRUE,_32,_0]
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
  block 0: Block(Const(1)) {
  } // End of x365 block #0
  block 1: Block(Const(0)) {
  } // End of x365 block #1
} // End of x365
x366 = FixToText(x365,None)
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x367 = TextConcat(List(Const("PASS: "), x366))
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x368 = TextConcat(List(x367, Const("\n")))
 - Type: Text
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x369 = PrintIf(Set(),x368)
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x370 = FixEql(x365,Const(1))
 - Type: Bit
 - Cycle: <no cycle>
 - Latency:          0.2
 - Reduce Latency:   0.2
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
x371 = AssertIf(Set(),x370,Some(Const("WhisperScaleTest.scala:39:11: Assertion failure")))
 - Type: Void
 - Cycle: <no cycle>
 - Latency:          0.0
 - Reduce Latency:   0.0
 - Requires Regs:    false
 - Built-In Latency: 0.0
 - Delays: <none>
