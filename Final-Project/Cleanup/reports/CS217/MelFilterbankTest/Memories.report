---------------------------
Estimated Total Memories: 
---------------------------
  Regs: 12.0
  Slices: 12.0
  RAM36: 3.0
---------------------------



---------------------------------------------------------------------
Name: x542
Type: StreamOut[BurstCmd]
Src:  MelFilterbankTest.scala:44:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x542 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x550 = StreamOutBankedWrite(x542,ArrayBuffer(x548),ArrayBuffer(Set(x549))) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x553: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x550: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x488
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:35:15
Src:        vecSRAM load vecDRAM
---------------------------------------------------------------------
Symbol:     x488 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x493 = RegWrite(x488,x492,Set()) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x503 = RegRead(x488) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x510: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x496: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x493: RegWrite
  x509: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x503: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x416
Type: StreamIn[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x416 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x468 = StreamInBankedRead(x416,ArrayBuffer(Set(b461, b444))) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x474: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x468: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x544
Type: StreamIn[Bit]
Src:  MelFilterbankTest.scala:44:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x544 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x570 = StreamInBankedRead(x544,ArrayBuffer(Set())) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x572: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x570: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: sum_1 (x517)
Type: Reg[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:38:29
Src:          val sum = Reduce(Reg[T])(BINS by 1){ j =>
---------------------------------------------------------------------
Symbol:     x517 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x535 = RegWrite(x517,x615,Set()) {}
             }{_ + _} (MelFilterbankTest.scala:40:10)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x538 = RegRead(x517) {}
             outSRAM(i) = sum.value (MelFilterbankTest.scala:41:26)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x541: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x537: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x535: RegWrite
  x540: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x538: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x489
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:35:15
Src:        vecSRAM load vecDRAM
---------------------------------------------------------------------
Symbol:     x489 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x495 = RegWrite(x489,x494,Set()) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x600 = RegRead(x489) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x510: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x496: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x495: RegWrite
  x509: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x600: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x445
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x445 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x451 = RegWrite(x445,x450,Set()) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x462 = RegRead(x445) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x475: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x456: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x451: RegWrite
  x474: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x462: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x479
Type: StreamIn[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:35:15
Src:        vecSRAM load vecDRAM
---------------------------------------------------------------------
Symbol:     x479 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x506 = StreamInBankedRead(x479,ArrayBuffer(Set(b501))) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x509: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x506: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x447
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x447 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x455 = RegWrite(x447,x454,Set()) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x599 = RegRead(x447) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x475: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x456: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x455: RegWrite
  x474: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x599: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x446
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x446 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x453 = RegWrite(x446,x452,Set()) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x464 = RegRead(x446) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x475: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x456: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x453: RegWrite
  x474: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x464: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x414
Type: StreamOut[BurstCmd]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x414 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x436 = StreamOutBankedWrite(x414,ArrayBuffer(x434),ArrayBuffer(Set(x620, x619))) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x439: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Sequenced]
  x436: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x477
Type: StreamOut[BurstCmd]
Src:  MelFilterbankTest.scala:35:15
Src:        vecSRAM load vecDRAM
---------------------------------------------------------------------
Symbol:     x477 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x483 = StreamOutBankedWrite(x477,ArrayBuffer(x481),ArrayBuffer(Set(x482))) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x486: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x483: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: outSRAM_0 (x413)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:32:28
Src:        val outSRAM = SRAM[T](BANDS)
---------------------------------------------------------------------
Symbol:     x413 = SRAMNew(List(Const(2)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x539 = SRAMBankedWrite(x413,Vector(x538),Vector(List(Const(0))),Vector(b514),Vector(Set())) {}
             outSRAM(i) = sum.value (MelFilterbankTest.scala:41:20)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x563 = SRAMBankedRead(x413,Vector(List(Const(0))),Vector(b557),Vector(Set(x562, b558)),Vec[Fix[TRUE,_16,_8]]) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x614: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x541: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x540: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x539: SRAMBankedWrite
  x574: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x573: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
      x568: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x567: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x563: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x546
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:44:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x546 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x552 = RegWrite(x546,Const(21),Set()) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x601 = RegRead(x546) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x568: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x553: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x552: RegWrite
  x567: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x601: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x545
Type: Reg[Fix[TRUE,_32,_0]]
Src:  MelFilterbankTest.scala:44:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x545 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x551 = RegWrite(x545,Const(2),Set()) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x560 = RegRead(x545) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x568: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x553: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x551: RegWrite
  x567: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x560: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x415
Type: FIFO[IssuedCmd]
Src:  MelFilterbankTest.scala:34:15
Src:        matSRAM load matDRAM
---------------------------------------------------------------------
Symbol:     x415 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x438 = FIFOBankedEnq(x415,ArrayBuffer(x437),ArrayBuffer(Set(Const(true), x623))) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x448 = FIFOBankedDeq(x415,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x476: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x439: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Sequenced]
    x438: FIFOBankedEnq
  x475: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
    x456: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x448: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: matSRAM_0 (x411)
Type: SRAM2[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:30:28
Src:        val matSRAM = SRAM[T](BANDS, BINS)
---------------------------------------------------------------------
Symbol:     x411 = SRAMNew(List(Const(2), Const(3)),SRAM2[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0
  Regs: 12.0
  Slices: 12.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0, 0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0,1}: Cyclic: N=1, B=1, alpha=<1,1>, P=<1,1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x473 = SRAMBankedWrite(x411,Vector(x628),Vector(List(Const(0))),Vector(x472),Vector(Set(x627, x625, x626))) {}
             matSRAM load matDRAM (MelFilterbankTest.scala:34:15)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x525 = SRAMBankedRead(x411,Vector(List(Const(0))),Vector(x524),Vector(Set(x634, x635)),Vec[Fix[TRUE,_16,_8]]) {}
             matSRAM(i, j) * vecSRAM(j) (MelFilterbankTest.scala:39:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x614: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x613: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x476: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
      x475: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
        x474: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x473: SRAMBankedWrite
  x541: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x537: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x525: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x543
Type: StreamOut[Tup2[Fix[TRUE,_16,_8],Bit]]
Src:  MelFilterbankTest.scala:44:15
Src:        outDRAM store outSRAM
---------------------------------------------------------------------
Symbol:     x543 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x566 = StreamOutBankedWrite(x543,ArrayBuffer(x565),ArrayBuffer(Set(x639))) {}
             outDRAM store outSRAM (MelFilterbankTest.scala:44:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x567: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x566: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: sum_0 (x516)
Type: Reg[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:38:29
Src:          val sum = Reduce(Reg[T])(BINS by 1){ j =>
---------------------------------------------------------------------
Symbol:     x516 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:



Control Tree: 
x537: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x615: RegAccumFMA
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x478
Type: FIFO[IssuedCmd]
Src:  MelFilterbankTest.scala:35:15
Src:        vecSRAM load vecDRAM
---------------------------------------------------------------------
Symbol:     x478 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x485 = FIFOBankedEnq(x478,ArrayBuffer(x484),ArrayBuffer(Set(Const(true)))) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x490 = FIFOBankedDeq(x478,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x511: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x486: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x485: FIFOBankedEnq
  x510: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
    x496: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x490: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: vecSRAM_0 (x412)
Type: SRAM1[Fix[TRUE,_16,_8]]
Src:  MelFilterbankTest.scala:31:28
Src:        val vecSRAM = SRAM[T](BINS)
---------------------------------------------------------------------
Symbol:     x412 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_16,_8]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x508 = SRAMBankedWrite(x412,Vector(x507),Vector(List(Const(0))),Vector(x632),Vector(Set(x631, x630))) {}
             vecSRAM load vecDRAM (MelFilterbankTest.scala:35:15)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x527 = SRAMBankedRead(x412,Vector(List(Const(0))),Vector(b520),Vector(Set(b521, b515)),Vec[Fix[TRUE,_16,_8]]) {}
             matSRAM(i, j) * vecSRAM(j) (MelFilterbankTest.scala:39:34)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x614: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x613: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x511: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
      x510: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x509: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x508: SRAMBankedWrite
  x541: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x537: UnrolledReduce (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x527: SRAMBankedRead
---------------------------------------------------------------------




